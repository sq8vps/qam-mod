
qam-mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009688  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08009794  08009794  00019794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a78  08009a78  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009a78  08009a78  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a78  08009a78  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a78  08009a78  00019a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a7c  08009a7c  00019a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f5c  200001e4  08009c64  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001140  08009c64  00021140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e684  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ab  00000000  00000000  0002e8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00031e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090f  00000000  00000000  00032b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abc0  00000000  00000000  0003340f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119ca  00000000  00000000  0004dfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086ddc  00000000  00000000  0005f999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003904  00000000  00000000  000e6778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000ea07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800977c 	.word	0x0800977c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800977c 	.word	0x0800977c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	2b00      	cmp	r3, #0
 800016c:	db0b      	blt.n	8000186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	f003 021f 	and.w	r2, r3, #31
 8000174:	4906      	ldr	r1, [pc, #24]	; (8000190 <__NVIC_EnableIRQ+0x34>)
 8000176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	2001      	movs	r0, #1
 800017e:	fa00 f202 	lsl.w	r2, r0, r2
 8000182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	e000e100 	.word	0xe000e100

08000194 <AudioInit>:
//
//    return out >> lpf->gainShift;
//}

void AudioInit(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	SET(RCC->APB2ENR,RCC_APB2ENR_IOPAEN);
 8000198:	4b5e      	ldr	r3, [pc, #376]	; (8000314 <AudioInit+0x180>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a5d      	ldr	r2, [pc, #372]	; (8000314 <AudioInit+0x180>)
 800019e:	f043 0304 	orr.w	r3, r3, #4
 80001a2:	6193      	str	r3, [r2, #24]
	SET(RCC->APB1ENR, RCC_APB1ENR_TIM2EN);
 80001a4:	4b5b      	ldr	r3, [pc, #364]	; (8000314 <AudioInit+0x180>)
 80001a6:	69db      	ldr	r3, [r3, #28]
 80001a8:	4a5a      	ldr	r2, [pc, #360]	; (8000314 <AudioInit+0x180>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	61d3      	str	r3, [r2, #28]
	SET(RCC->AHBENR, RCC_AHBENR_DMA1EN);
 80001b0:	4b58      	ldr	r3, [pc, #352]	; (8000314 <AudioInit+0x180>)
 80001b2:	695b      	ldr	r3, [r3, #20]
 80001b4:	4a57      	ldr	r2, [pc, #348]	; (8000314 <AudioInit+0x180>)
 80001b6:	f043 0301 	orr.w	r3, r3, #1
 80001ba:	6153      	str	r3, [r2, #20]

	/* ADC input: PA2 */
	RESET(GPIOA->CRL, GPIO_CRL_CNF2);
 80001bc:	4b56      	ldr	r3, [pc, #344]	; (8000318 <AudioInit+0x184>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a55      	ldr	r2, [pc, #340]	; (8000318 <AudioInit+0x184>)
 80001c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001c6:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE2);
 80001c8:	4b53      	ldr	r3, [pc, #332]	; (8000318 <AudioInit+0x184>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a52      	ldr	r2, [pc, #328]	; (8000318 <AudioInit+0x184>)
 80001ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80001d2:	6013      	str	r3, [r2, #0]
	/*/6 prescaler */
	SET(RCC->CFGR, RCC_CFGR_ADCPRE_1);
 80001d4:	4b4f      	ldr	r3, [pc, #316]	; (8000314 <AudioInit+0x180>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	4a4e      	ldr	r2, [pc, #312]	; (8000314 <AudioInit+0x180>)
 80001da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001de:	6053      	str	r3, [r2, #4]
	RESET(RCC->CFGR, RCC_CFGR_ADCPRE_0);
 80001e0:	4b4c      	ldr	r3, [pc, #304]	; (8000314 <AudioInit+0x180>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a4b      	ldr	r2, [pc, #300]	; (8000314 <AudioInit+0x180>)
 80001e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80001ea:	6053      	str	r3, [r2, #4]
	SET(ADC1->CR2, ADC_CR2_CONT);
 80001ec:	4b4b      	ldr	r3, [pc, #300]	; (800031c <AudioInit+0x188>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a4a      	ldr	r2, [pc, #296]	; (800031c <AudioInit+0x188>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6093      	str	r3, [r2, #8]
	SET(ADC1->CR2, ADC_CR2_EXTSEL);
 80001f8:	4b48      	ldr	r3, [pc, #288]	; (800031c <AudioInit+0x188>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	4a47      	ldr	r2, [pc, #284]	; (800031c <AudioInit+0x188>)
 80001fe:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000202:	6093      	str	r3, [r2, #8]
	RESET(ADC1->SQR1, ADC_SQR1_L);
 8000204:	4b45      	ldr	r3, [pc, #276]	; (800031c <AudioInit+0x188>)
 8000206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000208:	4a44      	ldr	r2, [pc, #272]	; (800031c <AudioInit+0x188>)
 800020a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800020e:	62d3      	str	r3, [r2, #44]	; 0x2c
	/* 41.5 cycle sampling */
	SET(ADC1->SMPR2, ADC_SMPR2_SMP0_2);
 8000210:	4b42      	ldr	r3, [pc, #264]	; (800031c <AudioInit+0x188>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4a41      	ldr	r2, [pc, #260]	; (800031c <AudioInit+0x188>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6113      	str	r3, [r2, #16]
	/* Channel 2 */
	RESET(ADC1->SQR3, ADC_SQR3_SQ1);
 800021c:	4b3f      	ldr	r3, [pc, #252]	; (800031c <AudioInit+0x188>)
 800021e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000220:	4a3e      	ldr	r2, [pc, #248]	; (800031c <AudioInit+0x188>)
 8000222:	f023 031f 	bic.w	r3, r3, #31
 8000226:	6353      	str	r3, [r2, #52]	; 0x34
	SET(ADC1->SQR3, ADC_SQR3_SQ1_1);
 8000228:	4b3c      	ldr	r3, [pc, #240]	; (800031c <AudioInit+0x188>)
 800022a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800022c:	4a3b      	ldr	r2, [pc, #236]	; (800031c <AudioInit+0x188>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6353      	str	r3, [r2, #52]	; 0x34

	SET(ADC1->CR2, ADC_CR2_ADON);
 8000234:	4b39      	ldr	r3, [pc, #228]	; (800031c <AudioInit+0x188>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a38      	ldr	r2, [pc, #224]	; (800031c <AudioInit+0x188>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6093      	str	r3, [r2, #8]
	/* calibrate */
	SET(ADC1->CR2, ADC_CR2_RSTCAL);
 8000240:	4b36      	ldr	r3, [pc, #216]	; (800031c <AudioInit+0x188>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a35      	ldr	r2, [pc, #212]	; (800031c <AudioInit+0x188>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & ADC_CR2_RSTCAL)
 800024c:	bf00      	nop
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <AudioInit+0x188>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 0308 	and.w	r3, r3, #8
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f9      	bne.n	800024e <AudioInit+0xba>
		;
	SET(ADC1->CR2, ADC_CR2_CAL);
 800025a:	4b30      	ldr	r3, [pc, #192]	; (800031c <AudioInit+0x188>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4a2f      	ldr	r2, [pc, #188]	; (800031c <AudioInit+0x188>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & ADC_CR2_CAL)
 8000266:	bf00      	nop
 8000268:	4b2c      	ldr	r3, [pc, #176]	; (800031c <AudioInit+0x188>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	f003 0304 	and.w	r3, r3, #4
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f9      	bne.n	8000268 <AudioInit+0xd4>
		;
	SET(ADC1->CR2, ADC_CR2_EXTTRIG);
 8000274:	4b29      	ldr	r3, [pc, #164]	; (800031c <AudioInit+0x188>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a28      	ldr	r2, [pc, #160]	; (800031c <AudioInit+0x188>)
 800027a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800027e:	6093      	str	r3, [r2, #8]
	SET(ADC1->CR2, ADC_CR2_SWSTART);
 8000280:	4b26      	ldr	r3, [pc, #152]	; (800031c <AudioInit+0x188>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a25      	ldr	r2, [pc, #148]	; (800031c <AudioInit+0x188>)
 8000286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800028a:	6093      	str	r3, [r2, #8]


	/* 16 bit memory region */
	SET(DMA1_Channel2->CCR, DMA_CCR_MSIZE_0);
 800028c:	4b24      	ldr	r3, [pc, #144]	; (8000320 <AudioInit+0x18c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a23      	ldr	r2, [pc, #140]	; (8000320 <AudioInit+0x18c>)
 8000292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000296:	6013      	str	r3, [r2, #0]
	RESET(DMA1_Channel2->CCR, DMA_CCR_MSIZE_1);
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <AudioInit+0x18c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <AudioInit+0x18c>)
 800029e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a2:	6013      	str	r3, [r2, #0]
	SET(DMA1_Channel2->CCR, DMA_CCR_PSIZE_0);
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <AudioInit+0x18c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a1d      	ldr	r2, [pc, #116]	; (8000320 <AudioInit+0x18c>)
 80002aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ae:	6013      	str	r3, [r2, #0]
	RESET(DMA1_Channel2->CCR, DMA_CCR_PSIZE_1);
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <AudioInit+0x18c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <AudioInit+0x18c>)
 80002b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002ba:	6013      	str	r3, [r2, #0]
	/* enable memory pointer increment, circular mode and interrupt generation */
	SET(DMA1_Channel2->CCR, DMA_CCR_MINC | DMA_CCR_CIRC| DMA_CCR_TCIE);
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <AudioInit+0x18c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <AudioInit+0x18c>)
 80002c2:	f043 03a2 	orr.w	r3, r3, #162	; 0xa2
 80002c6:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CNDTR = AUDIO_DMA_BUFFER_SIZE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <AudioInit+0x18c>)
 80002ca:	2220      	movs	r2, #32
 80002cc:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CPAR = (uintptr_t)&(ADC1->DR);
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <AudioInit+0x18c>)
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <AudioInit+0x190>)
 80002d2:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uintptr_t)dmaBuffer;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <AudioInit+0x18c>)
 80002d6:	4a14      	ldr	r2, [pc, #80]	; (8000328 <AudioInit+0x194>)
 80002d8:	60da      	str	r2, [r3, #12]
	SET(DMA1_Channel2->CCR, DMA_CCR_EN);
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <AudioInit+0x18c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a10      	ldr	r2, [pc, #64]	; (8000320 <AudioInit+0x18c>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]

	/* 72 / 4 = 23 MHz */
	TIM2->PSC = 3;
 80002e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ea:	2203      	movs	r2, #3
 80002ec:	629a      	str	r2, [r3, #40]	; 0x28
	/* 23 MHz / 408 = 44118 Hz, which is probably the closest we can get */
	TIM2->ARR = 407;
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f2:	f240 1297 	movw	r2, #407	; 0x197
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* enable DMA call instead of standard interrupt */
	SET(TIM2->DIER, TIM_DIER_UDE);
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000308:	200c      	movs	r0, #12
 800030a:	f7ff ff27 	bl	800015c <__NVIC_EnableIRQ>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	40010800 	.word	0x40010800
 800031c:	40012400 	.word	0x40012400
 8000320:	4002001c 	.word	0x4002001c
 8000324:	4001244c 	.word	0x4001244c
 8000328:	20000200 	.word	0x20000200

0800032c <DMA1_Channel2_IRQHandler>:
	RESET(TIM2->CR1, TIM_CR1_CEN);
}

void DMA1_Channel2_IRQHandler() __attribute__ ((interrupt));
void DMA1_Channel2_IRQHandler()
{
 800032c:	4668      	mov	r0, sp
 800032e:	f020 0107 	bic.w	r1, r0, #7
 8000332:	468d      	mov	sp, r1
 8000334:	b581      	push	{r0, r7, lr}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i < AUDIO_DMA_BUFFER_SIZE; i++)
 800033a:	2300      	movs	r3, #0
 800033c:	80fb      	strh	r3, [r7, #6]
 800033e:	e00e      	b.n	800035e <DMA1_Channel2_IRQHandler+0x32>
		buffer[i] = (int16_t)dmaBuffer[i] - 2047;
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	4a13      	ldr	r2, [pc, #76]	; (8000390 <DMA1_Channel2_IRQHandler+0x64>)
 8000344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000348:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 800034c:	b29a      	uxth	r2, r3
 800034e:	88fb      	ldrh	r3, [r7, #6]
 8000350:	b211      	sxth	r1, r2
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <DMA1_Channel2_IRQHandler+0x68>)
 8000354:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < AUDIO_DMA_BUFFER_SIZE; i++)
 8000358:	88fb      	ldrh	r3, [r7, #6]
 800035a:	3301      	adds	r3, #1
 800035c:	80fb      	strh	r3, [r7, #6]
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	2b1f      	cmp	r3, #31
 8000362:	d9ed      	bls.n	8000340 <DMA1_Channel2_IRQHandler+0x14>
	if(NULL != callback)
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <DMA1_Channel2_IRQHandler+0x6c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d004      	beq.n	8000376 <DMA1_Channel2_IRQHandler+0x4a>
		callback(buffer, AUDIO_DMA_BUFFER_SIZE);
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <DMA1_Channel2_IRQHandler+0x6c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2120      	movs	r1, #32
 8000372:	4808      	ldr	r0, [pc, #32]	; (8000394 <DMA1_Channel2_IRQHandler+0x68>)
 8000374:	4798      	blx	r3
	SET(DMA1->IFCR, DMA_IFCR_CTCIF2);
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <DMA1_Channel2_IRQHandler+0x70>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <DMA1_Channel2_IRQHandler+0x70>)
 800037c:	f043 0320 	orr.w	r3, r3, #32
 8000380:	6053      	str	r3, [r2, #4]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 800038c:	4685      	mov	sp, r0
 800038e:	4770      	bx	lr
 8000390:	20000200 	.word	0x20000200
 8000394:	20000240 	.word	0x20000240
 8000398:	20000280 	.word	0x20000280
 800039c:	40020000 	.word	0x40020000

080003a0 <pow10i>:
#include "common.h"
#include <string.h>

static uint64_t pow10i(uint16_t exp)
{
 80003a0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80003a4:	b085      	sub	sp, #20
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	4601      	mov	r1, r0
 80003aa:	80f9      	strh	r1, [r7, #6]
	if(exp == 0)
 80003ac:	88f9      	ldrh	r1, [r7, #6]
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d104      	bne.n	80003bc <pow10i+0x1c>
		return 1;
 80003b2:	f04f 0201 	mov.w	r2, #1
 80003b6:	f04f 0300 	mov.w	r3, #0
 80003ba:	e027      	b.n	800040c <pow10i+0x6c>
	uint64_t n = 1;
 80003bc:	f04f 0001 	mov.w	r0, #1
 80003c0:	f04f 0100 	mov.w	r1, #0
 80003c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while(exp--)
 80003c8:	e019      	b.n	80003fe <pow10i+0x5e>
		n *= 10;
 80003ca:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80003ce:	4640      	mov	r0, r8
 80003d0:	4649      	mov	r1, r9
 80003d2:	f04f 0400 	mov.w	r4, #0
 80003d6:	f04f 0500 	mov.w	r5, #0
 80003da:	008d      	lsls	r5, r1, #2
 80003dc:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 80003e0:	0084      	lsls	r4, r0, #2
 80003e2:	4620      	mov	r0, r4
 80003e4:	4629      	mov	r1, r5
 80003e6:	eb10 0208 	adds.w	r2, r0, r8
 80003ea:	eb41 0309 	adc.w	r3, r1, r9
 80003ee:	eb12 0a02 	adds.w	sl, r2, r2
 80003f2:	eb43 0b03 	adc.w	fp, r3, r3
 80003f6:	4652      	mov	r2, sl
 80003f8:	465b      	mov	r3, fp
 80003fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while(exp--)
 80003fe:	88f9      	ldrh	r1, [r7, #6]
 8000400:	1e48      	subs	r0, r1, #1
 8000402:	80f8      	strh	r0, [r7, #6]
 8000404:	2900      	cmp	r1, #0
 8000406:	d1e0      	bne.n	80003ca <pow10i+0x2a>
	return n;
 8000408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800040c:	4610      	mov	r0, r2
 800040e:	4619      	mov	r1, r3
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000418:	4770      	bx	lr

0800041a <StrToInt>:


int64_t StrToInt(const char *str, uint16_t len)
{
 800041a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	460b      	mov	r3, r1
 8000426:	817b      	strh	r3, [r7, #10]
	if(len == 0)
 8000428:	897b      	ldrh	r3, [r7, #10]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <StrToInt+0x1e>
		len = strlen(str);
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f7ff fe8c 	bl	800014c <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	817b      	strh	r3, [r7, #10]

	int64_t tmp = 0;
 8000438:	f04f 0200 	mov.w	r2, #0
 800043c:	f04f 0300 	mov.w	r3, #0
 8000440:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int32_t i = (len - 1); i >= 0; i--)
 8000444:	897b      	ldrh	r3, [r7, #10]
 8000446:	3b01      	subs	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
 800044a:	e051      	b.n	80004f0 <StrToInt+0xd6>
	{
		if((i == 0) && (str[0] == '-'))
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10b      	bne.n	800046a <StrToInt+0x50>
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b2d      	cmp	r3, #45	; 0x2d
 8000458:	d107      	bne.n	800046a <StrToInt+0x50>
		{
			return -tmp;
 800045a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800045e:	2100      	movs	r1, #0
 8000460:	f1d2 0800 	rsbs	r8, r2, #0
 8000464:	eb61 0903 	sbc.w	r9, r1, r3
 8000468:	e049      	b.n	80004fe <StrToInt+0xe4>
		}
		else if(IS_NUMBER(str[i]))
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	4413      	add	r3, r2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b2f      	cmp	r3, #47	; 0x2f
 8000474:	d92e      	bls.n	80004d4 <StrToInt+0xba>
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	4413      	add	r3, r2
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b39      	cmp	r3, #57	; 0x39
 8000480:	d828      	bhi.n	80004d4 <StrToInt+0xba>
			tmp += ((str[i] - '0') * pow10i(len - 1 - i));
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	4413      	add	r3, r2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	3b30      	subs	r3, #48	; 0x30
 800048c:	17da      	asrs	r2, r3, #31
 800048e:	469a      	mov	sl, r3
 8000490:	4693      	mov	fp, r2
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	b29b      	uxth	r3, r3
 8000496:	897a      	ldrh	r2, [r7, #10]
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b29b      	uxth	r3, r3
 800049c:	3b01      	subs	r3, #1
 800049e:	b29b      	uxth	r3, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff7d 	bl	80003a0 <pow10i>
 80004a6:	4602      	mov	r2, r0
 80004a8:	460b      	mov	r3, r1
 80004aa:	fb02 f00b 	mul.w	r0, r2, fp
 80004ae:	fb0a f103 	mul.w	r1, sl, r3
 80004b2:	4401      	add	r1, r0
 80004b4:	fbaa 4502 	umull	r4, r5, sl, r2
 80004b8:	194b      	adds	r3, r1, r5
 80004ba:	461d      	mov	r5, r3
 80004bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80004c0:	18a1      	adds	r1, r4, r2
 80004c2:	6039      	str	r1, [r7, #0]
 80004c4:	eb45 0303 	adc.w	r3, r5, r3
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80004d2:	e00a      	b.n	80004ea <StrToInt+0xd0>
		else if(' ' == str[i])
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b20      	cmp	r3, #32
 80004de:	d00b      	beq.n	80004f8 <StrToInt+0xde>
			break;
		else
			return 0;
 80004e0:	f04f 0800 	mov.w	r8, #0
 80004e4:	f04f 0900 	mov.w	r9, #0
 80004e8:	e009      	b.n	80004fe <StrToInt+0xe4>
	for(int32_t i = (len - 1); i >= 0; i--)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	daaa      	bge.n	800044c <StrToInt+0x32>
 80004f6:	e000      	b.n	80004fa <StrToInt+0xe0>
			break;
 80004f8:	bf00      	nop
	}
	return tmp;
 80004fa:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
}
 80004fe:	4642      	mov	r2, r8
 8000500:	464b      	mov	r3, r9
 8000502:	4610      	mov	r0, r2
 8000504:	4619      	mov	r1, r3
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f001 f97c 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f862 	bl	80005e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  	//USB pullup down when the peripheral is being initialized
	SET(RCC->APB2ENR, RCC_APB2ENR_IOPAEN);
 800051c:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <main+0xbc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <main+0xbc>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
	SET(GPIOA->CRH, GPIO_CRH_MODE15_1);
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <main+0xc0>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <main+0xc0>)
 800052e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000532:	6053      	str	r3, [r2, #4]
	RESET(GPIOA->CRH, GPIO_CRH_CNF15);
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <main+0xc0>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a25      	ldr	r2, [pc, #148]	; (80005d0 <main+0xc0>)
 800053a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800053e:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR = GPIO_BSRR_BR15;
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <main+0xc0>)
 8000542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000546:	611a      	str	r2, [r3, #16]
	HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f001 f9c3 	bl	80018d4 <HAL_Delay>
	//USB pullup high to force enumeration
	GPIOA->BSRR = GPIO_BSRR_BS15;
 800054e:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <main+0xc0>)
 8000550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000554:	611a      	str	r2, [r3, #16]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f89d 	bl	8000694 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800055a:	f007 fbfb 	bl	8007d54 <MX_USB_DEVICE_Init>





	UartInit(&UartUsb, NULL, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	2100      	movs	r1, #0
 8000562:	481c      	ldr	r0, [pc, #112]	; (80005d4 <main+0xc4>)
 8000564:	f000 ffde 	bl	8001524 <UartInit>
	UartConfig(&UartUsb, 1);
 8000568:	2101      	movs	r1, #1
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <main+0xc4>)
 800056c:	f001 f818 	bl	80015a0 <UartConfig>

	ModulatorInit();
 8000570:	f000 f8d4 	bl	800071c <ModulatorInit>
	AudioInit();
 8000574:	f7ff fe0e 	bl	8000194 <AudioInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(UartUsb.rxType != DATA_NOTHING)
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0xc4>)
 800057a:	7a1b      	ldrb	r3, [r3, #8]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00f      	beq.n	80005a0 <main+0x90>
	  {
		  TermHandleSpecial(&UartUsb);
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <main+0xc4>)
 8000582:	f000 fc15 	bl	8000db0 <TermHandleSpecial>
		  if(UartUsb.rxType != DATA_USB)
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <main+0xc4>)
 8000588:	7a1b      	ldrb	r3, [r3, #8]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d005      	beq.n	800059a <main+0x8a>
		  {
			  TermParse(&UartUsb);
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0xc4>)
 8000590:	f000 fc92 	bl	8000eb8 <TermParse>
		  	  UartClearRx(&UartUsb);
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <main+0xc4>)
 8000596:	f001 f905 	bl	80017a4 <UartClearRx>
		  }
		  UartUsb.rxType = DATA_NOTHING;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <main+0xc4>)
 800059c:	2200      	movs	r2, #0
 800059e:	721a      	strb	r2, [r3, #8]
	  }
	  if(Uart1.rxType != DATA_NOTHING)
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <main+0xc8>)
 80005a2:	7a1b      	ldrb	r3, [r3, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d005      	beq.n	80005b4 <main+0xa4>
	  {
		  TermParse(&Uart1);
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <main+0xc8>)
 80005aa:	f000 fc85 	bl	8000eb8 <TermParse>
		  UartClearRx(&Uart1);
 80005ae:	480a      	ldr	r0, [pc, #40]	; (80005d8 <main+0xc8>)
 80005b0:	f001 f8f8 	bl	80017a4 <UartClearRx>
	  }
	  if(Uart2.rxType != DATA_NOTHING)
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0xcc>)
 80005b6:	7a1b      	ldrb	r3, [r3, #8]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0dd      	beq.n	8000578 <main+0x68>
	  {
		  TermParse(&Uart2);
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <main+0xcc>)
 80005be:	f000 fc7b 	bl	8000eb8 <TermParse>
		  UartClearRx(&Uart2);
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <main+0xcc>)
 80005c4:	f001 f8ee 	bl	80017a4 <UartClearRx>
	  if(UartUsb.rxType != DATA_NOTHING)
 80005c8:	e7d6      	b.n	8000578 <main+0x68>
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010800 	.word	0x40010800
 80005d4:	200004c0 	.word	0x200004c0
 80005d8:	20000290 	.word	0x20000290
 80005dc:	200003a8 	.word	0x200003a8

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ea:	2228      	movs	r2, #40	; 0x28
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f008 fa07 	bl	8008a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800062c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000636:	4618      	mov	r0, r3
 8000638:	f002 ffec 	bl	8003614 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000642:	f000 f849 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fa58 	bl	8003b18 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800066e:	f000 f833 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000672:	2310      	movs	r3, #16
 8000674:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fba7 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000688:	f000 f826 	bl	80006d8 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_GPIO_Init+0x40>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <MX_GPIO_Init+0x40>)
 80006a0:	f043 0320 	orr.w	r3, r3, #32
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_GPIO_Init+0x40>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0320 	and.w	r3, r3, #32
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_GPIO_Init+0x40>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <MX_GPIO_Init+0x40>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_GPIO_Init+0x40>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40021000 	.word	0x40021000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <__NVIC_EnableIRQ>:
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db0b      	blt.n	800070e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 021f 	and.w	r2, r3, #31
 80006fc:	4906      	ldr	r1, [pc, #24]	; (8000718 <__NVIC_EnableIRQ+0x34>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	095b      	lsrs	r3, r3, #5
 8000704:	2001      	movs	r0, #1
 8000706:	fa00 f202 	lsl.w	r2, r0, r2
 800070a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100

0800071c <ModulatorInit>:
static uint8_t mask = 0xF;
static uint32_t baudrate = 100;
static uint8_t (*callback)(void) = NULL;

void ModulatorInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	SET(RCC->APB2ENR,  RCC_APB2ENR_IOPAEN);
 8000720:	4b5c      	ldr	r3, [pc, #368]	; (8000894 <ModulatorInit+0x178>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a5b      	ldr	r2, [pc, #364]	; (8000894 <ModulatorInit+0x178>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
	SET(RCC->APB2ENR,  RCC_APB2ENR_IOPBEN);
 800072c:	4b59      	ldr	r3, [pc, #356]	; (8000894 <ModulatorInit+0x178>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a58      	ldr	r2, [pc, #352]	; (8000894 <ModulatorInit+0x178>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	6193      	str	r3, [r2, #24]
	//PA3
	SET(GPIOA->CRL, GPIO_CRL_MODE3_0);
 8000738:	4b57      	ldr	r3, [pc, #348]	; (8000898 <ModulatorInit+0x17c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a56      	ldr	r2, [pc, #344]	; (8000898 <ModulatorInit+0x17c>)
 800073e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000742:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE3_1);
 8000744:	4b54      	ldr	r3, [pc, #336]	; (8000898 <ModulatorInit+0x17c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a53      	ldr	r2, [pc, #332]	; (8000898 <ModulatorInit+0x17c>)
 800074a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800074e:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF3);
 8000750:	4b51      	ldr	r3, [pc, #324]	; (8000898 <ModulatorInit+0x17c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a50      	ldr	r2, [pc, #320]	; (8000898 <ModulatorInit+0x17c>)
 8000756:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075a:	6013      	str	r3, [r2, #0]
	//PA4
	SET(GPIOA->CRL, GPIO_CRL_MODE4_0);
 800075c:	4b4e      	ldr	r3, [pc, #312]	; (8000898 <ModulatorInit+0x17c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a4d      	ldr	r2, [pc, #308]	; (8000898 <ModulatorInit+0x17c>)
 8000762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000766:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE4_1);
 8000768:	4b4b      	ldr	r3, [pc, #300]	; (8000898 <ModulatorInit+0x17c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a4a      	ldr	r2, [pc, #296]	; (8000898 <ModulatorInit+0x17c>)
 800076e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000772:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF4);
 8000774:	4b48      	ldr	r3, [pc, #288]	; (8000898 <ModulatorInit+0x17c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a47      	ldr	r2, [pc, #284]	; (8000898 <ModulatorInit+0x17c>)
 800077a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800077e:	6013      	str	r3, [r2, #0]
	//PA5
	SET(GPIOA->CRL, GPIO_CRL_MODE5_0);
 8000780:	4b45      	ldr	r3, [pc, #276]	; (8000898 <ModulatorInit+0x17c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a44      	ldr	r2, [pc, #272]	; (8000898 <ModulatorInit+0x17c>)
 8000786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800078a:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE5_1);
 800078c:	4b42      	ldr	r3, [pc, #264]	; (8000898 <ModulatorInit+0x17c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a41      	ldr	r2, [pc, #260]	; (8000898 <ModulatorInit+0x17c>)
 8000792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000796:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF5);
 8000798:	4b3f      	ldr	r3, [pc, #252]	; (8000898 <ModulatorInit+0x17c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a3e      	ldr	r2, [pc, #248]	; (8000898 <ModulatorInit+0x17c>)
 800079e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80007a2:	6013      	str	r3, [r2, #0]
	//PA6
	SET(GPIOA->CRL, GPIO_CRL_MODE6_0);
 80007a4:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <ModulatorInit+0x17c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <ModulatorInit+0x17c>)
 80007aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007ae:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE6_1);
 80007b0:	4b39      	ldr	r3, [pc, #228]	; (8000898 <ModulatorInit+0x17c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a38      	ldr	r2, [pc, #224]	; (8000898 <ModulatorInit+0x17c>)
 80007b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80007ba:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF6);
 80007bc:	4b36      	ldr	r3, [pc, #216]	; (8000898 <ModulatorInit+0x17c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a35      	ldr	r2, [pc, #212]	; (8000898 <ModulatorInit+0x17c>)
 80007c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80007c6:	6013      	str	r3, [r2, #0]
	//PA7
	SET(GPIOA->CRL, GPIO_CRL_MODE7_0);
 80007c8:	4b33      	ldr	r3, [pc, #204]	; (8000898 <ModulatorInit+0x17c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a32      	ldr	r2, [pc, #200]	; (8000898 <ModulatorInit+0x17c>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE7_1);
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <ModulatorInit+0x17c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <ModulatorInit+0x17c>)
 80007da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80007de:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF7);
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <ModulatorInit+0x17c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <ModulatorInit+0x17c>)
 80007e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80007ea:	6013      	str	r3, [r2, #0]
	//PB0
	SET(GPIOB->CRL, GPIO_CRL_MODE0_0);
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <ModulatorInit+0x180>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <ModulatorInit+0x180>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_MODE0_1);
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <ModulatorInit+0x180>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <ModulatorInit+0x180>)
 80007fe:	f023 0302 	bic.w	r3, r3, #2
 8000802:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_CNF0);
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <ModulatorInit+0x180>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a24      	ldr	r2, [pc, #144]	; (800089c <ModulatorInit+0x180>)
 800080a:	f023 030c 	bic.w	r3, r3, #12
 800080e:	6013      	str	r3, [r2, #0]
	//PB1
	SET(GPIOB->CRL, GPIO_CRL_MODE1_0);
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <ModulatorInit+0x180>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <ModulatorInit+0x180>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_MODE1_1);
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <ModulatorInit+0x180>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1e      	ldr	r2, [pc, #120]	; (800089c <ModulatorInit+0x180>)
 8000822:	f023 0320 	bic.w	r3, r3, #32
 8000826:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_CNF1);
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <ModulatorInit+0x180>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <ModulatorInit+0x180>)
 800082e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000832:	6013      	str	r3, [r2, #0]
	//PB10
	SET(GPIOB->CRH, GPIO_CRH_MODE10_0);
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <ModulatorInit+0x180>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a18      	ldr	r2, [pc, #96]	; (800089c <ModulatorInit+0x180>)
 800083a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083e:	6053      	str	r3, [r2, #4]
	RESET(GPIOB->CRH, GPIO_CRH_MODE10_1);
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <ModulatorInit+0x180>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4a15      	ldr	r2, [pc, #84]	; (800089c <ModulatorInit+0x180>)
 8000846:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800084a:	6053      	str	r3, [r2, #4]
	RESET(GPIOB->CRH, GPIO_CRH_CNF10);
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <ModulatorInit+0x180>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <ModulatorInit+0x180>)
 8000852:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000856:	6053      	str	r3, [r2, #4]

	ModulatorPut(0);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f827 	bl	80008ac <ModulatorPut>


	SET(RCC->APB2ENR, RCC_APB2ENR_TIM1EN);
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <ModulatorInit+0x178>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <ModulatorInit+0x178>)
 8000864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000868:	6193      	str	r3, [r2, #24]
	//run timer at 1 MHz, minimum baudrate is 15.26 Bd
	TIM1->PSC = 71;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ModulatorInit+0x184>)
 800086c:	2247      	movs	r2, #71	; 0x47
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
	SET(TIM1->DIER, TIM_DIER_UIE);
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <ModulatorInit+0x184>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <ModulatorInit+0x184>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = 1000000 / baudrate;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <ModulatorInit+0x188>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <ModulatorInit+0x184>)
 8000882:	4909      	ldr	r1, [pc, #36]	; (80008a8 <ModulatorInit+0x18c>)
 8000884:	fbb1 f3f3 	udiv	r3, r1, r3
 8000888:	62d3      	str	r3, [r2, #44]	; 0x2c
	NVIC_EnableIRQ(TIM1_UP_IRQn);
 800088a:	2019      	movs	r0, #25
 800088c:	f7ff ff2a 	bl	80006e4 <__NVIC_EnableIRQ>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	20000008 	.word	0x20000008
 80008a8:	000f4240 	.word	0x000f4240

080008ac <ModulatorPut>:

void ModulatorPut(uint8_t value)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	value = lut[value & mask]; //map value to constellation point
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <ModulatorPut+0xcc>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a30      	ldr	r2, [pc, #192]	; (800097c <ModulatorPut+0xd0>)
 80008bc:	7811      	ldrb	r1, [r2, #0]
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	400a      	ands	r2, r1
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	71fb      	strb	r3, [r7, #7]

	if(value & 1)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d007      	beq.n	80008e4 <ModulatorPut+0x38>
	{
		GPIOA->BSRR = GPIO_BSRR_BS3;
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <ModulatorPut+0xd4>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BR4;
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <ModulatorPut+0xd4>)
 80008dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	e006      	b.n	80008f2 <ModulatorPut+0x46>
	}
	else
	{
		GPIOA->BSRR = GPIO_BSRR_BR3;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <ModulatorPut+0xd4>)
 80008e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008ea:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BS4;
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <ModulatorPut+0xd4>)
 80008ee:	2210      	movs	r2, #16
 80008f0:	611a      	str	r2, [r3, #16]
	}

	//"inner" outputs are actually swapped due to use of Butler matrix without output crossover
	if(value & 4)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d007      	beq.n	800090c <ModulatorPut+0x60>
	{
		GPIOA->BSRR = GPIO_BSRR_BS5;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <ModulatorPut+0xd4>)
 80008fe:	2220      	movs	r2, #32
 8000900:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BR6;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <ModulatorPut+0xd4>)
 8000904:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	e006      	b.n	800091a <ModulatorPut+0x6e>
	}
	else
	{
		GPIOA->BSRR = GPIO_BSRR_BR5;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <ModulatorPut+0xd4>)
 800090e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000912:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BS6;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <ModulatorPut+0xd4>)
 8000916:	2240      	movs	r2, #64	; 0x40
 8000918:	611a      	str	r2, [r3, #16]
	}

	if(value & 2)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d007      	beq.n	8000934 <ModulatorPut+0x88>
	{
		GPIOA->BSRR = GPIO_BSRR_BS7;
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <ModulatorPut+0xd4>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BR0;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <ModulatorPut+0xd8>)
 800092c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	e006      	b.n	8000942 <ModulatorPut+0x96>
	}
	else
	{
		GPIOA->BSRR = GPIO_BSRR_BR7;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <ModulatorPut+0xd4>)
 8000936:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800093a:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BS0;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <ModulatorPut+0xd8>)
 800093e:	2201      	movs	r2, #1
 8000940:	611a      	str	r2, [r3, #16]
	}

	if(value & 8)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <ModulatorPut+0xb0>
	{
		GPIOB->BSRR = GPIO_BSRR_BS1;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <ModulatorPut+0xd8>)
 800094e:	2202      	movs	r2, #2
 8000950:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BR10;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <ModulatorPut+0xd8>)
 8000954:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000958:	611a      	str	r2, [r3, #16]
	else
	{
		GPIOB->BSRR = GPIO_BSRR_BR1;
		GPIOB->BSRR = GPIO_BSRR_BS10;
	}
}
 800095a:	e007      	b.n	800096c <ModulatorPut+0xc0>
		GPIOB->BSRR = GPIO_BSRR_BR1;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <ModulatorPut+0xd8>)
 800095e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000962:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BS10;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <ModulatorPut+0xd8>)
 8000966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096a:	611a      	str	r2, [r3, #16]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40010800 	.word	0x40010800
 8000984:	40010c00 	.word	0x40010c00

08000988 <ModulatorSetMode>:

void ModulatorSetMode(enum Modulator m)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	mode = m;
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <ModulatorSetMode+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	7013      	strb	r3, [r2, #0]
	switch(m)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d002      	beq.n	80009a4 <ModulatorSetMode+0x1c>
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d007      	beq.n	80009b2 <ModulatorSetMode+0x2a>
 80009a2:	e00d      	b.n	80009c0 <ModulatorSetMode+0x38>
	{
		case QAM4:
			mask = 0x3;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <ModulatorSetMode+0x54>)
 80009a6:	2203      	movs	r2, #3
 80009a8:	701a      	strb	r2, [r3, #0]
			lut = (uint8_t*)qpsk;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <ModulatorSetMode+0x58>)
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <ModulatorSetMode+0x5c>)
 80009ae:	601a      	str	r2, [r3, #0]
			break;
 80009b0:	e00d      	b.n	80009ce <ModulatorSetMode+0x46>
		case BPSK:
			mask = 0x1;
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <ModulatorSetMode+0x54>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
			lut = (uint8_t*)bpsk;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <ModulatorSetMode+0x58>)
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <ModulatorSetMode+0x60>)
 80009bc:	601a      	str	r2, [r3, #0]
			break;
 80009be:	e006      	b.n	80009ce <ModulatorSetMode+0x46>
		default:
		case QAM16:
			mask = 0xF;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <ModulatorSetMode+0x54>)
 80009c2:	220f      	movs	r2, #15
 80009c4:	701a      	strb	r2, [r3, #0]
			lut = (uint8_t*)qam16;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <ModulatorSetMode+0x58>)
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <ModulatorSetMode+0x64>)
 80009ca:	601a      	str	r2, [r3, #0]
			break;
 80009cc:	bf00      	nop
	}
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000284 	.word	0x20000284
 80009dc:	20000004 	.word	0x20000004
 80009e0:	20000000 	.word	0x20000000
 80009e4:	080098a4 	.word	0x080098a4
 80009e8:	080098a8 	.word	0x080098a8
 80009ec:	08009894 	.word	0x08009894

080009f0 <ModulatorSetBaudrate>:

uint32_t ModulatorSetBaudrate(uint32_t baud)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	//assume the timer runs at 1 MHz
	uint32_t arr = 1000000 / baud;
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <ModulatorSetBaudrate+0x40>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a00:	60fb      	str	r3, [r7, #12]
	if(arr > 65535)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a08:	d302      	bcc.n	8000a10 <ModulatorSetBaudrate+0x20>
		arr = 65535;
 8000a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0e:	60fb      	str	r3, [r7, #12]
	TIM1->ARR = arr;
 8000a10:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <ModulatorSetBaudrate+0x44>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	62d3      	str	r3, [r2, #44]	; 0x2c
	baudrate = 1000000 / arr;
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <ModulatorSetBaudrate+0x40>)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <ModulatorSetBaudrate+0x48>)
 8000a20:	6013      	str	r3, [r2, #0]
	return baudrate;
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <ModulatorSetBaudrate+0x48>)
 8000a24:	681b      	ldr	r3, [r3, #0]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	000f4240 	.word	0x000f4240
 8000a34:	40012c00 	.word	0x40012c00
 8000a38:	20000008 	.word	0x20000008

08000a3c <ModulatorStartTimer>:

void ModulatorStartTimer(uint8_t (*symbolCallback)(void))
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if(NULL == symbolCallback)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d106      	bne.n	8000a58 <ModulatorStartTimer+0x1c>
	{
		RESET(TIM1->CR1, TIM_CR1_CEN);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <ModulatorStartTimer+0x38>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <ModulatorStartTimer+0x38>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]
		return;
 8000a56:	e008      	b.n	8000a6a <ModulatorStartTimer+0x2e>
	}
	callback = symbolCallback;
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <ModulatorStartTimer+0x3c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
	SET(TIM1->CR1, TIM_CR1_CEN);
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <ModulatorStartTimer+0x38>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <ModulatorStartTimer+0x38>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6013      	str	r3, [r2, #0]
}
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40012c00 	.word	0x40012c00
 8000a78:	20000288 	.word	0x20000288

08000a7c <ModulatorStop>:

void ModulatorStop(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	RESET(TIM1->CR1, TIM_CR1_CEN);
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <ModulatorStop+0x18>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <ModulatorStop+0x18>)
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40012c00 	.word	0x40012c00

08000a98 <randomCallback>:

static uint8_t randomCallback(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	return rand() % (mask + 1);
 8000a9c:	f007 fe6e 	bl	800877c <rand>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <randomCallback+0x20>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	fb92 f1f3 	sdiv	r1, r2, r3
 8000aac:	fb01 f303 	mul.w	r3, r1, r3
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	b2db      	uxtb	r3, r3
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000004 	.word	0x20000004

08000abc <ModulatorStartRandom>:

void ModulatorStartRandom(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	ModulatorStartTimer(&randomCallback);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <ModulatorStartRandom+0x10>)
 8000ac2:	f7ff ffbb 	bl	8000a3c <ModulatorStartTimer>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08000a99 	.word	0x08000a99

08000ad0 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler() __attribute__((interrupt));
void TIM1_UP_IRQHandler()
{
 8000ad0:	4668      	mov	r0, sp
 8000ad2:	f020 0107 	bic.w	r1, r0, #7
 8000ad6:	468d      	mov	sp, r1
 8000ad8:	b589      	push	{r0, r3, r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	RESET(TIM1->SR, TIM_SR_UIF);
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <TIM1_UP_IRQHandler+0x3c>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <TIM1_UP_IRQHandler+0x3c>)
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	6113      	str	r3, [r2, #16]
	if(NULL != callback)
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <TIM1_UP_IRQHandler+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <TIM1_UP_IRQHandler+0x2e>
		ModulatorPut(callback());
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <TIM1_UP_IRQHandler+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4798      	blx	r3
 8000af6:	4603      	mov	r3, r0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fed7 	bl	80008ac <ModulatorPut>
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8000b06:	4685      	mov	sp, r0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	20000288 	.word	0x20000288

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_MspInit+0x60>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_MspInit+0x60>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000

08000b78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <__NVIC_SystemReset+0x24>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b8a:	4904      	ldr	r1, [pc, #16]	; (8000b9c <__NVIC_SystemReset+0x24>)
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_SystemReset+0x28>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <__NVIC_SystemReset+0x20>
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0004 	.word	0x05fa0004

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	NVIC_SystemReset();
 8000ba8:	f7ff ffe6 	bl	8000b78 <__NVIC_SystemReset>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8000bb0:	f7ff ffe2 	bl	8000b78 <__NVIC_SystemReset>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	NVIC_SystemReset();
 8000bb8:	f7ff ffde 	bl	8000b78 <__NVIC_SystemReset>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	NVIC_SystemReset();
 8000bc0:	f7ff ffda 	bl	8000b78 <__NVIC_SystemReset>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	NVIC_SystemReset();
 8000bc8:	f7ff ffd6 	bl	8000b78 <__NVIC_SystemReset>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 fe52 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000c02:	f001 f8bd 	bl	8001d80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000ae4 	.word	0x20000ae4

08000c10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c16:	f001 f8b3 	bl	8001d80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000ae4 	.word	0x20000ae4

08000c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	return 1;
 8000c28:	2301      	movs	r3, #1
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <_kill>:

int _kill(int pid, int sig)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c3c:	f007 ff42 	bl	8008ac4 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2216      	movs	r2, #22
 8000c44:	601a      	str	r2, [r3, #0]
	return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_exit>:

void _exit (int status)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffe7 	bl	8000c32 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c64:	e7fe      	b.n	8000c64 <_exit+0x12>

08000c66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e00a      	b.n	8000c8e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c78:	f3af 8000 	nop.w
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	60ba      	str	r2, [r7, #8]
 8000c84:	b2ca      	uxtb	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	dbf0      	blt.n	8000c78 <_read+0x12>
	}

return len;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e009      	b.n	8000cc6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	60ba      	str	r2, [r7, #8]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	dbf1      	blt.n	8000cb2 <_write+0x12>
	}
	return len;
 8000cce:	687b      	ldr	r3, [r7, #4]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_close>:

int _close(int file)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfe:	605a      	str	r2, [r3, #4]
	return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <_isatty>:

int _isatty(int file)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	return 1;
 8000d14:	2301      	movs	r3, #1
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f007 feac 	bl	8008ac4 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20005000 	.word	0x20005000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	2000028c 	.word	0x2000028c
 8000da0:	20001140 	.word	0x20001140

08000da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <TermHandleSpecial>:
			UartSendNumber(&Uart2, n);
	}
}

void TermHandleSpecial(Uart *u)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	if(u->lastRxBufferHead >= u->rxBufferHead) //UART RX buffer index was probably cleared
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d303      	bcc.n	8000dd4 <TermHandleSpecial+0x24>
		u->lastRxBufferHead = 0;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

	if(u->rxBuffer[u->rxBufferHead - 1] == '\b') //user entered backspace
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	7a9b      	ldrb	r3, [r3, #10]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d127      	bne.n	8000e3a <TermHandleSpecial+0x8a>
	{
		if(u->rxBufferHead > 1) //there was some data in buffer
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d91d      	bls.n	8000e32 <TermHandleSpecial+0x82>
		{
			u->rxBufferHead -= 2; //remove backspace and preceding character
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			UartSendString(u, "\b \b", 3); //backspace (one character left), remove backspaced character (send space) and backspace again
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4929      	ldr	r1, [pc, #164]	; (8000eb0 <TermHandleSpecial+0x100>)
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fb0b 	bl	8001428 <UartSendString>
			if(u->lastRxBufferHead > 0)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00d      	beq.n	8000e3a <TermHandleSpecial+0x8a>
				u->lastRxBufferHead--; //1 character was removed
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 8000e30:	e003      	b.n	8000e3a <TermHandleSpecial+0x8a>
		}
		else //no preceding character
			u->rxBufferHead = 0;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	}
	uint16_t t = u->rxBufferHead; //store last index
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000e40:	81fb      	strh	r3, [r7, #14]
	if(u->lastRxBufferHead < t) //local echo handling
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	89fa      	ldrh	r2, [r7, #14]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d92b      	bls.n	8000ea8 <TermHandleSpecial+0xf8>
	{
		UartSendString(u, (uint8_t*)&u->rxBuffer[u->lastRxBufferHead], t - u->lastRxBufferHead); //echo characters entered by user
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3308      	adds	r3, #8
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	1c99      	adds	r1, r3, #2
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	89fa      	ldrh	r2, [r7, #14]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fad9 	bl	8001428 <UartSendString>
		if((u->rxBuffer[t - 1] == '\r') || (u->rxBuffer[t - 1] == '\n'))
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	7a9b      	ldrb	r3, [r3, #10]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b0d      	cmp	r3, #13
 8000e84:	d007      	beq.n	8000e96 <TermHandleSpecial+0xe6>
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	7a9b      	ldrb	r3, [r3, #10]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b0a      	cmp	r3, #10
 8000e94:	d104      	bne.n	8000ea0 <TermHandleSpecial+0xf0>
			UartSendString(u, "\r\n", 2);
 8000e96:	2202      	movs	r2, #2
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <TermHandleSpecial+0x104>)
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fac4 	bl	8001428 <UartSendString>
		u->lastRxBufferHead = t;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	89fa      	ldrh	r2, [r7, #14]
 8000ea4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	}

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	08009794 	.word	0x08009794
 8000eb4:	08009798 	.word	0x08009798

08000eb8 <TermParse>:
		"mod [16qam|4qam|qpsk|bpsk] - set modulator mode\r\n"
		"random - start random sequence transmission\r\n"
		"stop - stop transmission\r\n\r\n";

void TermParse(Uart *src)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	const char *cmd = (char*)src->rxBuffer;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	330a      	adds	r3, #10
 8000ec4:	61bb      	str	r3, [r7, #24]
	uint16_t len = src->rxBufferHead;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000ecc:	83fb      	strh	r3, [r7, #30]
	for(uint16_t i = 0; i < len; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	83bb      	strh	r3, [r7, #28]
 8000ed2:	e011      	b.n	8000ef8 <TermParse+0x40>
	{
		if((cmd[i] == '\r') || (cmd[i] == '\n'))
 8000ed4:	8bbb      	ldrh	r3, [r7, #28]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b0d      	cmp	r3, #13
 8000ede:	d005      	beq.n	8000eec <TermParse+0x34>
 8000ee0:	8bbb      	ldrh	r3, [r7, #28]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b0a      	cmp	r3, #10
 8000eea:	d102      	bne.n	8000ef2 <TermParse+0x3a>
		{
			len = i;
 8000eec:	8bbb      	ldrh	r3, [r7, #28]
 8000eee:	83fb      	strh	r3, [r7, #30]
			break;
 8000ef0:	e006      	b.n	8000f00 <TermParse+0x48>
	for(uint16_t i = 0; i < len; i++)
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	83bb      	strh	r3, [r7, #28]
 8000ef8:	8bba      	ldrh	r2, [r7, #28]
 8000efa:	8bfb      	ldrh	r3, [r7, #30]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3e9      	bcc.n	8000ed4 <TermParse+0x1c>
	}

	/*
	 * Settings insertion handling
	 */
	if(!strncmp(cmd, "mod", 3))
 8000f00:	2203      	movs	r2, #3
 8000f02:	4960      	ldr	r1, [pc, #384]	; (8001084 <TermParse+0x1cc>)
 8000f04:	69b8      	ldr	r0, [r7, #24]
 8000f06:	f007 fd84 	bl	8008a12 <strncmp>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d13d      	bne.n	8000f8c <TermParse+0xd4>
	{
		if(!strncmp(&cmd[4], "16qam", 5))
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	3304      	adds	r3, #4
 8000f14:	2205      	movs	r2, #5
 8000f16:	495c      	ldr	r1, [pc, #368]	; (8001088 <TermParse+0x1d0>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 fd7a 	bl	8008a12 <strncmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <TermParse+0x74>
			ModulatorSetMode(QAM16);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fd2f 	bl	8000988 <ModulatorSetMode>
 8000f2a:	e0a2      	b.n	8001072 <TermParse+0x1ba>
		else if(!strncmp(&cmd[4], "4qam", 4))
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	2204      	movs	r2, #4
 8000f32:	4956      	ldr	r1, [pc, #344]	; (800108c <TermParse+0x1d4>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fd6c 	bl	8008a12 <strncmp>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d103      	bne.n	8000f48 <TermParse+0x90>
			ModulatorSetMode(QAM4);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fd21 	bl	8000988 <ModulatorSetMode>
 8000f46:	e094      	b.n	8001072 <TermParse+0x1ba>
		else if(!strncmp(&cmd[4], "qpsk", 4))
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4950      	ldr	r1, [pc, #320]	; (8001090 <TermParse+0x1d8>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f007 fd5e 	bl	8008a12 <strncmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d103      	bne.n	8000f64 <TermParse+0xac>
			ModulatorSetMode(QPSK);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff fd13 	bl	8000988 <ModulatorSetMode>
 8000f62:	e086      	b.n	8001072 <TermParse+0x1ba>
		else if(!strncmp(&cmd[4], "bpsk", 4))
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	3304      	adds	r3, #4
 8000f68:	2204      	movs	r2, #4
 8000f6a:	494a      	ldr	r1, [pc, #296]	; (8001094 <TermParse+0x1dc>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 fd50 	bl	8008a12 <strncmp>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <TermParse+0xc8>
			ModulatorSetMode(BPSK);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff fd05 	bl	8000988 <ModulatorSetMode>
 8000f7e:	e078      	b.n	8001072 <TermParse+0x1ba>
		else
		{
			UartSendString(src, "Bad modulator mode!\r\n", 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	4945      	ldr	r1, [pc, #276]	; (8001098 <TermParse+0x1e0>)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fa4f 	bl	8001428 <UartSendString>
			return;
 8000f8a:	e077      	b.n	800107c <TermParse+0x1c4>
		}
	}
	else if(!strncmp(cmd, "baud", 4))
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4943      	ldr	r1, [pc, #268]	; (800109c <TermParse+0x1e4>)
 8000f90:	69b8      	ldr	r0, [r7, #24]
 8000f92:	f007 fd3e 	bl	8008a12 <strncmp>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d128      	bne.n	8000fee <TermParse+0x136>
	{
		int64_t t = StrToInt(&cmd[5], len - 5);
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	1d5a      	adds	r2, r3, #5
 8000fa0:	8bfb      	ldrh	r3, [r7, #30]
 8000fa2:	3b05      	subs	r3, #5
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4610      	mov	r0, r2
 8000faa:	f7ff fa36 	bl	800041a <StrToInt>
 8000fae:	e9c7 0102 	strd	r0, r1, [r7, #8]
		if(0 == t)
 8000fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	d105      	bne.n	8000fc6 <TermParse+0x10e>
		{
			UartSendString(src, "Bad baud rate!\r\n", 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4938      	ldr	r1, [pc, #224]	; (80010a0 <TermParse+0x1e8>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fa32 	bl	8001428 <UartSendString>
			return;
 8000fc4:	e05a      	b.n	800107c <TermParse+0x1c4>
		}
		else
		{
			UartSendString(src, "Real baud rate: ", 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4936      	ldr	r1, [pc, #216]	; (80010a4 <TermParse+0x1ec>)
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fa2c 	bl	8001428 <UartSendString>
			UartSendNumber(src, ModulatorSetBaudrate(t));
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd0c 	bl	80009f0 <ModulatorSetBaudrate>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fa65 	bl	80014ac <UartSendNumber>
			UartSendString(src, "\r\n", 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4930      	ldr	r1, [pc, #192]	; (80010a8 <TermParse+0x1f0>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 fa1e 	bl	8001428 <UartSendString>
 8000fec:	e041      	b.n	8001072 <TermParse+0x1ba>
		}
	}
	else if(!strncmp(cmd, "out", 3))
 8000fee:	2203      	movs	r2, #3
 8000ff0:	492e      	ldr	r1, [pc, #184]	; (80010ac <TermParse+0x1f4>)
 8000ff2:	69b8      	ldr	r0, [r7, #24]
 8000ff4:	f007 fd0d 	bl	8008a12 <strncmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10f      	bne.n	800101e <TermParse+0x166>
	{
		int64_t t = StrToInt(&cmd[4], len - 4);
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1d1a      	adds	r2, r3, #4
 8001002:	8bfb      	ldrh	r3, [r7, #30]
 8001004:	3b04      	subs	r3, #4
 8001006:	b29b      	uxth	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f7ff fa05 	bl	800041a <StrToInt>
 8001010:	e9c7 0104 	strd	r0, r1, [r7, #16]
		ModulatorPut(t);
 8001014:	7c3b      	ldrb	r3, [r7, #16]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fc48 	bl	80008ac <ModulatorPut>
 800101c:	e029      	b.n	8001072 <TermParse+0x1ba>
	}
	else if(!strncmp(cmd, "stop", 4))
 800101e:	2204      	movs	r2, #4
 8001020:	4923      	ldr	r1, [pc, #140]	; (80010b0 <TermParse+0x1f8>)
 8001022:	69b8      	ldr	r0, [r7, #24]
 8001024:	f007 fcf5 	bl	8008a12 <strncmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <TermParse+0x17c>
	{
		ModulatorStop();
 800102e:	f7ff fd25 	bl	8000a7c <ModulatorStop>
 8001032:	e01e      	b.n	8001072 <TermParse+0x1ba>
	}
	else if(!strncmp(cmd, "random", 6))
 8001034:	2206      	movs	r2, #6
 8001036:	491f      	ldr	r1, [pc, #124]	; (80010b4 <TermParse+0x1fc>)
 8001038:	69b8      	ldr	r0, [r7, #24]
 800103a:	f007 fcea 	bl	8008a12 <strncmp>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <TermParse+0x192>
	{
		ModulatorStartRandom();
 8001044:	f7ff fd3a 	bl	8000abc <ModulatorStartRandom>
 8001048:	e013      	b.n	8001072 <TermParse+0x1ba>
	}
	else if(!strncmp(cmd, "help", 4))
 800104a:	2204      	movs	r2, #4
 800104c:	491a      	ldr	r1, [pc, #104]	; (80010b8 <TermParse+0x200>)
 800104e:	69b8      	ldr	r0, [r7, #24]
 8001050:	f007 fcdf 	bl	8008a12 <strncmp>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <TermParse+0x1ae>
	{
		UartSendString(src, (char*)helpPage, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	4917      	ldr	r1, [pc, #92]	; (80010bc <TermParse+0x204>)
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f9e2 	bl	8001428 <UartSendString>
 8001064:	e005      	b.n	8001072 <TermParse+0x1ba>
	}
	else
	{
		UartSendString(src, "Unknown command. Use \"help\" to show available commands.\r\n", 0);
 8001066:	2200      	movs	r2, #0
 8001068:	4915      	ldr	r1, [pc, #84]	; (80010c0 <TermParse+0x208>)
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f9dc 	bl	8001428 <UartSendString>
		return;
 8001070:	e004      	b.n	800107c <TermParse+0x1c4>
	}


	UartSendString(src, "OK\r\n", 0);
 8001072:	2200      	movs	r2, #0
 8001074:	4913      	ldr	r1, [pc, #76]	; (80010c4 <TermParse+0x20c>)
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f9d6 	bl	8001428 <UartSendString>
}
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0800979c 	.word	0x0800979c
 8001088:	080097a0 	.word	0x080097a0
 800108c:	080097a8 	.word	0x080097a8
 8001090:	080097b0 	.word	0x080097b0
 8001094:	080097b8 	.word	0x080097b8
 8001098:	080097c0 	.word	0x080097c0
 800109c:	080097d8 	.word	0x080097d8
 80010a0:	080097e0 	.word	0x080097e0
 80010a4:	080097f4 	.word	0x080097f4
 80010a8:	08009798 	.word	0x08009798
 80010ac:	08009808 	.word	0x08009808
 80010b0:	0800980c 	.word	0x0800980c
 80010b4:	08009814 	.word	0x08009814
 80010b8:	0800981c 	.word	0x0800981c
 80010bc:	080098bc 	.word	0x080098bc
 80010c0:	08009824 	.word	0x08009824
 80010c4:	08009860 	.word	0x08009860

080010c8 <__NVIC_EnableIRQ>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4906      	ldr	r1, [pc, #24]	; (80010fc <__NVIC_EnableIRQ+0x34>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_DisableIRQ>:
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db12      	blt.n	8001138 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	490a      	ldr	r1, [pc, #40]	; (8001144 <__NVIC_DisableIRQ+0x44>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	3320      	adds	r3, #32
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800112c:	f3bf 8f4f 	dsb	sy
}
 8001130:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001132:	f3bf 8f6f 	isb	sy
}
 8001136:	bf00      	nop
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <handleInterrupt>:
#include "terminal.h"

Uart Uart1 = {}, Uart2 = {}, UartUsb = {};

static void handleInterrupt(Uart *port)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if(UART_LL_CHECK_RX_NOT_EMPTY(port->port)) //byte received
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d02d      	beq.n	800120e <handleInterrupt+0x72>
	{
		UART_LL_CLEAR_RX_NOT_EMPTY(port->port);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0220 	bic.w	r2, r2, #32
 80011c0:	601a      	str	r2, [r3, #0]
		uint8_t data = port->port->DR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	73fb      	strb	r3, [r7, #15]
		port->rxBuffer[port->rxBufferHead++] = data; //store it
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	b291      	uxth	r1, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	f8a2 108c 	strh.w	r1, [r2, #140]	; 0x8c
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	729a      	strb	r2, [r3, #10]
		port->rxBufferHead %= UART_BUFFER_SIZE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b44      	ldr	r3, [pc, #272]	; (8001300 <handleInterrupt+0x164>)
 80011f0:	fba3 1302 	umull	r1, r3, r3, r2
 80011f4:	09d9      	lsrs	r1, r3, #7
 80011f6:	460b      	mov	r3, r1
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	440b      	add	r3, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

		TermHandleSpecial(port);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fdd1 	bl	8000db0 <TermHandleSpecial>
	}
	if(UART_LL_CHECK_RX_IDLE(port->port)) //line is idle, end of data reception
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <handleInterrupt+0xc4>
	{
		UART_LL_GET_DATA(port->port); //reset idle flag by dummy read
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
		if(port->rxBufferHead != 0)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001228:	b29b      	uxth	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d018      	beq.n	8001260 <handleInterrupt+0xc4>
		{
			if(((port->rxBuffer[port->rxBufferHead - 1] == '\r') || (port->rxBuffer[port->rxBufferHead - 1] == '\n'))) //data ends with \r or \n, process as data
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001234:	b29b      	uxth	r3, r3
 8001236:	3b01      	subs	r3, #1
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	7a9b      	ldrb	r3, [r3, #10]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b0d      	cmp	r3, #13
 8001242:	d00a      	beq.n	800125a <handleInterrupt+0xbe>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	7a9b      	ldrb	r3, [r3, #10]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b0a      	cmp	r3, #10
 8001258:	d102      	bne.n	8001260 <handleInterrupt+0xc4>
			{
				port->rxType = DATA_TERM;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	721a      	strb	r2, [r3, #8]
			}
		}
	}
	if(UART_LL_CHECK_TX_EMPTY(port->port)) //TX buffer empty
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126a:	2b00      	cmp	r3, #0
 800126c:	d043      	beq.n	80012f6 <handleInterrupt+0x15a>
	{
		if((port->txBufferHead != port->txBufferTail) || port->txBufferFull) //if there is anything to transmit
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800127c:	b29b      	uxth	r3, r3
 800127e:	429a      	cmp	r2, r3
 8001280:	d107      	bne.n	8001292 <handleInterrupt+0xf6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001288:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d029      	beq.n	80012e6 <handleInterrupt+0x14a>
		{
			UART_LL_PUT_DATA(port->port, port->txBuffer[port->txBufferTail++]);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8001298:	b29b      	uxth	r3, r3
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	b291      	uxth	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	f8a2 1112 	strh.w	r1, [r2, #274]	; 0x112
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
			port->txBufferTail %= UART_BUFFER_SIZE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <handleInterrupt+0x164>)
 80012be:	fba3 1302 	umull	r1, r3, r3, r2
 80012c2:	09d9      	lsrs	r1, r3, #7
 80012c4:	460b      	mov	r3, r1
 80012c6:	019b      	lsls	r3, r3, #6
 80012c8:	440b      	add	r3, r1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			port->txBufferFull = 0;
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 80012dc:	f36f 0300 	bfc	r3, #0, #1
 80012e0:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
		else //nothing more to be transmitted
		{
			UART_LL_DISABLE_TX_EMPTY_INTERRUPT(port->port);
		}
	}
}
 80012e4:	e007      	b.n	80012f6 <handleInterrupt+0x15a>
			UART_LL_DISABLE_TX_EMPTY_INTERRUPT(port->port);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f4:	60da      	str	r2, [r3, #12]
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	fc0fc0fd 	.word	0xfc0fc0fd

08001304 <USART1_IRQHandler>:

void UART_LL_UART1_INTERUPT_HANDLER(void) __attribute__ ((interrupt));
void UART_LL_UART1_INTERUPT_HANDLER(void)
{
 8001304:	4668      	mov	r0, sp
 8001306:	f020 0107 	bic.w	r1, r0, #7
 800130a:	468d      	mov	sp, r1
 800130c:	b589      	push	{r0, r3, r7, lr}
 800130e:	af00      	add	r7, sp, #0
	handleInterrupt(&Uart1);
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <USART1_IRQHandler+0x20>)
 8001312:	f7ff ff43 	bl	800119c <handleInterrupt>
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 800131e:	4685      	mov	sp, r0
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000290 	.word	0x20000290

08001328 <USART2_IRQHandler>:

void UART_LL_UART2_INTERUPT_HANDLER(void) __attribute__ ((interrupt));
void UART_LL_UART2_INTERUPT_HANDLER(void)
{
 8001328:	4668      	mov	r0, sp
 800132a:	f020 0107 	bic.w	r1, r0, #7
 800132e:	468d      	mov	sp, r1
 8001330:	b589      	push	{r0, r3, r7, lr}
 8001332:	af00      	add	r7, sp, #0
	handleInterrupt(&Uart2);
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <USART2_IRQHandler+0x20>)
 8001336:	f7ff ff31 	bl	800119c <handleInterrupt>
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8001342:	4685      	mov	sp, r0
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200003a8 	.word	0x200003a8

0800134c <UartSendByte>:


void UartSendByte(Uart *port, uint8_t data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if(!port->enabled)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7a5b      	ldrb	r3, [r3, #9]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d059      	beq.n	800141a <UartSendByte+0xce>
		return;

	if(port->isUsb)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7a5b      	ldrb	r3, [r3, #9]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <UartSendByte+0x34>
	{
		CDC_Transmit_FS(&data, 1);
 8001374:	1cfb      	adds	r3, r7, #3
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f006 fddf 	bl	8007f3c <CDC_Transmit_FS>
 800137e:	e04d      	b.n	800141c <UartSendByte+0xd0>
	}
	else
	{
		while(port->txBufferFull)
 8001380:	bf00      	nop
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001388:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f7      	bne.n	8001382 <UartSendByte+0x36>
			;
		port->txBuffer[port->txBufferHead++] = data;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8001398:	b29b      	uxth	r3, r3
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	b291      	uxth	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	f8a2 1110 	strh.w	r1, [r2, #272]	; 0x110
 80013a4:	4619      	mov	r1, r3
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		port->txBufferHead %= UART_BUFFER_SIZE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <UartSendByte+0xd8>)
 80013ba:	fba3 1302 	umull	r1, r3, r3, r2
 80013be:	09d9      	lsrs	r1, r3, #7
 80013c0:	460b      	mov	r3, r1
 80013c2:	019b      	lsls	r3, r3, #6
 80013c4:	440b      	add	r3, r1
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
  __ASM volatile ("cpsid i" : : : "memory");
 80013d2:	b672      	cpsid	i
}
 80013d4:	bf00      	nop
		__disable_irq();
		if(port->txBufferHead == port->txBufferTail)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d106      	bne.n	80013f8 <UartSendByte+0xac>
			port->txBufferFull = 1;
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
		if(0 == (UART_LL_CHECK_ENABLED_TX_EMPTY_INTERRUPT(port->port)))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <UartSendByte+0xca>
			UART_LL_ENABLE_TX_EMPTY_INTERRUPT(port->port);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001414:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001416:	b662      	cpsie	i
}
 8001418:	e000      	b.n	800141c <UartSendByte+0xd0>
		return;
 800141a:	bf00      	nop
		__enable_irq();
	}
}
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	fc0fc0fd 	.word	0xfc0fc0fd

08001428 <UartSendString>:


void UartSendString(Uart *port, void *data, uint16_t len)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
	if(0 == len)
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <UartSendString+0x1e>
		len = strlen((char*)data);
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f7fe fe85 	bl	800014c <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]

	for(uint16_t i = 0; i < len; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	82fb      	strh	r3, [r7, #22]
 800144a:	e00a      	b.n	8001462 <UartSendString+0x3a>
	{
		UartSendByte(port, ((uint8_t*)data)[i]);
 800144c:	8afb      	ldrh	r3, [r7, #22]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff ff78 	bl	800134c <UartSendByte>
	for(uint16_t i = 0; i < len; i++)
 800145c:	8afb      	ldrh	r3, [r7, #22]
 800145e:	3301      	adds	r3, #1
 8001460:	82fb      	strh	r3, [r7, #22]
 8001462:	8afa      	ldrh	r2, [r7, #22]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	429a      	cmp	r2, r3
 8001468:	d3f0      	bcc.n	800144c <UartSendString+0x24>
	}
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <findHighestPosition>:


static unsigned int findHighestPosition(unsigned int n)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    unsigned int i = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
    while((i * 10) <= n)
 8001480:	e005      	b.n	800148e <findHighestPosition+0x1a>
        i *= 10;
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
    while((i * 10) <= n)
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4293      	cmp	r3, r2
 800149e:	d2f0      	bcs.n	8001482 <findHighestPosition+0xe>

    return i;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <UartSendNumber>:

void UartSendNumber(Uart *port, int32_t n)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	if(n < 0)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da03      	bge.n	80014c4 <UartSendNumber+0x18>
		UartSendByte(port, '-');
 80014bc:	212d      	movs	r1, #45	; 0x2d
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff44 	bl	800134c <UartSendByte>
	n = abs(n);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bfb8      	it	lt
 80014ca:	425b      	neglt	r3, r3
 80014cc:	603b      	str	r3, [r7, #0]
    unsigned int position = findHighestPosition(n);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ffcf 	bl	8001474 <findHighestPosition>
 80014d6:	60f8      	str	r0, [r7, #12]
    while(position)
 80014d8:	e019      	b.n	800150e <UartSendNumber+0x62>
    {
        unsigned int number = n / position;
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	60bb      	str	r3, [r7, #8]
        UartSendByte(port, (number + 48));
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3330      	adds	r3, #48	; 0x30
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff2c 	bl	800134c <UartSendByte>
        n -= (number * position);
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	603b      	str	r3, [r7, #0]
        position /= 10;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <UartSendNumber+0x74>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	60fb      	str	r3, [r7, #12]
    while(position)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e2      	bne.n	80014da <UartSendNumber+0x2e>
    }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	cccccccd 	.word	0xcccccccd

08001524 <UartInit>:

void UartInit(Uart *port, USART_TypeDef *uart, uint32_t baud)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	port->port = uart;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	601a      	str	r2, [r3, #0]
	port->baudrate = baud;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	605a      	str	r2, [r3, #4]
	port->rxType = DATA_NOTHING;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	721a      	strb	r2, [r3, #8]
	port->rxBufferHead = 0;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	port->txBufferHead = 0;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	port->txBufferTail = 0;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
	port->txBufferFull = 0;
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 8001560:	f36f 0300 	bfc	r3, #0, #1
 8001564:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
	port->enabled = 0;
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	7a53      	ldrb	r3, [r2, #9]
 800156c:	f36f 0300 	bfc	r3, #0, #1
 8001570:	7253      	strb	r3, [r2, #9]
	port->lastRxBufferHead = 0;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	memset((void*)port->rxBuffer, 0, sizeof(port->rxBuffer));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	330a      	adds	r3, #10
 800157e:	2282      	movs	r2, #130	; 0x82
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f007 fa3d 	bl	8008a02 <memset>
	memset((void*)port->txBuffer, 0, sizeof(port->txBuffer));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	338e      	adds	r3, #142	; 0x8e
 800158c:	2282      	movs	r2, #130	; 0x82
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f007 fa36 	bl	8008a02 <memset>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <UartConfig>:


void UartConfig(Uart *port, uint8_t state)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
	if(port->port == UART_LL_UART1_STRUCTURE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a77      	ldr	r2, [pc, #476]	; (8001790 <UartConfig+0x1f0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d168      	bne.n	8001688 <UartConfig+0xe8>
	{
		UART_LL_UART1_INITIALIZE_PERIPHERAL(port->baudrate);
 80015b6:	4b77      	ldr	r3, [pc, #476]	; (8001794 <UartConfig+0x1f4>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4a76      	ldr	r2, [pc, #472]	; (8001794 <UartConfig+0x1f4>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6193      	str	r3, [r2, #24]
 80015c2:	4b74      	ldr	r3, [pc, #464]	; (8001794 <UartConfig+0x1f4>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	4a73      	ldr	r2, [pc, #460]	; (8001794 <UartConfig+0x1f4>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015cc:	6193      	str	r3, [r2, #24]
 80015ce:	4b72      	ldr	r3, [pc, #456]	; (8001798 <UartConfig+0x1f8>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a71      	ldr	r2, [pc, #452]	; (8001798 <UartConfig+0x1f8>)
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	6053      	str	r3, [r2, #4]
 80015da:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <UartConfig+0x1f8>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <UartConfig+0x1f8>)
 80015e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015e4:	6053      	str	r3, [r2, #4]
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <UartConfig+0x1f8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <UartConfig+0x1f8>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6053      	str	r3, [r2, #4]
 80015f2:	4b69      	ldr	r3, [pc, #420]	; (8001798 <UartConfig+0x1f8>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a68      	ldr	r2, [pc, #416]	; (8001798 <UartConfig+0x1f8>)
 80015f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fc:	6053      	str	r3, [r2, #4]
 80015fe:	4b66      	ldr	r3, [pc, #408]	; (8001798 <UartConfig+0x1f8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a65      	ldr	r2, [pc, #404]	; (8001798 <UartConfig+0x1f8>)
 8001604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001608:	6053      	str	r3, [r2, #4]
 800160a:	4b64      	ldr	r3, [pc, #400]	; (800179c <UartConfig+0x1fc>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	495f      	ldr	r1, [pc, #380]	; (8001790 <UartConfig+0x1f0>)
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	608b      	str	r3, [r1, #8]

		if(state)
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00a      	beq.n	8001636 <UartConfig+0x96>
		{
			UART_LL_ENABLE(port->port);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800162e:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8001632:	60d3      	str	r3, [r2, #12]
 8001634:	e009      	b.n	800164a <UartConfig+0xaa>
		}
		else
		{
			UART_LL_DISABLE(port->port);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001644:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8001648:	60d3      	str	r3, [r2, #12]
		}

		NVIC_SetPriority(UART_LL_UART1_IRQ, 2);
 800164a:	2102      	movs	r1, #2
 800164c:	2025      	movs	r0, #37	; 0x25
 800164e:	f7ff fd7b 	bl	8001148 <__NVIC_SetPriority>
		if(state)
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <UartConfig+0xc0>
			NVIC_EnableIRQ(UART_LL_UART1_IRQ);
 8001658:	2025      	movs	r0, #37	; 0x25
 800165a:	f7ff fd35 	bl	80010c8 <__NVIC_EnableIRQ>
 800165e:	e002      	b.n	8001666 <UartConfig+0xc6>
		else
			NVIC_DisableIRQ(UART_LL_UART1_IRQ);
 8001660:	2025      	movs	r0, #37	; 0x25
 8001662:	f7ff fd4d 	bl	8001100 <__NVIC_DisableIRQ>

		port->enabled = state > 0;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2d9      	uxtb	r1, r3
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	7a53      	ldrb	r3, [r2, #9]
 8001676:	f361 0300 	bfi	r3, r1, #0, #1
 800167a:	7253      	strb	r3, [r2, #9]
		port->isUsb = 0;
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	7a53      	ldrb	r3, [r2, #9]
 8001680:	f36f 0341 	bfc	r3, #1, #1
 8001684:	7253      	strb	r3, [r2, #9]
	{
		port->isUsb = 1;
		port->enabled = state > 0;
	}

}
 8001686:	e07e      	b.n	8001786 <UartConfig+0x1e6>
	else if(port->port == UART_LL_UART2_STRUCTURE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <UartConfig+0x200>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d169      	bne.n	8001766 <UartConfig+0x1c6>
		UART_LL_UART2_INITIALIZE_PERIPHERAL(port->baudrate);
 8001692:	4b40      	ldr	r3, [pc, #256]	; (8001794 <UartConfig+0x1f4>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <UartConfig+0x1f4>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6193      	str	r3, [r2, #24]
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <UartConfig+0x1f4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a3c      	ldr	r2, [pc, #240]	; (8001794 <UartConfig+0x1f4>)
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <UartConfig+0x1f8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a3a      	ldr	r2, [pc, #232]	; (8001798 <UartConfig+0x1f8>)
 80016b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <UartConfig+0x1f8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a37      	ldr	r2, [pc, #220]	; (8001798 <UartConfig+0x1f8>)
 80016bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <UartConfig+0x1f8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a34      	ldr	r2, [pc, #208]	; (8001798 <UartConfig+0x1f8>)
 80016c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <UartConfig+0x1f8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a31      	ldr	r2, [pc, #196]	; (8001798 <UartConfig+0x1f8>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <UartConfig+0x1f8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <UartConfig+0x1f8>)
 80016e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <UartConfig+0x1fc>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	492b      	ldr	r1, [pc, #172]	; (80017a0 <UartConfig+0x200>)
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	608b      	str	r3, [r1, #8]
		if(state)
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00a      	beq.n	8001714 <UartConfig+0x174>
			UART_LL_ENABLE(port->port);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800170c:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8001710:	60d3      	str	r3, [r2, #12]
 8001712:	e009      	b.n	8001728 <UartConfig+0x188>
			UART_LL_DISABLE(port->port);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001722:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8001726:	60d3      	str	r3, [r2, #12]
		NVIC_SetPriority(UART_LL_UART2_IRQ, 2);
 8001728:	2102      	movs	r1, #2
 800172a:	2026      	movs	r0, #38	; 0x26
 800172c:	f7ff fd0c 	bl	8001148 <__NVIC_SetPriority>
		if(state)
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <UartConfig+0x19e>
			NVIC_EnableIRQ(UART_LL_UART2_IRQ);
 8001736:	2026      	movs	r0, #38	; 0x26
 8001738:	f7ff fcc6 	bl	80010c8 <__NVIC_EnableIRQ>
 800173c:	e002      	b.n	8001744 <UartConfig+0x1a4>
			NVIC_DisableIRQ(UART_LL_UART2_IRQ);
 800173e:	2026      	movs	r0, #38	; 0x26
 8001740:	f7ff fcde 	bl	8001100 <__NVIC_DisableIRQ>
		port->enabled = state > 0;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2d9      	uxtb	r1, r3
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	7a53      	ldrb	r3, [r2, #9]
 8001754:	f361 0300 	bfi	r3, r1, #0, #1
 8001758:	7253      	strb	r3, [r2, #9]
		port->isUsb = 0;
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	7a53      	ldrb	r3, [r2, #9]
 800175e:	f36f 0341 	bfc	r3, #1, #1
 8001762:	7253      	strb	r3, [r2, #9]
}
 8001764:	e00f      	b.n	8001786 <UartConfig+0x1e6>
		port->isUsb = 1;
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	7a53      	ldrb	r3, [r2, #9]
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	7253      	strb	r3, [r2, #9]
		port->enabled = state > 0;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2d9      	uxtb	r1, r3
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	7a53      	ldrb	r3, [r2, #9]
 8001780:	f361 0300 	bfi	r3, r1, #0, #1
 8001784:	7253      	strb	r3, [r2, #9]
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40013800 	.word	0x40013800
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	40004400 	.word	0x40004400

080017a4 <UartClearRx>:


void UartClearRx(Uart *port)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	port->rxBufferHead = 0;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	port->rxType = DATA_NOTHING;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	721a      	strb	r2, [r3, #8]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff faee 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ca:	490c      	ldr	r1, [pc, #48]	; (80017fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017e0:	4c09      	ldr	r4, [pc, #36]	; (8001808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f007 f96f 	bl	8008ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7fe fe8d 	bl	8000510 <main>
  bx lr
 80017f6:	4770      	bx	lr
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001800:	08009a80 	.word	0x08009a80
  ldr r2, =_sbss
 8001804:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001808:	20001140 	.word	0x20001140

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x28>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x28>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f947 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff f972 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f95f 	bl	8001b1e <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f927 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000000c 	.word	0x2000000c
 8001894:	20000014 	.word	0x20000014
 8001898:	20000010 	.word	0x20000010

0800189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x1c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_IncTick+0x20>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000014 	.word	0x20000014
 80018bc:	200005d8 	.word	0x200005d8

080018c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_GetTick+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	200005d8 	.word	0x200005d8

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff fff0 	bl	80018c0 <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffe0 	bl	80018c0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000014 	.word	0x20000014

0800191c <__NVIC_SetPriorityGrouping>:
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4906      	ldr	r1, [pc, #24]	; (80019b4 <__NVIC_EnableIRQ+0x34>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	; (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	; (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	; 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff90 	bl	80019b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff2d 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff42 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff90 	bl	8001a0c <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5f 	bl	80019b8 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff35 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa2 	bl	8001a70 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b38:	b08b      	sub	sp, #44	; 0x2c
 8001b3a:	af06      	add	r7, sp, #24
 8001b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0f1      	b.n	8001d2c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d106      	bne.n	8001b62 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f006 fb5b 	bl	8008218 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2203      	movs	r2, #3
 8001b66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 fa0a 	bl	8003f88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	687e      	ldr	r6, [r7, #4]
 8001b7c:	466d      	mov	r5, sp
 8001b7e:	f106 0410 	add.w	r4, r6, #16
 8001b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	602b      	str	r3, [r5, #0]
 8001b8a:	1d33      	adds	r3, r6, #4
 8001b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8e:	6838      	ldr	r0, [r7, #0]
 8001b90:	f002 f9d4 	bl	8003f3c <USB_CoreInit>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0c2      	b.n	8001d2c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fa05 	bl	8003fbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
 8001bb6:	e040      	b.n	8001c3a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3301      	adds	r3, #1
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3303      	adds	r3, #3
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	3338      	adds	r3, #56	; 0x38
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	333c      	adds	r3, #60	; 0x3c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3340      	adds	r3, #64	; 0x40
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	3301      	adds	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3b9      	bcc.n	8001bb8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e044      	b.n	8001cd4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d3b5      	bcc.n	8001c4a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	687e      	ldr	r6, [r7, #4]
 8001ce6:	466d      	mov	r5, sp
 8001ce8:	f106 0410 	add.w	r4, r6, #16
 8001cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	602b      	str	r3, [r5, #0]
 8001cf4:	1d33      	adds	r3, r6, #4
 8001cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f002 f96b 	bl	8003fd4 <USB_DevInit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e00d      	b.n	8001d2c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fbec 	bl	8006502 <USB_DevDisconnect>

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_PCD_Start+0x16>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e016      	b.n	8001d78 <HAL_PCD_Start+0x44>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 f900 	bl	8003f5c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f006 fcd5 	bl	800870e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fbc0 	bl	80064ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 fbc2 	bl	8006516 <USB_ReadInterrupts>
 8001d92:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fb1b 	bl	80023da <PCD_EP_ISR_Handler>

    return;
 8001da4:	e119      	b.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f006 faa8 	bl	800831e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f905 	bl	8001fe0 <HAL_PCD_SetAddress>

    return;
 8001dd6:	e100      	b.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001df4:	b292      	uxth	r2, r2
 8001df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001dfa:	e0ee      	b.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e1e:	e0dc      	b.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d027      	beq.n	8001e7a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0204 	bic.w	r2, r2, #4
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	b292      	uxth	r2, r2
 8001e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f006 fa98 	bl	8008390 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e72:	b292      	uxth	r2, r2
 8001e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e78:	e0af      	b.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8083 	beq.w	8001f8c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	77fb      	strb	r3, [r7, #31]
 8001e8a:	e010      	b.n	8001eae <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	441a      	add	r2, r3
 8001e98:	7ffb      	ldrb	r3, [r7, #31]
 8001e9a:	8812      	ldrh	r2, [r2, #0]
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	3320      	adds	r3, #32
 8001ea2:	443b      	add	r3, r7
 8001ea4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001ea8:	7ffb      	ldrb	r3, [r7, #31]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	77fb      	strb	r3, [r7, #31]
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b07      	cmp	r3, #7
 8001eb2:	d9eb      	bls.n	8001e8c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ee4:	bf00      	nop
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f6      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0a:	b292      	uxth	r2, r2
 8001f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]
 8001f14:	e00f      	b.n	8001f36 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f16:	7ffb      	ldrb	r3, [r7, #31]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	7ffa      	ldrb	r2, [r7, #31]
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	440a      	add	r2, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	3320      	adds	r3, #32
 8001f28:	443b      	add	r3, r7
 8001f2a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f2e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	3301      	adds	r3, #1
 8001f34:	77fb      	strb	r3, [r7, #31]
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	d9ec      	bls.n	8001f16 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f66:	b292      	uxth	r2, r2
 8001f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0204 	orr.w	r2, r2, #4
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f006 f9e9 	bl	800835c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f8a:	e026      	b.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00f      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fa8:	b292      	uxth	r2, r2
 8001faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 f9a7 	bl	8008302 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fb4:	e011      	b.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fd8:	bf00      	nop
  }
}
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_SetAddress+0x1a>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e013      	b.n	8002022 <HAL_PCD_SetAddress+0x42>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fa58 	bl	80064c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	4608      	mov	r0, r1
 8002034:	4611      	mov	r1, r2
 8002036:	461a      	mov	r2, r3
 8002038:	4603      	mov	r3, r0
 800203a:	70fb      	strb	r3, [r7, #3]
 800203c:	460b      	mov	r3, r1
 800203e:	803b      	strh	r3, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da0e      	bge.n	800206e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	705a      	strb	r2, [r3, #1]
 800206c:	e00e      	b.n	800208c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 0207 	and.w	r2, r3, #7
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002098:	883a      	ldrh	r2, [r7, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	78ba      	ldrb	r2, [r7, #2]
 80020a2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020a4:	78bb      	ldrb	r3, [r7, #2]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d102      	bne.n	80020b0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_PCD_EP_Open+0x94>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e00e      	b.n	80020dc <HAL_PCD_EP_Open+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 ffa1 	bl	8004014 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020da:	7afb      	ldrb	r3, [r7, #11]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da0e      	bge.n	8002116 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	705a      	strb	r2, [r3, #1]
 8002114:	e00e      	b.n	8002134 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 0207 	and.w	r2, r3, #7
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_PCD_EP_Close+0x6a>
 800214a:	2302      	movs	r3, #2
 800214c:	e00e      	b.n	800216c <HAL_PCD_EP_Close+0x88>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fb19 	bl	8004794 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	460b      	mov	r3, r1
 8002182:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002184:	7afb      	ldrb	r3, [r7, #11]
 8002186:	f003 0207 	and.w	r2, r3, #7
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2200      	movs	r2, #0
 80021b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b4:	7afb      	ldrb	r3, [r7, #11]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6979      	ldr	r1, [r7, #20]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fcd0 	bl	8004b6c <USB_EPStartXfer>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 0207 	and.w	r2, r3, #7
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021f8:	681b      	ldr	r3, [r3, #0]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	460b      	mov	r3, r1
 8002212:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2201      	movs	r2, #1
 800224e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	b2da      	uxtb	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6979      	ldr	r1, [r7, #20]
 8002262:	4618      	mov	r0, r3
 8002264:	f002 fc82 	bl	8004b6c <USB_EPStartXfer>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f003 0207 	and.w	r2, r3, #7
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d901      	bls.n	8002290 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e04c      	b.n	800232a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002294:	2b00      	cmp	r3, #0
 8002296:	da0e      	bge.n	80022b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	705a      	strb	r2, [r3, #1]
 80022b4:	e00c      	b.n	80022d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_PCD_EP_SetStall+0x7e>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e01c      	b.n	800232a <HAL_PCD_EP_SetStall+0xb8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 ffe5 	bl	80062ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f004 f90a 	bl	8006534 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d901      	bls.n	8002350 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e040      	b.n	80023d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002354:	2b00      	cmp	r3, #0
 8002356:	da0e      	bge.n	8002376 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	705a      	strb	r2, [r3, #1]
 8002374:	e00e      	b.n	8002394 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 0207 	and.w	r2, r3, #7
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_PCD_EP_ClrStall+0x82>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e00e      	b.n	80023d2 <HAL_PCD_EP_ClrStall+0xa0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 ffd3 	bl	800636e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b096      	sub	sp, #88	; 0x58
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023e2:	e3bf      	b.n	8002b64 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80023fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 8179 	bne.w	80026fa <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002408:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d152      	bne.n	80024ba <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002424:	81fb      	strh	r3, [r7, #14]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002434:	b29b      	uxth	r3, r3
 8002436:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3328      	adds	r3, #40	; 0x28
 800243c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	3302      	adds	r3, #2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002468:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800246a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	441a      	add	r2, r3
 8002474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002476:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002478:	2100      	movs	r1, #0
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f005 ff27 	bl	80082ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 836b 	beq.w	8002b64 <PCD_EP_ISR_Handler+0x78a>
 800248e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8366 	bne.w	8002b64 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b292      	uxth	r2, r2
 80024ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024b8:	e354      	b.n	8002b64 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d034      	beq.n	8002542 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	3306      	adds	r3, #6
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002516:	b29b      	uxth	r3, r3
 8002518:	f004 f85c 	bl	80065d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29a      	uxth	r2, r3
 8002524:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002528:	4013      	ands	r3, r2
 800252a:	823b      	strh	r3, [r7, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	8a3a      	ldrh	r2, [r7, #16]
 8002532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002536:	b292      	uxth	r2, r2
 8002538:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f005 fe9a 	bl	8008274 <HAL_PCD_SetupStageCallback>
 8002540:	e310      	b.n	8002b64 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002542:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002546:	2b00      	cmp	r3, #0
 8002548:	f280 830c 	bge.w	8002b64 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002558:	4013      	ands	r3, r2
 800255a:	83fb      	strh	r3, [r7, #30]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	8bfa      	ldrh	r2, [r7, #30]
 8002562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	3306      	adds	r3, #6
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002594:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d019      	beq.n	80025d2 <PCD_EP_ISR_Handler+0x1f8>
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d015      	beq.n	80025d2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	6959      	ldr	r1, [r3, #20]
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f004 f80c 	bl	80065d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	441a      	add	r2, r3
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025ca:	2100      	movs	r1, #0
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f005 fe63 	bl	8008298 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80025dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 82bd 	bne.w	8002b64 <PCD_EP_ISR_Handler+0x78a>
 80025ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80025f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025f6:	f000 82b5 	beq.w	8002b64 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002624:	b29a      	uxth	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b3e      	cmp	r3, #62	; 0x3e
 8002630:	d91d      	bls.n	800266e <PCD_EP_ISR_Handler+0x294>
 8002632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <PCD_EP_ISR_Handler+0x272>
 8002646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002648:	3b01      	subs	r3, #1
 800264a:	647b      	str	r3, [r7, #68]	; 0x44
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29a      	uxth	r2, r3
 8002652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002654:	b29b      	uxth	r3, r3
 8002656:	029b      	lsls	r3, r3, #10
 8002658:	b29b      	uxth	r3, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	b29b      	uxth	r3, r3
 800265e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002666:	b29a      	uxth	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	801a      	strh	r2, [r3, #0]
 800266c:	e026      	b.n	80026bc <PCD_EP_ISR_Handler+0x2e2>
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <PCD_EP_ISR_Handler+0x2b2>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002684:	b29a      	uxth	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	e017      	b.n	80026bc <PCD_EP_ISR_Handler+0x2e2>
 800268c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
 8002694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <PCD_EP_ISR_Handler+0x2cc>
 80026a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a2:	3301      	adds	r3, #1
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	827b      	strh	r3, [r7, #18]
 80026ce:	8a7b      	ldrh	r3, [r7, #18]
 80026d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026d4:	827b      	strh	r3, [r7, #18]
 80026d6:	8a7b      	ldrh	r3, [r7, #18]
 80026d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026dc:	827b      	strh	r3, [r7, #18]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	8a7b      	ldrh	r3, [r7, #18]
 80026e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8013      	strh	r3, [r2, #0]
 80026f8:	e234      	b.n	8002b64 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800270e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002712:	2b00      	cmp	r3, #0
 8002714:	f280 80fc 	bge.w	8002910 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800272e:	4013      	ands	r3, r2
 8002730:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002746:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800274a:	b292      	uxth	r2, r2
 800274c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800274e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002766:	7b1b      	ldrb	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d125      	bne.n	80027b8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	3306      	adds	r3, #6
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002794:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002798:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8092 	beq.w	80028c6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	6959      	ldr	r1, [r3, #20]
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	88da      	ldrh	r2, [r3, #6]
 80027ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027b2:	f003 ff0f 	bl	80065d4 <USB_ReadPMA>
 80027b6:	e086      	b.n	80028c6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	78db      	ldrb	r3, [r3, #3]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d10a      	bne.n	80027d6 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027c4:	461a      	mov	r2, r3
 80027c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f9d9 	bl	8002b80 <HAL_PCD_EP_DB_Receive>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80027d4:	e077      	b.n	80028c6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	441a      	add	r2, r3
 8002802:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800280e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002812:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002816:	b29b      	uxth	r3, r3
 8002818:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d024      	beq.n	800287e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	3302      	adds	r3, #2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002860:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02e      	beq.n	80028c6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002872:	891a      	ldrh	r2, [r3, #8]
 8002874:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002878:	f003 feac 	bl	80065d4 <USB_ReadPMA>
 800287c:	e023      	b.n	80028c6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	3306      	adds	r3, #6
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80028aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	6959      	ldr	r1, [r3, #20]
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	895a      	ldrh	r2, [r3, #10]
 80028be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028c2:	f003 fe87 	bl	80065d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ce:	441a      	add	r2, r3
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028dc:	441a      	add	r2, r3
 80028de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <PCD_EP_ISR_Handler+0x51c>
 80028ea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d206      	bcs.n	8002904 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f005 fccb 	bl	8008298 <HAL_PCD_DataOutStageCallback>
 8002902:	e005      	b.n	8002910 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800290a:	4618      	mov	r0, r3
 800290c:	f002 f92e 	bl	8004b6c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002910:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8123 	beq.w	8002b64 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800291e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800296a:	b29b      	uxth	r3, r3
 800296c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 80a2 	bne.w	8002abc <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002980:	7b1b      	ldrb	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8093 	beq.w	8002aae <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002988:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d046      	beq.n	8002a22 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d126      	bne.n	80029ea <PCD_EP_ISR_Handler+0x610>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	4413      	add	r3, r2
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	011a      	lsls	r2, r3, #4
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	4413      	add	r3, r2
 80029be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e061      	b.n	8002aae <PCD_EP_ISR_Handler+0x6d4>
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d15d      	bne.n	8002aae <PCD_EP_ISR_Handler+0x6d4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	4413      	add	r3, r2
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	011a      	lsls	r2, r3, #4
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	4413      	add	r3, r2
 8002a14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	e045      	b.n	8002aae <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2a:	785b      	ldrb	r3, [r3, #1]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d126      	bne.n	8002a7e <PCD_EP_ISR_Handler+0x6a4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	4413      	add	r3, r2
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
 8002a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	011a      	lsls	r2, r3, #4
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	4413      	add	r3, r2
 8002a52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	e017      	b.n	8002aae <PCD_EP_ISR_Handler+0x6d4>
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d113      	bne.n	8002aae <PCD_EP_ISR_Handler+0x6d4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a94:	4413      	add	r3, r2
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	011a      	lsls	r2, r3, #4
 8002a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	2200      	movs	r2, #0
 8002aac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f005 fc0a 	bl	80082ce <HAL_PCD_DataInStageCallback>
 8002aba:	e053      	b.n	8002b64 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002abc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d146      	bne.n	8002b56 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	3302      	adds	r3, #2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d907      	bls.n	8002b10 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b08:	1ad2      	subs	r2, r2, r3
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0c:	619a      	str	r2, [r3, #24]
 8002b0e:	e002      	b.n	8002b16 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f005 fbd2 	bl	80082ce <HAL_PCD_DataInStageCallback>
 8002b2a:	e01b      	b.n	8002b64 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b34:	441a      	add	r2, r3
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b42:	441a      	add	r2, r3
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 f80c 	bl	8004b6c <USB_EPStartXfer>
 8002b54:	e006      	b.n	8002b64 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f91b 	bl	8002d9a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f6ff ac37 	blt.w	80023e4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3758      	adds	r7, #88	; 0x58
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d07e      	beq.n	8002c96 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	3302      	adds	r3, #2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	8b7b      	ldrh	r3, [r7, #26]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d306      	bcc.n	8002bda <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	8b7b      	ldrh	r3, [r7, #26]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	619a      	str	r2, [r3, #24]
 8002bd8:	e002      	b.n	8002be0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d123      	bne.n	8002c30 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	833b      	strh	r3, [r7, #24]
 8002c04:	8b3b      	ldrh	r3, [r7, #24]
 8002c06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c0a:	833b      	strh	r3, [r7, #24]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	8b3b      	ldrh	r3, [r7, #24]
 8002c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01f      	beq.n	8002c7a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	82fb      	strh	r3, [r7, #22]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	8afb      	ldrh	r3, [r7, #22]
 8002c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c7a:	8b7b      	ldrh	r3, [r7, #26]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8087 	beq.w	8002d90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6959      	ldr	r1, [r3, #20]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	891a      	ldrh	r2, [r3, #8]
 8002c8e:	8b7b      	ldrh	r3, [r7, #26]
 8002c90:	f003 fca0 	bl	80065d4 <USB_ReadPMA>
 8002c94:	e07c      	b.n	8002d90 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3306      	adds	r3, #6
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	8b7b      	ldrh	r3, [r7, #26]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d306      	bcc.n	8002cd8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	8b7b      	ldrh	r3, [r7, #26]
 8002cd0:	1ad2      	subs	r2, r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	619a      	str	r2, [r3, #24]
 8002cd6:	e002      	b.n	8002cde <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d123      	bne.n	8002d2e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d00:	83fb      	strh	r3, [r7, #30]
 8002d02:	8bfb      	ldrh	r3, [r7, #30]
 8002d04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d08:	83fb      	strh	r3, [r7, #30]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	8bfb      	ldrh	r3, [r7, #30]
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11f      	bne.n	8002d78 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	83bb      	strh	r3, [r7, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	8bbb      	ldrh	r3, [r7, #28]
 8002d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d78:	8b7b      	ldrh	r3, [r7, #26]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6959      	ldr	r1, [r3, #20]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	895a      	ldrh	r2, [r3, #10]
 8002d8a:	8b7b      	ldrh	r3, [r7, #26]
 8002d8c:	f003 fc22 	bl	80065d4 <USB_ReadPMA>
    }
  }

  return count;
 8002d90:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b0a4      	sub	sp, #144	; 0x90
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	4613      	mov	r3, r2
 8002da6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 81dd 	beq.w	800316e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ddc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d907      	bls.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002df4:	1ad2      	subs	r2, r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	619a      	str	r2, [r3, #24]
 8002dfa:	e002      	b.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 80b9 	bne.w	8002f7e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d126      	bne.n	8002e62 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	4413      	add	r3, r2
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	011a      	lsls	r2, r3, #4
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	4413      	add	r3, r2
 8002e36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	e01a      	b.n	8002e98 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d116      	bne.n	8002e98 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7e:	4413      	add	r3, r2
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	011a      	lsls	r2, r3, #4
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2200      	movs	r2, #0
 8002e96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	785b      	ldrb	r3, [r3, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d126      	bne.n	8002ef4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	011a      	lsls	r2, r3, #4
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	801a      	strh	r2, [r3, #0]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	e017      	b.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d113      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	4413      	add	r3, r2
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	011a      	lsls	r2, r3, #4
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	4413      	add	r3, r2
 8002f18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f1c:	623b      	str	r3, [r7, #32]
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2200      	movs	r2, #0
 8002f22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f005 f9cf 	bl	80082ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 82fc 	beq.w	8003534 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	82fb      	strh	r3, [r7, #22]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	441a      	add	r2, r3
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8013      	strh	r3, [r2, #0]
 8002f7c:	e2da      	b.n	8003534 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d021      	beq.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 82ae 	bne.w	8003534 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fe0:	441a      	add	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fee:	441a      	add	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d30b      	bcc.n	8003018 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	6a1a      	ldr	r2, [r3, #32]
 800300c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	621a      	str	r2, [r3, #32]
 8003016:	e017      	b.n	8003048 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d108      	bne.n	8003032 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003020:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003030:	e00a      	b.n	8003048 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d165      	bne.n	800311c <HAL_PCD_EP_DB_Transmit+0x382>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003064:	4413      	add	r3, r2
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	011a      	lsls	r2, r3, #4
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	4413      	add	r3, r2
 8003072:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003076:	63bb      	str	r3, [r7, #56]	; 0x38
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003082:	b29a      	uxth	r2, r3
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	801a      	strh	r2, [r3, #0]
 8003088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308c:	2b3e      	cmp	r3, #62	; 0x3e
 800308e:	d91d      	bls.n	80030cc <HAL_PCD_EP_DB_Transmit+0x332>
 8003090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
 8003098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_PCD_EP_DB_Transmit+0x310>
 80030a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a6:	3b01      	subs	r3, #1
 80030a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e044      	b.n	8003156 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0x350>
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	e035      	b.n	8003156 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_PCD_EP_DB_Transmit+0x36a>
 80030fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003100:	3301      	adds	r3, #1
 8003102:	64bb      	str	r3, [r7, #72]	; 0x48
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29a      	uxth	r2, r3
 800310a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310c:	b29b      	uxth	r3, r3
 800310e:	029b      	lsls	r3, r3, #10
 8003110:	b29b      	uxth	r3, r3
 8003112:	4313      	orrs	r3, r2
 8003114:	b29a      	uxth	r2, r3
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	e01c      	b.n	8003156 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d118      	bne.n	8003156 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	647b      	str	r3, [r7, #68]	; 0x44
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003138:	4413      	add	r3, r2
 800313a:	647b      	str	r3, [r7, #68]	; 0x44
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	011a      	lsls	r2, r3, #4
 8003142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003144:	4413      	add	r3, r2
 8003146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800314a:	643b      	str	r3, [r7, #64]	; 0x40
 800314c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003150:	b29a      	uxth	r2, r3
 8003152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003154:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6959      	ldr	r1, [r3, #20]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	891a      	ldrh	r2, [r3, #8]
 8003162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003166:	b29b      	uxth	r3, r3
 8003168:	f003 f9ef 	bl	800654a <USB_WritePMA>
 800316c:	e1e2      	b.n	8003534 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	3306      	adds	r3, #6
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003196:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d307      	bcc.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	619a      	str	r2, [r3, #24]
 80031b4:	e002      	b.n	80031bc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 80c0 	bne.w	8003346 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d126      	bne.n	800321c <HAL_PCD_EP_DB_Transmit+0x482>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031dc:	b29b      	uxth	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e2:	4413      	add	r3, r2
 80031e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	011a      	lsls	r2, r3, #4
 80031ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031ee:	4413      	add	r3, r2
 80031f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003200:	b29a      	uxth	r2, r3
 8003202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003214:	b29a      	uxth	r2, r3
 8003216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	e01a      	b.n	8003252 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d116      	bne.n	8003252 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	667b      	str	r3, [r7, #100]	; 0x64
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003232:	b29b      	uxth	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003238:	4413      	add	r3, r2
 800323a:	667b      	str	r3, [r7, #100]	; 0x64
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	011a      	lsls	r2, r3, #4
 8003242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003244:	4413      	add	r3, r2
 8003246:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800324a:	663b      	str	r3, [r7, #96]	; 0x60
 800324c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800324e:	2200      	movs	r2, #0
 8003250:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	677b      	str	r3, [r7, #116]	; 0x74
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d12b      	bne.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	4413      	add	r3, r2
 8003276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	011a      	lsls	r2, r3, #4
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	4413      	add	r3, r2
 8003282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800328a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003296:	b29a      	uxth	r2, r3
 8003298:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e017      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d113      	bne.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	4413      	add	r3, r2
 80032d0:	677b      	str	r3, [r7, #116]	; 0x74
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	011a      	lsls	r2, r3, #4
 80032d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032da:	4413      	add	r3, r2
 80032dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
 80032e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e4:	2200      	movs	r2, #0
 80032e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f004 ffed 	bl	80082ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 811a 	bne.w	8003534 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800333c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003340:	b29b      	uxth	r3, r3
 8003342:	8013      	strh	r3, [r2, #0]
 8003344:	e0f6      	b.n	8003534 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d121      	bne.n	8003394 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	b29b      	uxth	r3, r3
 8003392:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 80ca 	bne.w	8003534 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033a8:	441a      	add	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033b6:	441a      	add	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d30b      	bcc.n	80033e0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d8:	1ad2      	subs	r2, r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	621a      	str	r2, [r3, #32]
 80033de:	e017      	b.n	8003410 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80033e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033f8:	e00a      	b.n	8003410 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2200      	movs	r2, #0
 8003406:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	657b      	str	r3, [r7, #84]	; 0x54
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d165      	bne.n	80034ea <HAL_PCD_EP_DB_Transmit+0x750>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342c:	b29b      	uxth	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003432:	4413      	add	r3, r2
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	011a      	lsls	r2, r3, #4
 800343c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343e:	4413      	add	r3, r2
 8003440:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003444:	65bb      	str	r3, [r7, #88]	; 0x58
 8003446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003450:	b29a      	uxth	r2, r3
 8003452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345a:	2b3e      	cmp	r3, #62	; 0x3e
 800345c:	d91d      	bls.n	800349a <HAL_PCD_EP_DB_Transmit+0x700>
 800345e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	66bb      	str	r3, [r7, #104]	; 0x68
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003474:	3b01      	subs	r3, #1
 8003476:	66bb      	str	r3, [r7, #104]	; 0x68
 8003478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29a      	uxth	r2, r3
 800347e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003480:	b29b      	uxth	r3, r3
 8003482:	029b      	lsls	r3, r3, #10
 8003484:	b29b      	uxth	r3, r3
 8003486:	4313      	orrs	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800348e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003492:	b29a      	uxth	r2, r3
 8003494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	e041      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x784>
 800349a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80034a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	e032      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x784>
 80034b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
 80034c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x738>
 80034cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ce:	3301      	adds	r3, #1
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034da:	b29b      	uxth	r3, r3
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e6:	801a      	strh	r2, [r3, #0]
 80034e8:	e019      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x784>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d115      	bne.n	800351e <HAL_PCD_EP_DB_Transmit+0x784>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	4413      	add	r3, r2
 8003502:	657b      	str	r3, [r7, #84]	; 0x54
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	011a      	lsls	r2, r3, #4
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	4413      	add	r3, r2
 800350e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003512:	653b      	str	r3, [r7, #80]	; 0x50
 8003514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003518:	b29a      	uxth	r2, r3
 800351a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6959      	ldr	r1, [r3, #20]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	895a      	ldrh	r2, [r3, #10]
 800352a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800352e:	b29b      	uxth	r3, r3
 8003530:	f003 f80b 	bl	800654a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354e:	82bb      	strh	r3, [r7, #20]
 8003550:	8abb      	ldrh	r3, [r7, #20]
 8003552:	f083 0310 	eor.w	r3, r3, #16
 8003556:	82bb      	strh	r3, [r7, #20]
 8003558:	8abb      	ldrh	r3, [r7, #20]
 800355a:	f083 0320 	eor.w	r3, r3, #32
 800355e:	82bb      	strh	r3, [r7, #20]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	8abb      	ldrh	r3, [r7, #20]
 8003570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003580:	b29b      	uxth	r3, r3
 8003582:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3790      	adds	r7, #144	; 0x90
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800358e:	b480      	push	{r7}
 8003590:	b087      	sub	sp, #28
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	817b      	strh	r3, [r7, #10]
 800359c:	4613      	mov	r3, r2
 800359e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035a0:	897b      	ldrh	r3, [r7, #10]
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ac:	897b      	ldrh	r3, [r7, #10]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	e009      	b.n	80035d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035c4:	897a      	ldrh	r2, [r7, #10]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035d8:	893b      	ldrh	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	80da      	strh	r2, [r3, #6]
 80035ec:	e00b      	b.n	8003606 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2201      	movs	r2, #1
 80035f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	b29a      	uxth	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
	...

08003614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e272      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8087 	beq.w	8003742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003634:	4b92      	ldr	r3, [pc, #584]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b04      	cmp	r3, #4
 800363e:	d00c      	beq.n	800365a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003640:	4b8f      	ldr	r3, [pc, #572]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d112      	bne.n	8003672 <HAL_RCC_OscConfig+0x5e>
 800364c:	4b8c      	ldr	r3, [pc, #560]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d10b      	bne.n	8003672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365a:	4b89      	ldr	r3, [pc, #548]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d06c      	beq.n	8003740 <HAL_RCC_OscConfig+0x12c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d168      	bne.n	8003740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e24c      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x76>
 800367c:	4b80      	ldr	r3, [pc, #512]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7f      	ldr	r2, [pc, #508]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e02e      	b.n	80036e8 <HAL_RCC_OscConfig+0xd4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x98>
 8003692:	4b7b      	ldr	r3, [pc, #492]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7a      	ldr	r2, [pc, #488]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b78      	ldr	r3, [pc, #480]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a77      	ldr	r2, [pc, #476]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01d      	b.n	80036e8 <HAL_RCC_OscConfig+0xd4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0xbc>
 80036b6:	4b72      	ldr	r3, [pc, #456]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a71      	ldr	r2, [pc, #452]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b6f      	ldr	r3, [pc, #444]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6e      	ldr	r2, [pc, #440]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0xd4>
 80036d0:	4b6b      	ldr	r3, [pc, #428]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6a      	ldr	r2, [pc, #424]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b68      	ldr	r3, [pc, #416]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a67      	ldr	r2, [pc, #412]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe f8e6 	bl	80018c0 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fe f8e2 	bl	80018c0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e200      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0xe4>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe f8d2 	bl	80018c0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe f8ce 	bl	80018c0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1ec      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x10c>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d063      	beq.n	8003816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374e:	4b4c      	ldr	r3, [pc, #304]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800375a:	4b49      	ldr	r3, [pc, #292]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x18c>
 8003766:	4b46      	ldr	r3, [pc, #280]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b43      	ldr	r3, [pc, #268]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x176>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1c0      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4939      	ldr	r1, [pc, #228]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e03a      	b.n	8003816 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe f887 	bl	80018c0 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fe f883 	bl	80018c0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1a1      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4927      	ldr	r1, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe f866 	bl	80018c0 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fe f862 	bl	80018c0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e180      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03a      	beq.n	8003898 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b17      	ldr	r3, [pc, #92]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7fe f846 	bl	80018c0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe f842 	bl	80018c0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e160      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003856:	2001      	movs	r0, #1
 8003858:	f000 fa9c 	bl	8003d94 <RCC_Delay>
 800385c:	e01c      	b.n	8003898 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe f82c 	bl	80018c0 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386a:	e00f      	b.n	800388c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386c:	f7fe f828 	bl	80018c0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d908      	bls.n	800388c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e146      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	42420000 	.word	0x42420000
 8003888:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	4b92      	ldr	r3, [pc, #584]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e9      	bne.n	800386c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80a6 	beq.w	80039f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038aa:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	4b88      	ldr	r3, [pc, #544]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4a87      	ldr	r2, [pc, #540]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c0:	61d3      	str	r3, [r2, #28]
 80038c2:	4b85      	ldr	r3, [pc, #532]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	4b82      	ldr	r3, [pc, #520]	; (8003adc <HAL_RCC_OscConfig+0x4c8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d118      	bne.n	8003910 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038de:	4b7f      	ldr	r3, [pc, #508]	; (8003adc <HAL_RCC_OscConfig+0x4c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7e      	ldr	r2, [pc, #504]	; (8003adc <HAL_RCC_OscConfig+0x4c8>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7fd ffe9 	bl	80018c0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f2:	f7fd ffe5 	bl	80018c0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b64      	cmp	r3, #100	; 0x64
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e103      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	4b75      	ldr	r3, [pc, #468]	; (8003adc <HAL_RCC_OscConfig+0x4c8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d106      	bne.n	8003926 <HAL_RCC_OscConfig+0x312>
 8003918:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	4a6e      	ldr	r2, [pc, #440]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6213      	str	r3, [r2, #32]
 8003924:	e02d      	b.n	8003982 <HAL_RCC_OscConfig+0x36e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x334>
 800392e:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4a69      	ldr	r2, [pc, #420]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6213      	str	r3, [r2, #32]
 800393a:	4b67      	ldr	r3, [pc, #412]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a66      	ldr	r2, [pc, #408]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	6213      	str	r3, [r2, #32]
 8003946:	e01c      	b.n	8003982 <HAL_RCC_OscConfig+0x36e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b05      	cmp	r3, #5
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x356>
 8003950:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4a60      	ldr	r2, [pc, #384]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	6213      	str	r3, [r2, #32]
 800395c:	4b5e      	ldr	r3, [pc, #376]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4a5d      	ldr	r2, [pc, #372]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	e00b      	b.n	8003982 <HAL_RCC_OscConfig+0x36e>
 800396a:	4b5b      	ldr	r3, [pc, #364]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4a5a      	ldr	r2, [pc, #360]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6213      	str	r3, [r2, #32]
 8003976:	4b58      	ldr	r3, [pc, #352]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4a57      	ldr	r2, [pc, #348]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	f023 0304 	bic.w	r3, r3, #4
 8003980:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d015      	beq.n	80039b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fd ff99 	bl	80018c0 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fd ff95 	bl	80018c0 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0b1      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ee      	beq.n	8003992 <HAL_RCC_OscConfig+0x37e>
 80039b4:	e014      	b.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fd ff83 	bl	80018c0 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fd ff7f 	bl	80018c0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e09b      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d4:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ee      	bne.n	80039be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e6:	4b3c      	ldr	r3, [pc, #240]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4a3b      	ldr	r2, [pc, #236]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8087 	beq.w	8003b0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d061      	beq.n	8003acc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d146      	bne.n	8003a9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a10:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCC_OscConfig+0x4cc>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fd ff53 	bl	80018c0 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fd ff4f 	bl	80018c0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e06d      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a30:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d108      	bne.n	8003a58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4921      	ldr	r1, [pc, #132]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a19      	ldr	r1, [r3, #32]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x4cc>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fd ff23 	bl	80018c0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fd ff1f 	bl	80018c0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e03d      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x46a>
 8003a9c:	e035      	b.n	8003b0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_RCC_OscConfig+0x4cc>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd ff0c 	bl	80018c0 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fd ff08 	bl	80018c0 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e026      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x498>
 8003aca:	e01e      	b.n	8003b0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e019      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_OscConfig+0x500>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0d0      	b.n	8003cce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d910      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b67      	ldr	r3, [pc, #412]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 0207 	bic.w	r2, r3, #7
 8003b42:	4965      	ldr	r1, [pc, #404]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0b8      	b.n	8003cce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b8c:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b98:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	494d      	ldr	r1, [pc, #308]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d040      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d115      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e07f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e073      	b.n	8003cce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	4b3d      	ldr	r3, [pc, #244]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e06b      	b.n	8003cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf6:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f023 0203 	bic.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4936      	ldr	r1, [pc, #216]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c08:	f7fd fe5a 	bl	80018c0 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c10:	f7fd fe56 	bl	80018c0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e053      	b.n	8003cce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 020c 	and.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1eb      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d210      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 0207 	bic.w	r2, r3, #7
 8003c4e:	4922      	ldr	r1, [pc, #136]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e032      	b.n	8003cce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4916      	ldr	r1, [pc, #88]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	490e      	ldr	r1, [pc, #56]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ca6:	f000 f821 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	490a      	ldr	r1, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	5ccb      	ldrb	r3, [r1, r3]
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_ClockConfig+0x1d0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fdb8 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40022000 	.word	0x40022000
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	080098ac 	.word	0x080098ac
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	20000010 	.word	0x20000010

08003cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d002      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x30>
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x36>
 8003d1a:	e027      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d1e:	613b      	str	r3, [r7, #16]
      break;
 8003d20:	e027      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0c9b      	lsrs	r3, r3, #18
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d2c:	5cd3      	ldrb	r3, [r2, r3]
 8003d2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d010      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	0c5b      	lsrs	r3, r3, #17
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
 8003d48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d4e:	fb03 f202 	mul.w	r2, r3, r2
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e004      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d60:	fb02 f303 	mul.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	613b      	str	r3, [r7, #16]
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d6e:	613b      	str	r3, [r7, #16]
      break;
 8003d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d72:	693b      	ldr	r3, [r7, #16]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	007a1200 	.word	0x007a1200
 8003d88:	08009988 	.word	0x08009988
 8003d8c:	08009998 	.word	0x08009998
 8003d90:	003d0900 	.word	0x003d0900

08003d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <RCC_Delay+0x34>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <RCC_Delay+0x38>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0a5b      	lsrs	r3, r3, #9
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003db0:	bf00      	nop
  }
  while (Delay --);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1e5a      	subs	r2, r3, #1
 8003db6:	60fa      	str	r2, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f9      	bne.n	8003db0 <RCC_Delay+0x1c>
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	2000000c 	.word	0x2000000c
 8003dcc:	10624dd3 	.word	0x10624dd3

08003dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d07d      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dec:	2300      	movs	r3, #0
 8003dee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df0:	4b4f      	ldr	r3, [pc, #316]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4a4b      	ldr	r2, [pc, #300]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e06:	61d3      	str	r3, [r2, #28]
 8003e08:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e14:	2301      	movs	r3, #1
 8003e16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e18:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d118      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e24:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a42      	ldr	r2, [pc, #264]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e30:	f7fd fd46 	bl	80018c0 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e36:	e008      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e38:	f7fd fd42 	bl	80018c0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e06d      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02e      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d027      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e74:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e84:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e8a:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d014      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fd11 	bl	80018c0 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fd fd0d 	bl	80018c0 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e036      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4917      	ldr	r1, [pc, #92]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	490b      	ldr	r1, [pc, #44]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40007000 	.word	0x40007000
 8003f38:	42420440 	.word	0x42420440

08003f3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	f107 0014 	add.w	r0, r7, #20
 8003f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	b004      	add	sp, #16
 8003f5a:	4770      	bx	lr

08003f5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f6c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	f107 0014 	add.w	r0, r7, #20
 8003fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	b004      	add	sp, #16
 8004012:	4770      	bx	lr

08004014 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004014:	b480      	push	{r7}
 8004016:	b09d      	sub	sp, #116	; 0x74
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d81f      	bhi.n	8004086 <USB_ActivateEndpoint+0x72>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <USB_ActivateEndpoint+0x38>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004079 	.word	0x08004079
 8004054:	0800408f 	.word	0x0800408f
 8004058:	0800406b 	.word	0x0800406b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800405c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004068:	e012      	b.n	8004090 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800406a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800406e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004072:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004076:	e00b      	b.n	8004090 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004078:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800407c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004080:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004084:	e004      	b.n	8004090 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800408c:	e000      	b.n	8004090 <USB_ActivateEndpoint+0x7c>
      break;
 800408e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80040e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	7b1b      	ldrb	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 8178 	bne.w	80043f2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8084 	beq.w	8004214 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	011a      	lsls	r2, r3, #4
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	88db      	ldrh	r3, [r3, #6]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	b29b      	uxth	r3, r3
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	827b      	strh	r3, [r7, #18]
 800414e:	8a7b      	ldrh	r3, [r7, #18]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <USB_ActivateEndpoint+0x17c>
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	823b      	strh	r3, [r7, #16]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	8a3b      	ldrh	r3, [r7, #16]
 800417c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800418c:	b29b      	uxth	r3, r3
 800418e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	78db      	ldrb	r3, [r3, #3]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d020      	beq.n	80041da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ae:	81bb      	strh	r3, [r7, #12]
 80041b0:	89bb      	ldrh	r3, [r7, #12]
 80041b2:	f083 0320 	eor.w	r3, r3, #32
 80041b6:	81bb      	strh	r3, [r7, #12]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	89bb      	ldrh	r3, [r7, #12]
 80041c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	8013      	strh	r3, [r2, #0]
 80041d8:	e2d5      	b.n	8004786 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f0:	81fb      	strh	r3, [r7, #14]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	441a      	add	r2, r3
 80041fc:	89fb      	ldrh	r3, [r7, #14]
 80041fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420e:	b29b      	uxth	r3, r3
 8004210:	8013      	strh	r3, [r2, #0]
 8004212:	e2b8      	b.n	8004786 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	633b      	str	r3, [r7, #48]	; 0x30
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	4413      	add	r3, r2
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	011a      	lsls	r2, r3, #4
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	4413      	add	r3, r2
 8004232:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	88db      	ldrh	r3, [r3, #6]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	4413      	add	r3, r2
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	4413      	add	r3, r2
 8004266:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004276:	b29a      	uxth	r2, r3
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b3e      	cmp	r3, #62	; 0x3e
 8004282:	d91d      	bls.n	80042c0 <USB_ActivateEndpoint+0x2ac>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	66bb      	str	r3, [r7, #104]	; 0x68
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <USB_ActivateEndpoint+0x28a>
 8004298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800429a:	3b01      	subs	r3, #1
 800429c:	66bb      	str	r3, [r7, #104]	; 0x68
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	029b      	lsls	r3, r3, #10
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	e026      	b.n	800430e <USB_ActivateEndpoint+0x2fa>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <USB_ActivateEndpoint+0x2ca>
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e017      	b.n	800430e <USB_ActivateEndpoint+0x2fa>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <USB_ActivateEndpoint+0x2e4>
 80042f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042f4:	3301      	adds	r3, #1
 80042f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004300:	b29b      	uxth	r3, r3
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	b29b      	uxth	r3, r3
 8004306:	4313      	orrs	r3, r2
 8004308:	b29a      	uxth	r2, r3
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	847b      	strh	r3, [r7, #34]	; 0x22
 800431c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01b      	beq.n	800435e <USB_ActivateEndpoint+0x34a>
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	843b      	strh	r3, [r7, #32]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	8c3b      	ldrh	r3, [r7, #32]
 800434a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	b29b      	uxth	r3, r3
 800435c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d124      	bne.n	80043b0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437c:	83bb      	strh	r3, [r7, #28]
 800437e:	8bbb      	ldrh	r3, [r7, #28]
 8004380:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004384:	83bb      	strh	r3, [r7, #28]
 8004386:	8bbb      	ldrh	r3, [r7, #28]
 8004388:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800438c:	83bb      	strh	r3, [r7, #28]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	8bbb      	ldrh	r3, [r7, #28]
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]
 80043ae:	e1ea      	b.n	8004786 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	83fb      	strh	r3, [r7, #30]
 80043c8:	8bfb      	ldrh	r3, [r7, #30]
 80043ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043ce:	83fb      	strh	r3, [r7, #30]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	8bfb      	ldrh	r3, [r7, #30]
 80043dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	8013      	strh	r3, [r2, #0]
 80043f0:	e1c9      	b.n	8004786 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	78db      	ldrb	r3, [r3, #3]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d11e      	bne.n	8004438 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004410:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800442e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004432:	b29b      	uxth	r3, r3
 8004434:	8013      	strh	r3, [r2, #0]
 8004436:	e01d      	b.n	8004474 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004470:	b29b      	uxth	r3, r3
 8004472:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447e:	b29b      	uxth	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004484:	4413      	add	r3, r2
 8004486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	011a      	lsls	r2, r3, #4
 800448e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004490:	4413      	add	r3, r2
 8004492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004496:	65bb      	str	r3, [r7, #88]	; 0x58
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	891b      	ldrh	r3, [r3, #8]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	657b      	str	r3, [r7, #84]	; 0x54
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b8:	4413      	add	r3, r2
 80044ba:	657b      	str	r3, [r7, #84]	; 0x54
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	011a      	lsls	r2, r3, #4
 80044c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044ca:	653b      	str	r3, [r7, #80]	; 0x50
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	895b      	ldrh	r3, [r3, #10]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f040 8093 	bne.w	800460c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01b      	beq.n	800453a <USB_ActivateEndpoint+0x526>
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004518:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	441a      	add	r2, r3
 8004524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004536:	b29b      	uxth	r3, r3
 8004538:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01b      	beq.n	800458a <USB_ActivateEndpoint+0x576>
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	877b      	strh	r3, [r7, #58]	; 0x3a
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004586:	b29b      	uxth	r3, r3
 8004588:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80045a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80045aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
 800460a:	e0bc      	b.n	8004786 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800461c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01d      	beq.n	8004664 <USB_ActivateEndpoint+0x650>
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	441a      	add	r2, r3
 800464c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800465c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01d      	beq.n	80046bc <USB_ActivateEndpoint+0x6a8>
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	78db      	ldrb	r3, [r3, #3]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d024      	beq.n	800470e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046e2:	f083 0320 	eor.w	r3, r3, #32
 80046e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]
 800470c:	e01d      	b.n	800474a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004724:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004760:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004786:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800478a:	4618      	mov	r0, r3
 800478c:	3774      	adds	r7, #116	; 0x74
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004794:	b480      	push	{r7}
 8004796:	b08d      	sub	sp, #52	; 0x34
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	7b1b      	ldrb	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 808e 	bne.w	80048c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d044      	beq.n	800483a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	81bb      	strh	r3, [r7, #12]
 80047be:	89bb      	ldrh	r3, [r7, #12]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01b      	beq.n	8004800 <USB_DeactivateEndpoint+0x6c>
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	817b      	strh	r3, [r7, #10]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004816:	813b      	strh	r3, [r7, #8]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	893b      	ldrh	r3, [r7, #8]
 8004824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004834:	b29b      	uxth	r3, r3
 8004836:	8013      	strh	r3, [r2, #0]
 8004838:	e192      	b.n	8004b60 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	827b      	strh	r3, [r7, #18]
 8004848:	8a7b      	ldrh	r3, [r7, #18]
 800484a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01b      	beq.n	800488a <USB_DeactivateEndpoint+0xf6>
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004868:	823b      	strh	r3, [r7, #16]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	8a3b      	ldrh	r3, [r7, #16]
 8004876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a0:	81fb      	strh	r3, [r7, #14]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	89fb      	ldrh	r3, [r7, #14]
 80048ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8013      	strh	r3, [r2, #0]
 80048c2:	e14d      	b.n	8004b60 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 80a5 	bne.w	8004a18 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	843b      	strh	r3, [r7, #32]
 80048dc:	8c3b      	ldrh	r3, [r7, #32]
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01b      	beq.n	800491e <USB_DeactivateEndpoint+0x18a>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	83fb      	strh	r3, [r7, #30]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	8bfb      	ldrh	r3, [r7, #30]
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	83bb      	strh	r3, [r7, #28]
 800492c:	8bbb      	ldrh	r3, [r7, #28]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01b      	beq.n	800496e <USB_DeactivateEndpoint+0x1da>
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494c:	837b      	strh	r3, [r7, #26]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	8b7b      	ldrh	r3, [r7, #26]
 800495a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004966:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800496a:	b29b      	uxth	r3, r3
 800496c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004984:	833b      	strh	r3, [r7, #24]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	441a      	add	r2, r3
 8004990:	8b3b      	ldrh	r3, [r7, #24]
 8004992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049bc:	82fb      	strh	r3, [r7, #22]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	8afb      	ldrh	r3, [r7, #22]
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f4:	82bb      	strh	r3, [r7, #20]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	441a      	add	r2, r3
 8004a00:	8abb      	ldrh	r3, [r7, #20]
 8004a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]
 8004a16:	e0a3      	b.n	8004b60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <USB_DeactivateEndpoint+0x2d4>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <USB_DeactivateEndpoint+0x324>
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3734      	adds	r7, #52	; 0x34
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0c2      	sub	sp, #264	; 0x108
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b7a:	6018      	str	r0, [r3, #0]
 8004b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b84:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	f040 86b7 	bne.w	8005906 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d908      	bls.n	8004bc6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bc4:	e007      	b.n	8004bd6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	7b1b      	ldrb	r3, [r3, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d13a      	bne.n	8004c5c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6959      	ldr	r1, [r3, #20]
 8004bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	88da      	ldrh	r2, [r3, #6]
 8004bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f001 fc9c 	bl	800654a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	011a      	lsls	r2, r3, #4
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	f000 be1f 	b.w	800589a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	78db      	ldrb	r3, [r3, #3]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	f040 8462 	bne.w	8005532 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	f240 83df 	bls.w	800544a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf8:	1ad2      	subs	r2, r2, r3
 8004cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 81c7 	beq.w	80050bc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30
 8004d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d177      	bne.n	8004e3a <USB_EPStartXfer+0x2ce>
 8004d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	4413      	add	r3, r2
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	011a      	lsls	r2, r3, #4
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	4413      	add	r3, r2
 8004d80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d9c:	d921      	bls.n	8004de2 <USB_EPStartXfer+0x276>
 8004d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <USB_EPStartXfer+0x252>
 8004db4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004db8:	3b01      	subs	r3, #1
 8004dba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	029b      	lsls	r3, r3, #10
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e050      	b.n	8004e84 <USB_EPStartXfer+0x318>
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <USB_EPStartXfer+0x294>
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	e041      	b.n	8004e84 <USB_EPStartXfer+0x318>
 8004e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <USB_EPStartXfer+0x2b4>
 8004e16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	e024      	b.n	8004e84 <USB_EPStartXfer+0x318>
 8004e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d11c      	bne.n	8004e84 <USB_EPStartXfer+0x318>
 8004e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	4413      	add	r3, r2
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
 8004e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	011a      	lsls	r2, r3, #4
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	4413      	add	r3, r2
 8004e74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	895b      	ldrh	r3, [r3, #10]
 8004e90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6959      	ldr	r1, [r3, #20]
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004eaa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004eae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004eb2:	6800      	ldr	r0, [r0, #0]
 8004eb4:	f001 fb49 	bl	800654a <USB_WritePMA>
            ep->xfer_buff += len;
 8004eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec8:	441a      	add	r2, r3
 8004eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d90f      	bls.n	8004f12 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a1a      	ldr	r2, [r3, #32]
 8004efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	621a      	str	r2, [r3, #32]
 8004f10:	e00e      	b.n	8004f30 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d177      	bne.n	8005030 <USB_EPStartXfer+0x4c4>
 8004f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	4413      	add	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	4413      	add	r3, r2
 8004f76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f90:	2b3e      	cmp	r3, #62	; 0x3e
 8004f92:	d921      	bls.n	8004fd8 <USB_EPStartXfer+0x46c>
 8004f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <USB_EPStartXfer+0x448>
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	e056      	b.n	8005086 <USB_EPStartXfer+0x51a>
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <USB_EPStartXfer+0x48a>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	e047      	b.n	8005086 <USB_EPStartXfer+0x51a>
 8004ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <USB_EPStartXfer+0x4aa>
 800500c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005010:	3301      	adds	r3, #1
 8005012:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29a      	uxth	r2, r3
 800501c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005020:	b29b      	uxth	r3, r3
 8005022:	029b      	lsls	r3, r3, #10
 8005024:	b29b      	uxth	r3, r3
 8005026:	4313      	orrs	r3, r2
 8005028:	b29a      	uxth	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	e02a      	b.n	8005086 <USB_EPStartXfer+0x51a>
 8005030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d122      	bne.n	8005086 <USB_EPStartXfer+0x51a>
 8005040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	4413      	add	r3, r2
 8005062:	623b      	str	r3, [r7, #32]
 8005064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	011a      	lsls	r2, r3, #4
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	4413      	add	r3, r2
 8005076:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800507a:	61fb      	str	r3, [r7, #28]
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005080:	b29a      	uxth	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	891b      	ldrh	r3, [r3, #8]
 8005092:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6959      	ldr	r1, [r3, #20]
 80050a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80050b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80050b4:	6800      	ldr	r0, [r0, #0]
 80050b6:	f001 fa48 	bl	800654a <USB_WritePMA>
 80050ba:	e3ee      	b.n	800589a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d177      	bne.n	80051bc <USB_EPStartXfer+0x650>
 80050cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ec:	4413      	add	r3, r2
 80050ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	011a      	lsls	r2, r3, #4
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	4413      	add	r3, r2
 8005102:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005106:	647b      	str	r3, [r7, #68]	; 0x44
 8005108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005112:	b29a      	uxth	r2, r3
 8005114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511c:	2b3e      	cmp	r3, #62	; 0x3e
 800511e:	d921      	bls.n	8005164 <USB_EPStartXfer+0x5f8>
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <USB_EPStartXfer+0x5d4>
 8005136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800513a:	3b01      	subs	r3, #1
 800513c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29a      	uxth	r2, r3
 8005146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800514a:	b29b      	uxth	r3, r3
 800514c:	029b      	lsls	r3, r3, #10
 800514e:	b29b      	uxth	r3, r3
 8005150:	4313      	orrs	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515c:	b29a      	uxth	r2, r3
 800515e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	e056      	b.n	8005212 <USB_EPStartXfer+0x6a6>
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <USB_EPStartXfer+0x616>
 800516c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517a:	b29a      	uxth	r2, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517e:	801a      	strh	r2, [r3, #0]
 8005180:	e047      	b.n	8005212 <USB_EPStartXfer+0x6a6>
 8005182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800518c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <USB_EPStartXfer+0x636>
 8005198:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800519c:	3301      	adds	r3, #1
 800519e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	029b      	lsls	r3, r3, #10
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	e02a      	b.n	8005212 <USB_EPStartXfer+0x6a6>
 80051bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d122      	bne.n	8005212 <USB_EPStartXfer+0x6a6>
 80051cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	653b      	str	r3, [r7, #80]	; 0x50
 80051d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ec:	4413      	add	r3, r2
 80051ee:	653b      	str	r3, [r7, #80]	; 0x50
 80051f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	011a      	lsls	r2, r3, #4
 80051fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005200:	4413      	add	r3, r2
 8005202:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520c:	b29a      	uxth	r2, r3
 800520e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005210:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	891b      	ldrh	r3, [r3, #8]
 800521e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6959      	ldr	r1, [r3, #20]
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005232:	b29b      	uxth	r3, r3
 8005234:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005238:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800523c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005240:	6800      	ldr	r0, [r0, #0]
 8005242:	f001 f982 	bl	800654a <USB_WritePMA>
            ep->xfer_buff += len;
 8005246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005256:	441a      	add	r2, r3
 8005258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	429a      	cmp	r2, r3
 800527e:	d90f      	bls.n	80052a0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005290:	1ad2      	subs	r2, r2, r3
 8005292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	621a      	str	r2, [r3, #32]
 800529e:	e00e      	b.n	80052be <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80052a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80052b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d177      	bne.n	80053ca <USB_EPStartXfer+0x85e>
 80052da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	4413      	add	r3, r2
 80052fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80052fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	011a      	lsls	r2, r3, #4
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	4413      	add	r3, r2
 8005310:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005320:	b29a      	uxth	r2, r3
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532a:	2b3e      	cmp	r3, #62	; 0x3e
 800532c:	d921      	bls.n	8005372 <USB_EPStartXfer+0x806>
 800532e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <USB_EPStartXfer+0x7e2>
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	3b01      	subs	r3, #1
 800534a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29a      	uxth	r2, r3
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29b      	uxth	r3, r3
 800535e:	4313      	orrs	r3, r2
 8005360:	b29b      	uxth	r3, r3
 8005362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536a:	b29a      	uxth	r2, r3
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e050      	b.n	8005414 <USB_EPStartXfer+0x8a8>
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <USB_EPStartXfer+0x824>
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005388:	b29a      	uxth	r2, r3
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e041      	b.n	8005414 <USB_EPStartXfer+0x8a8>
 8005390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800539a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <USB_EPStartXfer+0x844>
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	3301      	adds	r3, #1
 80053ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4313      	orrs	r3, r2
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e024      	b.n	8005414 <USB_EPStartXfer+0x8a8>
 80053ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d11c      	bne.n	8005414 <USB_EPStartXfer+0x8a8>
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	4413      	add	r3, r2
 80053f0:	643b      	str	r3, [r7, #64]	; 0x40
 80053f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	011a      	lsls	r2, r3, #4
 8005400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005402:	4413      	add	r3, r2
 8005404:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540e:	b29a      	uxth	r2, r3
 8005410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005412:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	895b      	ldrh	r3, [r3, #10]
 8005420:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6959      	ldr	r1, [r3, #20]
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	b29b      	uxth	r3, r3
 8005436:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800543a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800543e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005442:	6800      	ldr	r0, [r0, #0]
 8005444:	f001 f881 	bl	800654a <USB_WritePMA>
 8005448:	e227      	b.n	800589a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800544a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800545a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800547c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005480:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80054a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d6:	4413      	add	r3, r2
 80054d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	011a      	lsls	r2, r3, #4
 80054e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ea:	4413      	add	r3, r2
 80054ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	891b      	ldrh	r3, [r3, #8]
 8005508:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800550c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6959      	ldr	r1, [r3, #20]
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551c:	b29b      	uxth	r3, r3
 800551e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005522:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005526:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800552a:	6800      	ldr	r0, [r0, #0]
 800552c:	f001 f80d 	bl	800654a <USB_WritePMA>
 8005530:	e1b3      	b.n	800589a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80c6 	beq.w	8005704 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	673b      	str	r3, [r7, #112]	; 0x70
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d177      	bne.n	8005684 <USB_EPStartXfer+0xb18>
 8005594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	66bb      	str	r3, [r7, #104]	; 0x68
 80055a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055b4:	4413      	add	r3, r2
 80055b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	011a      	lsls	r2, r3, #4
 80055c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ce:	667b      	str	r3, [r7, #100]	; 0x64
 80055d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e4:	2b3e      	cmp	r3, #62	; 0x3e
 80055e6:	d921      	bls.n	800562c <USB_EPStartXfer+0xac0>
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <USB_EPStartXfer+0xa9c>
 80055fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005602:	3b01      	subs	r3, #1
 8005604:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29a      	uxth	r2, r3
 800560e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005624:	b29a      	uxth	r2, r3
 8005626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e050      	b.n	80056ce <USB_EPStartXfer+0xb62>
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <USB_EPStartXfer+0xade>
 8005634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005642:	b29a      	uxth	r2, r3
 8005644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e041      	b.n	80056ce <USB_EPStartXfer+0xb62>
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <USB_EPStartXfer+0xafe>
 8005660:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005664:	3301      	adds	r3, #1
 8005666:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800566a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005674:	b29b      	uxth	r3, r3
 8005676:	029b      	lsls	r3, r3, #10
 8005678:	b29b      	uxth	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e024      	b.n	80056ce <USB_EPStartXfer+0xb62>
 8005684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d11c      	bne.n	80056ce <USB_EPStartXfer+0xb62>
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a8:	4413      	add	r3, r2
 80056aa:	673b      	str	r3, [r7, #112]	; 0x70
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	011a      	lsls	r2, r3, #4
 80056ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056bc:	4413      	add	r3, r2
 80056be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80056ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	895b      	ldrh	r3, [r3, #10]
 80056da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6959      	ldr	r1, [r3, #20]
 80056ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f000 ff24 	bl	800654a <USB_WritePMA>
 8005702:	e0ca      	b.n	800589a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d177      	bne.n	8005804 <USB_EPStartXfer+0xc98>
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572e:	b29b      	uxth	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005734:	4413      	add	r3, r2
 8005736:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	011a      	lsls	r2, r3, #4
 8005746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005748:	4413      	add	r3, r2
 800574a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800574e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575a:	b29a      	uxth	r2, r3
 800575c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005764:	2b3e      	cmp	r3, #62	; 0x3e
 8005766:	d921      	bls.n	80057ac <USB_EPStartXfer+0xc40>
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <USB_EPStartXfer+0xc1c>
 800577e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005782:	3b01      	subs	r3, #1
 8005784:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29a      	uxth	r2, r3
 800578e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005792:	b29b      	uxth	r3, r3
 8005794:	029b      	lsls	r3, r3, #10
 8005796:	b29b      	uxth	r3, r3
 8005798:	4313      	orrs	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	e05c      	b.n	8005866 <USB_EPStartXfer+0xcfa>
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <USB_EPStartXfer+0xc5e>
 80057b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e04d      	b.n	8005866 <USB_EPStartXfer+0xcfa>
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <USB_EPStartXfer+0xc7e>
 80057e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057e4:	3301      	adds	r3, #1
 80057e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	4313      	orrs	r3, r2
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e030      	b.n	8005866 <USB_EPStartXfer+0xcfa>
 8005804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d128      	bne.n	8005866 <USB_EPStartXfer+0xcfa>
 8005814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005838:	4413      	add	r3, r2
 800583a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800583e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	011a      	lsls	r2, r3, #4
 800584c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005850:	4413      	add	r3, r2
 8005852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585e:	b29a      	uxth	r2, r3
 8005860:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005864:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	891b      	ldrh	r3, [r3, #8]
 8005872:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6959      	ldr	r1, [r3, #20]
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005886:	b29b      	uxth	r3, r3
 8005888:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800588c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005890:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005894:	6800      	ldr	r0, [r0, #0]
 8005896:	f000 fe58 	bl	800654a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800589a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c0:	817b      	strh	r3, [r7, #10]
 80058c2:	897b      	ldrh	r3, [r7, #10]
 80058c4:	f083 0310 	eor.w	r3, r3, #16
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	897b      	ldrh	r3, [r7, #10]
 80058cc:	f083 0320 	eor.w	r3, r3, #32
 80058d0:	817b      	strh	r3, [r7, #10]
 80058d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	441a      	add	r2, r3
 80058ec:	897b      	ldrh	r3, [r7, #10]
 80058ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8013      	strh	r3, [r2, #0]
 8005902:	f000 bcde 	b.w	80062c2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	7b1b      	ldrb	r3, [r3, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 80bb 	bne.w	8005a8e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	429a      	cmp	r2, r3
 8005932:	d917      	bls.n	8005964 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005954:	1ad2      	subs	r2, r2, r3
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	619a      	str	r2, [r3, #24]
 8005962:	e00e      	b.n	8005982 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599e:	b29b      	uxth	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059a6:	4413      	add	r3, r2
 80059a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	011a      	lsls	r2, r3, #4
 80059ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059be:	4413      	add	r3, r2
 80059c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e0:	2b3e      	cmp	r3, #62	; 0x3e
 80059e2:	d924      	bls.n	8005a2e <USB_EPStartXfer+0xec2>
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <USB_EPStartXfer+0xe98>
 80059fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059fe:	3b01      	subs	r3, #1
 8005a00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	029b      	lsls	r3, r3, #10
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	f000 bc10 	b.w	800624e <USB_EPStartXfer+0x16e2>
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <USB_EPStartXfer+0xee4>
 8005a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e3fe      	b.n	800624e <USB_EPStartXfer+0x16e2>
 8005a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <USB_EPStartXfer+0xf04>
 8005a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	029b      	lsls	r3, r3, #10
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	4313      	orrs	r3, r2
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e3df      	b.n	800624e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	78db      	ldrb	r3, [r3, #3]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	f040 8218 	bne.w	8005ed0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f040 809d 	bne.w	8005bec <USB_EPStartXfer+0x1080>
 8005ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	011a      	lsls	r2, r3, #4
 8005aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aee:	4413      	add	r3, r2
 8005af0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b3e      	cmp	r3, #62	; 0x3e
 8005b1a:	d92b      	bls.n	8005b74 <USB_EPStartXfer+0x1008>
 8005b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <USB_EPStartXfer+0xfe0>
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b46:	3b01      	subs	r3, #1
 8005b48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	029b      	lsls	r3, r3, #10
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	e070      	b.n	8005c56 <USB_EPStartXfer+0x10ea>
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10c      	bne.n	8005b9e <USB_EPStartXfer+0x1032>
 8005b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e05b      	b.n	8005c56 <USB_EPStartXfer+0x10ea>
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <USB_EPStartXfer+0x1062>
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	029b      	lsls	r3, r3, #10
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	e034      	b.n	8005c56 <USB_EPStartXfer+0x10ea>
 8005bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d12c      	bne.n	8005c56 <USB_EPStartXfer+0x10ea>
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c20:	4413      	add	r3, r2
 8005c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	011a      	lsls	r2, r3, #4
 8005c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 809d 	bne.w	8005db0 <USB_EPStartXfer+0x1244>
 8005c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cde:	d92b      	bls.n	8005d38 <USB_EPStartXfer+0x11cc>
 8005ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <USB_EPStartXfer+0x11a4>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	029b      	lsls	r3, r3, #10
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e069      	b.n	8005e0c <USB_EPStartXfer+0x12a0>
 8005d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10c      	bne.n	8005d62 <USB_EPStartXfer+0x11f6>
 8005d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	e054      	b.n	8005e0c <USB_EPStartXfer+0x12a0>
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <USB_EPStartXfer+0x1226>
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4313      	orrs	r3, r2
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e02d      	b.n	8005e0c <USB_EPStartXfer+0x12a0>
 8005db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d125      	bne.n	8005e0c <USB_EPStartXfer+0x12a0>
 8005dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	011a      	lsls	r2, r3, #4
 8005dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dee:	4413      	add	r3, r2
 8005df0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005df4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e0a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8218 	beq.w	800624e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <USB_EPStartXfer+0x12ea>
 8005e4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10d      	bne.n	8005e72 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 81f5 	bne.w	800624e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 81ee 	bne.w	800624e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	441a      	add	r2, r3
 8005eb6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	8013      	strh	r3, [r2, #0]
 8005ece:	e1be      	b.n	800624e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	f040 81b4 	bne.w	800624a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d917      	bls.n	8005f2e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	619a      	str	r2, [r3, #24]
 8005f2c:	e00e      	b.n	8005f4c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 8085 	bne.w	8006068 <USB_EPStartXfer+0x14fc>
 8005f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f82:	4413      	add	r3, r2
 8005f84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8005fbe:	d923      	bls.n	8006008 <USB_EPStartXfer+0x149c>
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <USB_EPStartXfer+0x1474>
 8005fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	029b      	lsls	r3, r3, #10
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e060      	b.n	80060ca <USB_EPStartXfer+0x155e>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10c      	bne.n	800602a <USB_EPStartXfer+0x14be>
 8006010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e04f      	b.n	80060ca <USB_EPStartXfer+0x155e>
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <USB_EPStartXfer+0x14de>
 8006040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006044:	3301      	adds	r3, #1
 8006046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800604a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29a      	uxth	r2, r3
 8006052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006056:	b29b      	uxth	r3, r3
 8006058:	029b      	lsls	r3, r3, #10
 800605a:	b29b      	uxth	r3, r3
 800605c:	4313      	orrs	r3, r2
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e030      	b.n	80060ca <USB_EPStartXfer+0x155e>
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d128      	bne.n	80060ca <USB_EPStartXfer+0x155e>
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006094:	b29b      	uxth	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800609c:	4413      	add	r3, r2
 800609e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	011a      	lsls	r2, r3, #4
 80060b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060b4:	4413      	add	r3, r2
 80060b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f040 8085 	bne.w	80061f4 <USB_EPStartXfer+0x1688>
 80060ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006106:	b29b      	uxth	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800610e:	4413      	add	r3, r2
 8006110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	011a      	lsls	r2, r3, #4
 8006122:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006126:	4413      	add	r3, r2
 8006128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800612c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006130:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006148:	2b3e      	cmp	r3, #62	; 0x3e
 800614a:	d923      	bls.n	8006194 <USB_EPStartXfer+0x1628>
 800614c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <USB_EPStartXfer+0x1600>
 8006162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006166:	3b01      	subs	r3, #1
 8006168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800616c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006178:	b29b      	uxth	r3, r3
 800617a:	029b      	lsls	r3, r3, #10
 800617c:	b29b      	uxth	r3, r3
 800617e:	4313      	orrs	r3, r2
 8006180:	b29b      	uxth	r3, r3
 8006182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618a:	b29a      	uxth	r2, r3
 800618c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e05c      	b.n	800624e <USB_EPStartXfer+0x16e2>
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10c      	bne.n	80061b6 <USB_EPStartXfer+0x164a>
 800619c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	e04b      	b.n	800624e <USB_EPStartXfer+0x16e2>
 80061b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <USB_EPStartXfer+0x166a>
 80061cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061d0:	3301      	adds	r3, #1
 80061d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	029b      	lsls	r3, r3, #10
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	4313      	orrs	r3, r2
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e02c      	b.n	800624e <USB_EPStartXfer+0x16e2>
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d124      	bne.n	800624e <USB_EPStartXfer+0x16e2>
 8006204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006212:	b29b      	uxth	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800621a:	4413      	add	r3, r2
 800621c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	011a      	lsls	r2, r3, #4
 800622e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006232:	4413      	add	r3, r2
 8006234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006240:	b29a      	uxth	r2, r3
 8006242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e001      	b.n	800624e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e03a      	b.n	80062c4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800624e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006278:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800627c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006280:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006284:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006288:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800628c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d020      	beq.n	8006322 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f6:	81bb      	strh	r3, [r7, #12]
 80062f8:	89bb      	ldrh	r3, [r7, #12]
 80062fa:	f083 0310 	eor.w	r3, r3, #16
 80062fe:	81bb      	strh	r3, [r7, #12]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	89bb      	ldrh	r3, [r7, #12]
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
 8006320:	e01f      	b.n	8006362 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	81fb      	strh	r3, [r7, #14]
 800633a:	89fb      	ldrh	r3, [r7, #14]
 800633c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006340:	81fb      	strh	r3, [r7, #14]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	89fb      	ldrh	r3, [r7, #14]
 800634e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635e:	b29b      	uxth	r3, r3
 8006360:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800636e:	b480      	push	{r7}
 8006370:	b087      	sub	sp, #28
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	7b1b      	ldrb	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 809d 	bne.w	80064bc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d04c      	beq.n	8006424 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	823b      	strh	r3, [r7, #16]
 8006398:	8a3b      	ldrh	r3, [r7, #16]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01b      	beq.n	80063da <USB_EPClearStall+0x6c>
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	81fb      	strh	r3, [r7, #14]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	89fb      	ldrh	r3, [r7, #14]
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d06c      	beq.n	80064bc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f8:	81bb      	strh	r3, [r7, #12]
 80063fa:	89bb      	ldrh	r3, [r7, #12]
 80063fc:	f083 0320 	eor.w	r3, r3, #32
 8006400:	81bb      	strh	r3, [r7, #12]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	89bb      	ldrh	r3, [r7, #12]
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
 8006422:	e04b      	b.n	80064bc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	82fb      	strh	r3, [r7, #22]
 8006432:	8afb      	ldrh	r3, [r7, #22]
 8006434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01b      	beq.n	8006474 <USB_EPClearStall+0x106>
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	82bb      	strh	r3, [r7, #20]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	441a      	add	r2, r3
 800645e:	8abb      	ldrh	r3, [r7, #20]
 8006460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800646c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006470:	b29b      	uxth	r3, r3
 8006472:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	827b      	strh	r3, [r7, #18]
 800648c:	8a7b      	ldrh	r3, [r7, #18]
 800648e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006492:	827b      	strh	r3, [r7, #18]
 8006494:	8a7b      	ldrh	r3, [r7, #18]
 8006496:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800649a:	827b      	strh	r3, [r7, #18]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	441a      	add	r2, r3
 80064a6:	8a7b      	ldrh	r3, [r7, #18]
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2280      	movs	r2, #128	; 0x80
 80064de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr

08006516 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006524:	b29b      	uxth	r3, r3
 8006526:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006528:	68fb      	ldr	r3, [r7, #12]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr

0800654a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800654a:	b480      	push	{r7}
 800654c:	b08b      	sub	sp, #44	; 0x2c
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	4611      	mov	r1, r2
 8006556:	461a      	mov	r2, r3
 8006558:	460b      	mov	r3, r1
 800655a:	80fb      	strh	r3, [r7, #6]
 800655c:	4613      	mov	r3, r2
 800655e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006560:	88bb      	ldrh	r3, [r7, #4]
 8006562:	3301      	adds	r3, #1
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	005a      	lsls	r2, r3, #1
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
 8006582:	e01e      	b.n	80065c2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	b21a      	sxth	r2, r3
 8006594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006598:	4313      	orrs	r3, r2
 800659a:	b21b      	sxth	r3, r3
 800659c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	8a7a      	ldrh	r2, [r7, #18]
 80065a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	3302      	adds	r3, #2
 80065a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	3302      	adds	r3, #2
 80065ae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3301      	adds	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	3301      	adds	r3, #1
 80065ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	3b01      	subs	r3, #1
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1dd      	bne.n	8006584 <USB_WritePMA+0x3a>
  }
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	372c      	adds	r7, #44	; 0x2c
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr

080065d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b08b      	sub	sp, #44	; 0x2c
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4611      	mov	r1, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	460b      	mov	r3, r1
 80065e4:	80fb      	strh	r3, [r7, #6]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80065ea:	88bb      	ldrh	r3, [r7, #4]
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	005a      	lsls	r2, r3, #1
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006606:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
 800660c:	e01b      	b.n	8006646 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	3302      	adds	r3, #2
 800661a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	b2da      	uxtb	r2, r3
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	3301      	adds	r3, #1
 8006628:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	b2da      	uxtb	r2, r3
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	3301      	adds	r3, #1
 8006638:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	3302      	adds	r3, #2
 800663e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	3b01      	subs	r3, #1
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e0      	bne.n	800660e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800664c:	88bb      	ldrh	r3, [r7, #4]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	701a      	strb	r2, [r3, #0]
  }
}
 8006668:	bf00      	nop
 800666a:	372c      	adds	r7, #44	; 0x2c
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7c1b      	ldrb	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d115      	bne.n	80066b6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800668a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668e:	2202      	movs	r2, #2
 8006690:	2181      	movs	r1, #129	; 0x81
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 feff 	bl	8008496 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800669e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a2:	2202      	movs	r2, #2
 80066a4:	2101      	movs	r1, #1
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fef5 	bl	8008496 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80066b4:	e012      	b.n	80066dc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066b6:	2340      	movs	r3, #64	; 0x40
 80066b8:	2202      	movs	r2, #2
 80066ba:	2181      	movs	r1, #129	; 0x81
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 feea 	bl	8008496 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	2202      	movs	r2, #2
 80066cc:	2101      	movs	r1, #1
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fee1 	bl	8008496 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066dc:	2308      	movs	r3, #8
 80066de:	2203      	movs	r2, #3
 80066e0:	2182      	movs	r1, #130	; 0x82
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 fed7 	bl	8008496 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066ee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066f2:	f001 fff7 	bl	80086e4 <USBD_static_malloc>
 80066f6:	4602      	mov	r2, r0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006708:	2301      	movs	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
 800670c:	e026      	b.n	800675c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006714:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7c1b      	ldrb	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800673e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006742:	2101      	movs	r1, #1
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 ff97 	bl	8008678 <USBD_LL_PrepareReceive>
 800674a:	e007      	b.n	800675c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006752:	2340      	movs	r3, #64	; 0x40
 8006754:	2101      	movs	r1, #1
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 ff8e 	bl	8008678 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006776:	2181      	movs	r1, #129	; 0x81
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 feb2 	bl	80084e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006784:	2101      	movs	r1, #1
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 feab 	bl	80084e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006794:	2182      	movs	r1, #130	; 0x82
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 fea3 	bl	80084e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00e      	beq.n	80067ca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 ff9d 	bl	80086fc <USBD_static_free>
    pdev->pClassData = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d039      	beq.n	8006872 <USBD_CDC_Setup+0x9e>
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d17f      	bne.n	8006902 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	88db      	ldrh	r3, [r3, #6]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d029      	beq.n	800685e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b25b      	sxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	da11      	bge.n	8006838 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006820:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	88d2      	ldrh	r2, [r2, #6]
 8006826:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006828:	6939      	ldr	r1, [r7, #16]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88db      	ldrh	r3, [r3, #6]
 800682e:	461a      	mov	r2, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fa0a 	bl	8007c4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006836:	e06b      	b.n	8006910 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	785a      	ldrb	r2, [r3, #1]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	88db      	ldrh	r3, [r3, #6]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800684e:	6939      	ldr	r1, [r7, #16]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	88db      	ldrh	r3, [r3, #6]
 8006854:	461a      	mov	r2, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fa25 	bl	8007ca6 <USBD_CtlPrepareRx>
      break;
 800685c:	e058      	b.n	8006910 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	7850      	ldrb	r0, [r2, #1]
 800686a:	2200      	movs	r2, #0
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	4798      	blx	r3
      break;
 8006870:	e04e      	b.n	8006910 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b0b      	cmp	r3, #11
 8006878:	d02e      	beq.n	80068d8 <USBD_CDC_Setup+0x104>
 800687a:	2b0b      	cmp	r3, #11
 800687c:	dc38      	bgt.n	80068f0 <USBD_CDC_Setup+0x11c>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <USBD_CDC_Setup+0xb4>
 8006882:	2b0a      	cmp	r3, #10
 8006884:	d014      	beq.n	80068b0 <USBD_CDC_Setup+0xdc>
 8006886:	e033      	b.n	80068f0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688e:	2b03      	cmp	r3, #3
 8006890:	d107      	bne.n	80068a2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	2202      	movs	r2, #2
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 f9d5 	bl	8007c4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068a0:	e02e      	b.n	8006900 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f966 	bl	8007b76 <USBD_CtlError>
            ret = USBD_FAIL;
 80068aa:	2302      	movs	r3, #2
 80068ac:	75fb      	strb	r3, [r7, #23]
          break;
 80068ae:	e027      	b.n	8006900 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d107      	bne.n	80068ca <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80068ba:	f107 030f 	add.w	r3, r7, #15
 80068be:	2201      	movs	r2, #1
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 f9c1 	bl	8007c4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068c8:	e01a      	b.n	8006900 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 f952 	bl	8007b76 <USBD_CtlError>
            ret = USBD_FAIL;
 80068d2:	2302      	movs	r3, #2
 80068d4:	75fb      	strb	r3, [r7, #23]
          break;
 80068d6:	e013      	b.n	8006900 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d00d      	beq.n	80068fe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f946 	bl	8007b76 <USBD_CtlError>
            ret = USBD_FAIL;
 80068ea:	2302      	movs	r3, #2
 80068ec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068ee:	e006      	b.n	80068fe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 f93f 	bl	8007b76 <USBD_CtlError>
          ret = USBD_FAIL;
 80068f8:	2302      	movs	r3, #2
 80068fa:	75fb      	strb	r3, [r7, #23]
          break;
 80068fc:	e000      	b.n	8006900 <USBD_CDC_Setup+0x12c>
          break;
 80068fe:	bf00      	nop
      }
      break;
 8006900:	e006      	b.n	8006910 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f936 	bl	8007b76 <USBD_CtlError>
      ret = USBD_FAIL;
 800690a:	2302      	movs	r3, #2
 800690c:	75fb      	strb	r3, [r7, #23]
      break;
 800690e:	bf00      	nop
  }

  return ret;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006934:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d03a      	beq.n	80069b6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	331c      	adds	r3, #28
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d029      	beq.n	80069aa <USBD_CDC_DataIn+0x90>
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	331c      	adds	r3, #28
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	78f9      	ldrb	r1, [r7, #3]
 800696a:	68b8      	ldr	r0, [r7, #8]
 800696c:	460b      	mov	r3, r1
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4403      	add	r3, r0
 8006976:	3338      	adds	r3, #56	; 0x38
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	fbb2 f1f3 	udiv	r1, r2, r3
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d110      	bne.n	80069aa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	331c      	adds	r3, #28
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800699c:	78f9      	ldrb	r1, [r7, #3]
 800699e:	2300      	movs	r3, #0
 80069a0:	2200      	movs	r2, #0
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 fe45 	bl	8008632 <USBD_LL_Transmit>
 80069a8:	e003      	b.n	80069b2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e000      	b.n	80069b8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80069b6:	2302      	movs	r3, #2
  }
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fe70 	bl	80086be <USBD_LL_GetRxDataSize>
 80069de:	4602      	mov	r2, r0
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a04:	4611      	mov	r1, r2
 8006a06:	4798      	blx	r3

    return USBD_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d015      	beq.n	8006a5c <USBD_CDC_EP0_RxReady+0x46>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a36:	2bff      	cmp	r3, #255	; 0xff
 8006a38:	d010      	beq.n	8006a5c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a48:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a50:	b292      	uxth	r2, r2
 8006a52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	22ff      	movs	r2, #255	; 0xff
 8006a58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2243      	movs	r2, #67	; 0x43
 8006a74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006a76:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	200000a0 	.word	0x200000a0

08006a88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2243      	movs	r2, #67	; 0x43
 8006a94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006a96:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	2000005c 	.word	0x2000005c

08006aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2243      	movs	r2, #67	; 0x43
 8006ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006ab6:	4b03      	ldr	r3, [pc, #12]	; (8006ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	200000e4 	.word	0x200000e4

08006ac8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	220a      	movs	r2, #10
 8006ad4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ad6:	4b03      	ldr	r3, [pc, #12]	; (8006ae4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000018 	.word	0x20000018

08006ae8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006af2:	2302      	movs	r3, #2
 8006af4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b28:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b32:	88fa      	ldrh	r2, [r7, #6]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b56:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01c      	beq.n	8006bc0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d115      	bne.n	8006bbc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2181      	movs	r1, #129	; 0x81
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fd3d 	bl	8008632 <USBD_LL_Transmit>

      return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e002      	b.n	8006bc2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006bc0:	2302      	movs	r3, #2
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d017      	beq.n	8006c14 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c1b      	ldrb	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fd3d 	bl	8008678 <USBD_LL_PrepareReceive>
 8006bfe:	e007      	b.n	8006c10 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c06:	2340      	movs	r3, #64	; 0x40
 8006c08:	2101      	movs	r1, #1
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fd34 	bl	8008678 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e000      	b.n	8006c16 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c14:	2302      	movs	r3, #2
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c32:	2302      	movs	r3, #2
 8006c34:	e01a      	b.n	8006c6c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	79fa      	ldrb	r2, [r7, #7]
 8006c62:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f001 fba1 	bl	80083ac <USBD_LL_Init>

  return USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e001      	b.n	8006c9a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006c96:	2302      	movs	r3, #2
 8006c98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fbd6 	bl	8008460 <USBD_LL_Start>

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00c      	beq.n	8006d06 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	4611      	mov	r1, r2
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fed8 	bl	8007afe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d016      	beq.n	8006da0 <USBD_LL_SetupStage+0x6a>
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d81c      	bhi.n	8006db0 <USBD_LL_SetupStage+0x7a>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <USBD_LL_SetupStage+0x4a>
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d008      	beq.n	8006d90 <USBD_LL_SetupStage+0x5a>
 8006d7e:	e017      	b.n	8006db0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f9cb 	bl	8007124 <USBD_StdDevReq>
      break;
 8006d8e:	e01a      	b.n	8006dc6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fa2d 	bl	80071f8 <USBD_StdItfReq>
      break;
 8006d9e:	e012      	b.n	8006dc6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fa6d 	bl	8007288 <USBD_StdEPReq>
      break;
 8006dae:	e00a      	b.n	8006dc6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006db6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fbae 	bl	8008520 <USBD_LL_StallEP>
      break;
 8006dc4:	bf00      	nop
  }

  return USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d14b      	bne.n	8006e7c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d134      	bne.n	8006e60 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d919      	bls.n	8006e36 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d203      	bcs.n	8006e24 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	e002      	b.n	8006e2a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 ff57 	bl	8007ce2 <USBD_CtlContinueRx>
 8006e34:	e038      	b.n	8006ea8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d105      	bne.n	8006e58 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 ff54 	bl	8007d06 <USBD_CtlSendStatus>
 8006e5e:	e023      	b.n	8006ea8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	d11e      	bne.n	8006ea8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006e72:	2100      	movs	r1, #0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fb53 	bl	8008520 <USBD_LL_StallEP>
 8006e7a:	e015      	b.n	8006ea8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00d      	beq.n	8006ea4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d108      	bne.n	8006ea4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	7afa      	ldrb	r2, [r7, #11]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	4798      	blx	r3
 8006ea2:	e001      	b.n	8006ea8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e000      	b.n	8006eaa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d17f      	bne.n	8006fc6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d15c      	bne.n	8006f90 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d915      	bls.n	8006f0e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 fec1 	bl	8007c82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f00:	2300      	movs	r3, #0
 8006f02:	2200      	movs	r2, #0
 8006f04:	2100      	movs	r1, #0
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f001 fbb6 	bl	8008678 <USBD_LL_PrepareReceive>
 8006f0c:	e04e      	b.n	8006fac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	6912      	ldr	r2, [r2, #16]
 8006f16:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f1a:	fb01 f202 	mul.w	r2, r1, r2
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11c      	bne.n	8006f5e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d316      	bcc.n	8006f5e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d20f      	bcs.n	8006f5e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fe9d 	bl	8007c82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f50:	2300      	movs	r3, #0
 8006f52:	2200      	movs	r2, #0
 8006f54:	2100      	movs	r1, #0
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f001 fb8e 	bl	8008678 <USBD_LL_PrepareReceive>
 8006f5c:	e026      	b.n	8006fac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d105      	bne.n	8006f80 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006f80:	2180      	movs	r1, #128	; 0x80
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f001 facc 	bl	8008520 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fecf 	bl	8007d2c <USBD_CtlReceiveStatus>
 8006f8e:	e00d      	b.n	8006fac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d004      	beq.n	8006fa4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d103      	bne.n	8006fac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 faba 	bl	8008520 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d11d      	bne.n	8006ff2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff fe81 	bl	8006cbe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fc4:	e015      	b.n	8006ff2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00d      	beq.n	8006fee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d108      	bne.n	8006fee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	7afa      	ldrb	r2, [r7, #11]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	4798      	blx	r3
 8006fec:	e001      	b.n	8006ff2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e000      	b.n	8006ff4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	2200      	movs	r2, #0
 8007008:	2100      	movs	r1, #0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fa43 	bl	8008496 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2240      	movs	r2, #64	; 0x40
 800701c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	2200      	movs	r2, #0
 8007024:	2180      	movs	r1, #128	; 0x80
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fa35 	bl	8008496 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6852      	ldr	r2, [r2, #4]
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	4611      	mov	r1, r2
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
  }

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2204      	movs	r2, #4
 80070b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d105      	bne.n	80070e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d10b      	bne.n	8007118 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d005      	beq.n	800714a <USBD_StdDevReq+0x26>
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d84f      	bhi.n	80071e2 <USBD_StdDevReq+0xbe>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <USBD_StdDevReq+0x36>
 8007146:	2b20      	cmp	r3, #32
 8007148:	d14b      	bne.n	80071e2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4798      	blx	r3
      break;
 8007158:	e048      	b.n	80071ec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b09      	cmp	r3, #9
 8007160:	d839      	bhi.n	80071d6 <USBD_StdDevReq+0xb2>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <USBD_StdDevReq+0x44>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	080071b9 	.word	0x080071b9
 800716c:	080071cd 	.word	0x080071cd
 8007170:	080071d7 	.word	0x080071d7
 8007174:	080071c3 	.word	0x080071c3
 8007178:	080071d7 	.word	0x080071d7
 800717c:	0800719b 	.word	0x0800719b
 8007180:	08007191 	.word	0x08007191
 8007184:	080071d7 	.word	0x080071d7
 8007188:	080071af 	.word	0x080071af
 800718c:	080071a5 	.word	0x080071a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f9dc 	bl	8007550 <USBD_GetDescriptor>
          break;
 8007198:	e022      	b.n	80071e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fb3f 	bl	8007820 <USBD_SetAddress>
          break;
 80071a2:	e01d      	b.n	80071e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fb7e 	bl	80078a8 <USBD_SetConfig>
          break;
 80071ac:	e018      	b.n	80071e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc07 	bl	80079c4 <USBD_GetConfig>
          break;
 80071b6:	e013      	b.n	80071e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fc37 	bl	8007a2e <USBD_GetStatus>
          break;
 80071c0:	e00e      	b.n	80071e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fc65 	bl	8007a94 <USBD_SetFeature>
          break;
 80071ca:	e009      	b.n	80071e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fc74 	bl	8007abc <USBD_ClrFeature>
          break;
 80071d4:	e004      	b.n	80071e0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fccc 	bl	8007b76 <USBD_CtlError>
          break;
 80071de:	bf00      	nop
      }
      break;
 80071e0:	e004      	b.n	80071ec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fcc6 	bl	8007b76 <USBD_CtlError>
      break;
 80071ea:	bf00      	nop
  }

  return ret;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop

080071f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d005      	beq.n	800721e <USBD_StdItfReq+0x26>
 8007212:	2b40      	cmp	r3, #64	; 0x40
 8007214:	d82e      	bhi.n	8007274 <USBD_StdItfReq+0x7c>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <USBD_StdItfReq+0x26>
 800721a:	2b20      	cmp	r3, #32
 800721c:	d12a      	bne.n	8007274 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007224:	3b01      	subs	r3, #1
 8007226:	2b02      	cmp	r3, #2
 8007228:	d81d      	bhi.n	8007266 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	889b      	ldrh	r3, [r3, #4]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b01      	cmp	r3, #1
 8007232:	d813      	bhi.n	800725c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	88db      	ldrh	r3, [r3, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d110      	bne.n	8007270 <USBD_StdItfReq+0x78>
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10d      	bne.n	8007270 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fd56 	bl	8007d06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800725a:	e009      	b.n	8007270 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fc89 	bl	8007b76 <USBD_CtlError>
          break;
 8007264:	e004      	b.n	8007270 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fc84 	bl	8007b76 <USBD_CtlError>
          break;
 800726e:	e000      	b.n	8007272 <USBD_StdItfReq+0x7a>
          break;
 8007270:	bf00      	nop
      }
      break;
 8007272:	e004      	b.n	800727e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fc7d 	bl	8007b76 <USBD_CtlError>
      break;
 800727c:	bf00      	nop
  }

  return USBD_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	889b      	ldrh	r3, [r3, #4]
 800729a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d007      	beq.n	80072b8 <USBD_StdEPReq+0x30>
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	f200 8146 	bhi.w	800753a <USBD_StdEPReq+0x2b2>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <USBD_StdEPReq+0x40>
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	f040 8141 	bne.w	800753a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
      break;
 80072c6:	e13d      	b.n	8007544 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d10a      	bne.n	80072ea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	e12d      	b.n	8007546 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d007      	beq.n	8007302 <USBD_StdEPReq+0x7a>
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	f300 811b 	bgt.w	800752e <USBD_StdEPReq+0x2a6>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d072      	beq.n	80073e2 <USBD_StdEPReq+0x15a>
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d03a      	beq.n	8007376 <USBD_StdEPReq+0xee>
 8007300:	e115      	b.n	800752e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007308:	2b02      	cmp	r3, #2
 800730a:	d002      	beq.n	8007312 <USBD_StdEPReq+0x8a>
 800730c:	2b03      	cmp	r3, #3
 800730e:	d015      	beq.n	800733c <USBD_StdEPReq+0xb4>
 8007310:	e02b      	b.n	800736a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <USBD_StdEPReq+0xaa>
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	2b80      	cmp	r3, #128	; 0x80
 800731c:	d009      	beq.n	8007332 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 f8fc 	bl	8008520 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 f8f8 	bl	8008520 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007330:	e020      	b.n	8007374 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fc1e 	bl	8007b76 <USBD_CtlError>
              break;
 800733a:	e01b      	b.n	8007374 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	885b      	ldrh	r3, [r3, #2]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10e      	bne.n	8007362 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <USBD_StdEPReq+0xda>
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d008      	beq.n	8007362 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	88db      	ldrh	r3, [r3, #6]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d104      	bne.n	8007362 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 f8df 	bl	8008520 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fccf 	bl	8007d06 <USBD_CtlSendStatus>

              break;
 8007368:	e004      	b.n	8007374 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fc02 	bl	8007b76 <USBD_CtlError>
              break;
 8007372:	bf00      	nop
          }
          break;
 8007374:	e0e0      	b.n	8007538 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737c:	2b02      	cmp	r3, #2
 800737e:	d002      	beq.n	8007386 <USBD_StdEPReq+0xfe>
 8007380:	2b03      	cmp	r3, #3
 8007382:	d015      	beq.n	80073b0 <USBD_StdEPReq+0x128>
 8007384:	e026      	b.n	80073d4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00c      	beq.n	80073a6 <USBD_StdEPReq+0x11e>
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b80      	cmp	r3, #128	; 0x80
 8007390:	d009      	beq.n	80073a6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f8c2 	bl	8008520 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 f8be 	bl	8008520 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073a4:	e01c      	b.n	80073e0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fbe4 	bl	8007b76 <USBD_CtlError>
              break;
 80073ae:	e017      	b.n	80073e0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	885b      	ldrh	r3, [r3, #2]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d112      	bne.n	80073de <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 f8c9 	bl	800855e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc9a 	bl	8007d06 <USBD_CtlSendStatus>
              }
              break;
 80073d2:	e004      	b.n	80073de <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fbcd 	bl	8007b76 <USBD_CtlError>
              break;
 80073dc:	e000      	b.n	80073e0 <USBD_StdEPReq+0x158>
              break;
 80073de:	bf00      	nop
          }
          break;
 80073e0:	e0aa      	b.n	8007538 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d002      	beq.n	80073f2 <USBD_StdEPReq+0x16a>
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d032      	beq.n	8007456 <USBD_StdEPReq+0x1ce>
 80073f0:	e097      	b.n	8007522 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <USBD_StdEPReq+0x180>
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b80      	cmp	r3, #128	; 0x80
 80073fc:	d004      	beq.n	8007408 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fbb8 	bl	8007b76 <USBD_CtlError>
                break;
 8007406:	e091      	b.n	800752c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800740c:	2b00      	cmp	r3, #0
 800740e:	da0b      	bge.n	8007428 <USBD_StdEPReq+0x1a0>
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	3310      	adds	r3, #16
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	3304      	adds	r3, #4
 8007426:	e00b      	b.n	8007440 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	3304      	adds	r3, #4
 8007440:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2202      	movs	r2, #2
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fbfb 	bl	8007c4a <USBD_CtlSendData>
              break;
 8007454:	e06a      	b.n	800752c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	da11      	bge.n	8007482 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	f003 020f 	and.w	r2, r3, #15
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	3318      	adds	r3, #24
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d117      	bne.n	80074a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb7b 	bl	8007b76 <USBD_CtlError>
                  break;
 8007480:	e054      	b.n	800752c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fb68 	bl	8007b76 <USBD_CtlError>
                  break;
 80074a6:	e041      	b.n	800752c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da0b      	bge.n	80074c8 <USBD_StdEPReq+0x240>
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	3310      	adds	r3, #16
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	e00b      	b.n	80074e0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	3304      	adds	r3, #4
 80074e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <USBD_StdEPReq+0x266>
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d103      	bne.n	80074f6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e00e      	b.n	8007514 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 f84e 	bl	800859c <USBD_LL_IsStallEP>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	e002      	b.n	8007514 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2202      	movs	r2, #2
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fb95 	bl	8007c4a <USBD_CtlSendData>
              break;
 8007520:	e004      	b.n	800752c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fb26 	bl	8007b76 <USBD_CtlError>
              break;
 800752a:	bf00      	nop
          }
          break;
 800752c:	e004      	b.n	8007538 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fb20 	bl	8007b76 <USBD_CtlError>
          break;
 8007536:	bf00      	nop
      }
      break;
 8007538:	e004      	b.n	8007544 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fb1a 	bl	8007b76 <USBD_CtlError>
      break;
 8007542:	bf00      	nop
  }

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	885b      	ldrh	r3, [r3, #2]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	2b06      	cmp	r3, #6
 8007572:	f200 8128 	bhi.w	80077c6 <USBD_GetDescriptor+0x276>
 8007576:	a201      	add	r2, pc, #4	; (adr r2, 800757c <USBD_GetDescriptor+0x2c>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	08007599 	.word	0x08007599
 8007580:	080075b1 	.word	0x080075b1
 8007584:	080075f1 	.word	0x080075f1
 8007588:	080077c7 	.word	0x080077c7
 800758c:	080077c7 	.word	0x080077c7
 8007590:	08007767 	.word	0x08007767
 8007594:	08007793 	.word	0x08007793
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	7c12      	ldrb	r2, [r2, #16]
 80075a4:	f107 0108 	add.w	r1, r7, #8
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
 80075ac:	60f8      	str	r0, [r7, #12]
      break;
 80075ae:	e112      	b.n	80077d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	7c1b      	ldrb	r3, [r3, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10d      	bne.n	80075d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f107 0208 	add.w	r2, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3301      	adds	r3, #1
 80075ce:	2202      	movs	r2, #2
 80075d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075d2:	e100      	b.n	80077d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	f107 0208 	add.w	r2, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	2202      	movs	r2, #2
 80075ec:	701a      	strb	r2, [r3, #0]
      break;
 80075ee:	e0f2      	b.n	80077d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	885b      	ldrh	r3, [r3, #2]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	f200 80ac 	bhi.w	8007754 <USBD_GetDescriptor+0x204>
 80075fc:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <USBD_GetDescriptor+0xb4>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	0800761d 	.word	0x0800761d
 8007608:	08007651 	.word	0x08007651
 800760c:	08007685 	.word	0x08007685
 8007610:	080076b9 	.word	0x080076b9
 8007614:	080076ed 	.word	0x080076ed
 8007618:	08007721 	.word	0x08007721
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7c12      	ldrb	r2, [r2, #16]
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763e:	e091      	b.n	8007764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa97 	bl	8007b76 <USBD_CtlError>
            err++;
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	3301      	adds	r3, #1
 800764c:	72fb      	strb	r3, [r7, #11]
          break;
 800764e:	e089      	b.n	8007764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7c12      	ldrb	r2, [r2, #16]
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007672:	e077      	b.n	8007764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa7d 	bl	8007b76 <USBD_CtlError>
            err++;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	3301      	adds	r3, #1
 8007680:	72fb      	strb	r3, [r7, #11]
          break;
 8007682:	e06f      	b.n	8007764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e05d      	b.n	8007764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa63 	bl	8007b76 <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e055      	b.n	8007764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 0108 	add.w	r1, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076da:	e043      	b.n	8007764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa49 	bl	8007b76 <USBD_CtlError>
            err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ea:	e03b      	b.n	8007764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770e:	e029      	b.n	8007764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa2f 	bl	8007b76 <USBD_CtlError>
            err++;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	3301      	adds	r3, #1
 800771c:	72fb      	strb	r3, [r7, #11]
          break;
 800771e:	e021      	b.n	8007764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007742:	e00f      	b.n	8007764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa15 	bl	8007b76 <USBD_CtlError>
            err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
          break;
 8007752:	e007      	b.n	8007764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa0d 	bl	8007b76 <USBD_CtlError>
          err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007762:	e038      	b.n	80077d6 <USBD_GetDescriptor+0x286>
 8007764:	e037      	b.n	80077d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7c1b      	ldrb	r3, [r3, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	f107 0208 	add.w	r2, r7, #8
 800777a:	4610      	mov	r0, r2
 800777c:	4798      	blx	r3
 800777e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007780:	e029      	b.n	80077d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f9f6 	bl	8007b76 <USBD_CtlError>
        err++;
 800778a:	7afb      	ldrb	r3, [r7, #11]
 800778c:	3301      	adds	r3, #1
 800778e:	72fb      	strb	r3, [r7, #11]
      break;
 8007790:	e021      	b.n	80077d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7c1b      	ldrb	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10d      	bne.n	80077b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	f107 0208 	add.w	r2, r7, #8
 80077a6:	4610      	mov	r0, r2
 80077a8:	4798      	blx	r3
 80077aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	2207      	movs	r2, #7
 80077b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077b4:	e00f      	b.n	80077d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f9dc 	bl	8007b76 <USBD_CtlError>
        err++;
 80077be:	7afb      	ldrb	r3, [r7, #11]
 80077c0:	3301      	adds	r3, #1
 80077c2:	72fb      	strb	r3, [r7, #11]
      break;
 80077c4:	e007      	b.n	80077d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f9d4 	bl	8007b76 <USBD_CtlError>
      err++;
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	3301      	adds	r3, #1
 80077d2:	72fb      	strb	r3, [r7, #11]
      break;
 80077d4:	bf00      	nop
  }

  if (err != 0U)
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11c      	bne.n	8007816 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80077dc:	893b      	ldrh	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d011      	beq.n	8007806 <USBD_GetDescriptor+0x2b6>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00d      	beq.n	8007806 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	88da      	ldrh	r2, [r3, #6]
 80077ee:	893b      	ldrh	r3, [r7, #8]
 80077f0:	4293      	cmp	r3, r2
 80077f2:	bf28      	it	cs
 80077f4:	4613      	movcs	r3, r2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077fa:	893b      	ldrh	r3, [r7, #8]
 80077fc:	461a      	mov	r2, r3
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fa22 	bl	8007c4a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	88db      	ldrh	r3, [r3, #6]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa79 	bl	8007d06 <USBD_CtlSendStatus>
 8007814:	e000      	b.n	8007818 <USBD_GetDescriptor+0x2c8>
    return;
 8007816:	bf00      	nop
    }
  }
}
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop

08007820 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	889b      	ldrh	r3, [r3, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d130      	bne.n	8007894 <USBD_SetAddress+0x74>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	88db      	ldrh	r3, [r3, #6]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d12c      	bne.n	8007894 <USBD_SetAddress+0x74>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	885b      	ldrh	r3, [r3, #2]
 800783e:	2b7f      	cmp	r3, #127	; 0x7f
 8007840:	d828      	bhi.n	8007894 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	885b      	ldrh	r3, [r3, #2]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007854:	2b03      	cmp	r3, #3
 8007856:	d104      	bne.n	8007862 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f98b 	bl	8007b76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007860:	e01d      	b.n	800789e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7bfa      	ldrb	r2, [r7, #15]
 8007866:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fec0 	bl	80085f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa46 	bl	8007d06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007888:	e009      	b.n	800789e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007892:	e004      	b.n	800789e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f96d 	bl	8007b76 <USBD_CtlError>
  }
}
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	4b41      	ldr	r3, [pc, #260]	; (80079c0 <USBD_SetConfig+0x118>)
 80078ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078bc:	4b40      	ldr	r3, [pc, #256]	; (80079c0 <USBD_SetConfig+0x118>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d904      	bls.n	80078ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f955 	bl	8007b76 <USBD_CtlError>
 80078cc:	e075      	b.n	80079ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d002      	beq.n	80078de <USBD_SetConfig+0x36>
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d023      	beq.n	8007924 <USBD_SetConfig+0x7c>
 80078dc:	e062      	b.n	80079a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80078de:	4b38      	ldr	r3, [pc, #224]	; (80079c0 <USBD_SetConfig+0x118>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01a      	beq.n	800791c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80078e6:	4b36      	ldr	r3, [pc, #216]	; (80079c0 <USBD_SetConfig+0x118>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2203      	movs	r2, #3
 80078f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078f8:	4b31      	ldr	r3, [pc, #196]	; (80079c0 <USBD_SetConfig+0x118>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff f9e7 	bl	8006cd2 <USBD_SetClassConfig>
 8007904:	4603      	mov	r3, r0
 8007906:	2b02      	cmp	r3, #2
 8007908:	d104      	bne.n	8007914 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f932 	bl	8007b76 <USBD_CtlError>
            return;
 8007912:	e052      	b.n	80079ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9f6 	bl	8007d06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800791a:	e04e      	b.n	80079ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f9f2 	bl	8007d06 <USBD_CtlSendStatus>
        break;
 8007922:	e04a      	b.n	80079ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007924:	4b26      	ldr	r3, [pc, #152]	; (80079c0 <USBD_SetConfig+0x118>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d112      	bne.n	8007952 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007934:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <USBD_SetConfig+0x118>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800793e:	4b20      	ldr	r3, [pc, #128]	; (80079c0 <USBD_SetConfig+0x118>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff f9e3 	bl	8006d10 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f9db 	bl	8007d06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007950:	e033      	b.n	80079ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007952:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <USBD_SetConfig+0x118>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	d01d      	beq.n	800799c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff f9d1 	bl	8006d10 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <USBD_SetConfig+0x118>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007978:	4b11      	ldr	r3, [pc, #68]	; (80079c0 <USBD_SetConfig+0x118>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff f9a7 	bl	8006cd2 <USBD_SetClassConfig>
 8007984:	4603      	mov	r3, r0
 8007986:	2b02      	cmp	r3, #2
 8007988:	d104      	bne.n	8007994 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f8f2 	bl	8007b76 <USBD_CtlError>
            return;
 8007992:	e012      	b.n	80079ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9b6 	bl	8007d06 <USBD_CtlSendStatus>
        break;
 800799a:	e00e      	b.n	80079ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9b2 	bl	8007d06 <USBD_CtlSendStatus>
        break;
 80079a2:	e00a      	b.n	80079ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8e5 	bl	8007b76 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <USBD_SetConfig+0x118>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff f9ac 	bl	8006d10 <USBD_ClrClassConfig>
        break;
 80079b8:	bf00      	nop
    }
  }
}
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	200005dc 	.word	0x200005dc

080079c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d004      	beq.n	80079e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8cc 	bl	8007b76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079de:	e022      	b.n	8007a26 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	dc02      	bgt.n	80079f0 <USBD_GetConfig+0x2c>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dc03      	bgt.n	80079f6 <USBD_GetConfig+0x32>
 80079ee:	e015      	b.n	8007a1c <USBD_GetConfig+0x58>
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d00b      	beq.n	8007a0c <USBD_GetConfig+0x48>
 80079f4:	e012      	b.n	8007a1c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3308      	adds	r3, #8
 8007a00:	2201      	movs	r2, #1
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f920 	bl	8007c4a <USBD_CtlSendData>
        break;
 8007a0a:	e00c      	b.n	8007a26 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	2201      	movs	r2, #1
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f918 	bl	8007c4a <USBD_CtlSendData>
        break;
 8007a1a:	e004      	b.n	8007a26 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f8a9 	bl	8007b76 <USBD_CtlError>
        break;
 8007a24:	bf00      	nop
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d81e      	bhi.n	8007a82 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	88db      	ldrh	r3, [r3, #6]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d004      	beq.n	8007a56 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f891 	bl	8007b76 <USBD_CtlError>
        break;
 8007a54:	e01a      	b.n	8007a8c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f043 0202 	orr.w	r2, r3, #2
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	330c      	adds	r3, #12
 8007a76:	2202      	movs	r2, #2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8e5 	bl	8007c4a <USBD_CtlSendData>
      break;
 8007a80:	e004      	b.n	8007a8c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f876 	bl	8007b76 <USBD_CtlError>
      break;
 8007a8a:	bf00      	nop
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	885b      	ldrh	r3, [r3, #2]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d106      	bne.n	8007ab4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f929 	bl	8007d06 <USBD_CtlSendStatus>
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007acc:	3b01      	subs	r3, #1
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d80b      	bhi.n	8007aea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d10c      	bne.n	8007af4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f90f 	bl	8007d06 <USBD_CtlSendStatus>
      }
      break;
 8007ae8:	e004      	b.n	8007af4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f842 	bl	8007b76 <USBD_CtlError>
      break;
 8007af2:	e000      	b.n	8007af6 <USBD_ClrFeature+0x3a>
      break;
 8007af4:	bf00      	nop
  }
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	785a      	ldrb	r2, [r3, #1]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	3303      	adds	r3, #3
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	3304      	adds	r3, #4
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	3305      	adds	r3, #5
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	4413      	add	r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	3306      	adds	r3, #6
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	3307      	adds	r3, #7
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4413      	add	r3, r2
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	80da      	strh	r2, [r3, #6]

}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007b80:	2180      	movs	r1, #128	; 0x80
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fccc 	bl	8008520 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fcc8 	bl	8008520 <USBD_LL_StallEP>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d032      	beq.n	8007c14 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f834 	bl	8007c1c <USBD_GetLen>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	75fa      	strb	r2, [r7, #23]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	7812      	ldrb	r2, [r2, #0]
 8007bd2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	75fa      	strb	r2, [r7, #23]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4413      	add	r3, r2
 8007be0:	2203      	movs	r2, #3
 8007be2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007be4:	e012      	b.n	8007c0c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	60fa      	str	r2, [r7, #12]
 8007bec:	7dfa      	ldrb	r2, [r7, #23]
 8007bee:	1c51      	adds	r1, r2, #1
 8007bf0:	75f9      	strb	r1, [r7, #23]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	75fa      	strb	r2, [r7, #23]
 8007c02:	461a      	mov	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4413      	add	r3, r2
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e8      	bne.n	8007be6 <USBD_GetString+0x4e>
    }
  }
}
 8007c14:	bf00      	nop
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c28:	e005      	b.n	8007c36 <USBD_GetLen+0x1a>
  {
    len++;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3301      	adds	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1f5      	bne.n	8007c2a <USBD_GetLen+0xe>
  }

  return len;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	4613      	mov	r3, r2
 8007c56:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c60:	88fa      	ldrh	r2, [r7, #6]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c66:	88fa      	ldrh	r2, [r7, #6]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	2100      	movs	r1, #0
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fcdd 	bl	8008632 <USBD_LL_Transmit>

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	2100      	movs	r1, #0
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fccb 	bl	8008632 <USBD_LL_Transmit>

  return USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007cbc:	88fa      	ldrh	r2, [r7, #6]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007cc4:	88fa      	ldrh	r2, [r7, #6]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fcd0 	bl	8008678 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	4613      	mov	r3, r2
 8007cee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fcbe 	bl	8008678 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2204      	movs	r2, #4
 8007d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d16:	2300      	movs	r3, #0
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fc88 	bl	8008632 <USBD_LL_Transmit>

  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2205      	movs	r2, #5
 8007d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc98 	bl	8008678 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4912      	ldr	r1, [pc, #72]	; (8007da4 <MX_USB_DEVICE_Init+0x50>)
 8007d5c:	4812      	ldr	r0, [pc, #72]	; (8007da8 <MX_USB_DEVICE_Init+0x54>)
 8007d5e:	f7fe ff5e 	bl	8006c1e <USBD_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d68:	f7f8 fcb6 	bl	80006d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d6c:	490f      	ldr	r1, [pc, #60]	; (8007dac <MX_USB_DEVICE_Init+0x58>)
 8007d6e:	480e      	ldr	r0, [pc, #56]	; (8007da8 <MX_USB_DEVICE_Init+0x54>)
 8007d70:	f7fe ff80 	bl	8006c74 <USBD_RegisterClass>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d7a:	f7f8 fcad 	bl	80006d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d7e:	490c      	ldr	r1, [pc, #48]	; (8007db0 <MX_USB_DEVICE_Init+0x5c>)
 8007d80:	4809      	ldr	r0, [pc, #36]	; (8007da8 <MX_USB_DEVICE_Init+0x54>)
 8007d82:	f7fe feb1 	bl	8006ae8 <USBD_CDC_RegisterInterface>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d8c:	f7f8 fca4 	bl	80006d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d90:	4805      	ldr	r0, [pc, #20]	; (8007da8 <MX_USB_DEVICE_Init+0x54>)
 8007d92:	f7fe ff88 	bl	8006ca6 <USBD_Start>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d9c:	f7f8 fc9c 	bl	80006d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007da0:	bf00      	nop
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000138 	.word	0x20000138
 8007da8:	200005e0 	.word	0x200005e0
 8007dac:	20000024 	.word	0x20000024
 8007db0:	20000128 	.word	0x20000128

08007db4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007db8:	2200      	movs	r2, #0
 8007dba:	4905      	ldr	r1, [pc, #20]	; (8007dd0 <CDC_Init_FS+0x1c>)
 8007dbc:	4805      	ldr	r0, [pc, #20]	; (8007dd4 <CDC_Init_FS+0x20>)
 8007dbe:	f7fe fea9 	bl	8006b14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dc2:	4905      	ldr	r1, [pc, #20]	; (8007dd8 <CDC_Init_FS+0x24>)
 8007dc4:	4803      	ldr	r0, [pc, #12]	; (8007dd4 <CDC_Init_FS+0x20>)
 8007dc6:	f7fe febe 	bl	8006b46 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	200009a4 	.word	0x200009a4
 8007dd4:	200005e0 	.word	0x200005e0
 8007dd8:	200008a4 	.word	0x200008a4

08007ddc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007de0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr
	...

08007dec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	6039      	str	r1, [r7, #0]
 8007df6:	71fb      	strb	r3, [r7, #7]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	2b23      	cmp	r3, #35	; 0x23
 8007e00:	d84a      	bhi.n	8007e98 <CDC_Control_FS+0xac>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <CDC_Control_FS+0x1c>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e99 	.word	0x08007e99
 8007e0c:	08007e99 	.word	0x08007e99
 8007e10:	08007e99 	.word	0x08007e99
 8007e14:	08007e99 	.word	0x08007e99
 8007e18:	08007e99 	.word	0x08007e99
 8007e1c:	08007e99 	.word	0x08007e99
 8007e20:	08007e99 	.word	0x08007e99
 8007e24:	08007e99 	.word	0x08007e99
 8007e28:	08007e99 	.word	0x08007e99
 8007e2c:	08007e99 	.word	0x08007e99
 8007e30:	08007e99 	.word	0x08007e99
 8007e34:	08007e99 	.word	0x08007e99
 8007e38:	08007e99 	.word	0x08007e99
 8007e3c:	08007e99 	.word	0x08007e99
 8007e40:	08007e99 	.word	0x08007e99
 8007e44:	08007e99 	.word	0x08007e99
 8007e48:	08007e99 	.word	0x08007e99
 8007e4c:	08007e99 	.word	0x08007e99
 8007e50:	08007e99 	.word	0x08007e99
 8007e54:	08007e99 	.word	0x08007e99
 8007e58:	08007e99 	.word	0x08007e99
 8007e5c:	08007e99 	.word	0x08007e99
 8007e60:	08007e99 	.word	0x08007e99
 8007e64:	08007e99 	.word	0x08007e99
 8007e68:	08007e99 	.word	0x08007e99
 8007e6c:	08007e99 	.word	0x08007e99
 8007e70:	08007e99 	.word	0x08007e99
 8007e74:	08007e99 	.word	0x08007e99
 8007e78:	08007e99 	.word	0x08007e99
 8007e7c:	08007e99 	.word	0x08007e99
 8007e80:	08007e99 	.word	0x08007e99
 8007e84:	08007e99 	.word	0x08007e99
 8007e88:	08007e99 	.word	0x08007e99
 8007e8c:	08007e99 	.word	0x08007e99
 8007e90:	08007e99 	.word	0x08007e99
 8007e94:	08007e99 	.word	0x08007e99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e98:	bf00      	nop
  }

  return (USBD_OK);
 8007e9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop

08007ea8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	481e      	ldr	r0, [pc, #120]	; (8007f30 <CDC_Receive_FS+0x88>)
 8007eb6:	f7fe fe46 	bl	8006b46 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007eba:	481d      	ldr	r0, [pc, #116]	; (8007f30 <CDC_Receive_FS+0x88>)
 8007ebc:	f7fe fe85 	bl	8006bca <USBD_CDC_ReceivePacket>

	for(uint16_t i = 0; i < *Len; i++)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	81fb      	strh	r3, [r7, #14]
 8007ec4:	e024      	b.n	8007f10 <CDC_Receive_FS+0x68>
	{
		UartUsb.rxBuffer[UartUsb.rxBufferHead++] = Buf[i];
 8007ec6:	89fb      	ldrh	r3, [r7, #14]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	441a      	add	r2, r3
 8007ecc:	4b19      	ldr	r3, [pc, #100]	; (8007f34 <CDC_Receive_FS+0x8c>)
 8007ece:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	1c59      	adds	r1, r3, #1
 8007ed6:	b288      	uxth	r0, r1
 8007ed8:	4916      	ldr	r1, [pc, #88]	; (8007f34 <CDC_Receive_FS+0x8c>)
 8007eda:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
 8007ede:	4619      	mov	r1, r3
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <CDC_Receive_FS+0x8c>)
 8007ee4:	440b      	add	r3, r1
 8007ee6:	729a      	strb	r2, [r3, #10]
		UartUsb.rxBufferHead %= UART_BUFFER_SIZE;
 8007ee8:	4b12      	ldr	r3, [pc, #72]	; (8007f34 <CDC_Receive_FS+0x8c>)
 8007eea:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <CDC_Receive_FS+0x90>)
 8007ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef6:	09d9      	lsrs	r1, r3, #7
 8007ef8:	460b      	mov	r3, r1
 8007efa:	019b      	lsls	r3, r3, #6
 8007efc:	440b      	add	r3, r1
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <CDC_Receive_FS+0x8c>)
 8007f06:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	for(uint16_t i = 0; i < *Len; i++)
 8007f0a:	89fb      	ldrh	r3, [r7, #14]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	81fb      	strh	r3, [r7, #14]
 8007f10:	89fa      	ldrh	r2, [r7, #14]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d3d5      	bcc.n	8007ec6 <CDC_Receive_FS+0x1e>
	}
	UartUsb.rxType = DATA_USB;
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <CDC_Receive_FS+0x8c>)
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	721a      	strb	r2, [r3, #8]
	handleUsbInterrupt(&UartUsb);
 8007f20:	4804      	ldr	r0, [pc, #16]	; (8007f34 <CDC_Receive_FS+0x8c>)
 8007f22:	f000 f843 	bl	8007fac <handleUsbInterrupt>

  return (USBD_OK);
 8007f26:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	200005e0 	.word	0x200005e0
 8007f34:	200004c0 	.word	0x200004c0
 8007f38:	fc0fc0fd 	.word	0xfc0fc0fd

08007f3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	74fb      	strb	r3, [r7, #19]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f4c:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <CDC_Transmit_FS+0x68>)
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f52:	60fb      	str	r3, [r7, #12]
  if (hcdc->TxState > 1){
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d901      	bls.n	8007f62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e01c      	b.n	8007f9c <CDC_Transmit_FS+0x60>
  }

  uint32_t to = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]
  while(hcdc->TxState != 0)
 8007f66:	e008      	b.n	8007f7a <CDC_Transmit_FS+0x3e>
  {
	  to++;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
	  if(to > 90000) //wait for a while if USB busy
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	4a0d      	ldr	r2, [pc, #52]	; (8007fa8 <CDC_Transmit_FS+0x6c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d901      	bls.n	8007f7a <CDC_Transmit_FS+0x3e>
		  return USBD_FAIL;
 8007f76:	2302      	movs	r3, #2
 8007f78:	e010      	b.n	8007f9c <CDC_Transmit_FS+0x60>
  while(hcdc->TxState != 0)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1f1      	bne.n	8007f68 <CDC_Transmit_FS+0x2c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f84:	887b      	ldrh	r3, [r7, #2]
 8007f86:	461a      	mov	r2, r3
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <CDC_Transmit_FS+0x68>)
 8007f8c:	f7fe fdc2 	bl	8006b14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f90:	4804      	ldr	r0, [pc, #16]	; (8007fa4 <CDC_Transmit_FS+0x68>)
 8007f92:	f7fe fdeb 	bl	8006b6c <USBD_CDC_TransmitPacket>
 8007f96:	4603      	mov	r3, r0
 8007f98:	74fb      	strb	r3, [r7, #19]
  /* USER CODE END 7 */
  return result;
 8007f9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	200005e0 	.word	0x200005e0
 8007fa8:	00015f90 	.word	0x00015f90

08007fac <handleUsbInterrupt>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
static void handleUsbInterrupt(Uart *port)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	if(port->rxBufferHead != 0)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d018      	beq.n	8007ff2 <handleUsbInterrupt+0x46>
	{
		if(((port->rxBuffer[port->rxBufferHead - 1] == '\r') || (port->rxBuffer[port->rxBufferHead - 1] == '\n'))) //data ends with \r or \n, process as data
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	7a9b      	ldrb	r3, [r3, #10]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b0d      	cmp	r3, #13
 8007fd4:	d00a      	beq.n	8007fec <handleUsbInterrupt+0x40>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	7a9b      	ldrb	r3, [r3, #10]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b0a      	cmp	r3, #10
 8007fea:	d102      	bne.n	8007ff2 <handleUsbInterrupt+0x46>
		{
			port->rxType = DATA_TERM;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	721a      	strb	r2, [r3, #8]
		}
	}
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr

08007ffc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2212      	movs	r2, #18
 800800c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800800e:	4b03      	ldr	r3, [pc, #12]	; (800801c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000154 	.word	0x20000154

08008020 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2204      	movs	r2, #4
 8008030:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008032:	4b03      	ldr	r3, [pc, #12]	; (8008040 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000168 	.word	0x20000168

08008044 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4907      	ldr	r1, [pc, #28]	; (8008078 <USBD_FS_ProductStrDescriptor+0x34>)
 800805a:	4808      	ldr	r0, [pc, #32]	; (800807c <USBD_FS_ProductStrDescriptor+0x38>)
 800805c:	f7ff fd9c 	bl	8007b98 <USBD_GetString>
 8008060:	e004      	b.n	800806c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	4904      	ldr	r1, [pc, #16]	; (8008078 <USBD_FS_ProductStrDescriptor+0x34>)
 8008066:	4805      	ldr	r0, [pc, #20]	; (800807c <USBD_FS_ProductStrDescriptor+0x38>)
 8008068:	f7ff fd96 	bl	8007b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000aa4 	.word	0x20000aa4
 800807c:	08009868 	.word	0x08009868

08008080 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	4603      	mov	r3, r0
 8008088:	6039      	str	r1, [r7, #0]
 800808a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	4904      	ldr	r1, [pc, #16]	; (80080a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008090:	4804      	ldr	r0, [pc, #16]	; (80080a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008092:	f7ff fd81 	bl	8007b98 <USBD_GetString>
  return USBD_StrDesc;
 8008096:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000aa4 	.word	0x20000aa4
 80080a4:	08009884 	.word	0x08009884

080080a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	221a      	movs	r2, #26
 80080b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080ba:	f000 f843 	bl	8008144 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080be:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	2000016c 	.word	0x2000016c

080080cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	4907      	ldr	r1, [pc, #28]	; (8008100 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080e2:	4808      	ldr	r0, [pc, #32]	; (8008104 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080e4:	f7ff fd58 	bl	8007b98 <USBD_GetString>
 80080e8:	e004      	b.n	80080f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	4904      	ldr	r1, [pc, #16]	; (8008100 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ee:	4805      	ldr	r0, [pc, #20]	; (8008104 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080f0:	f7ff fd52 	bl	8007b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000aa4 	.word	0x20000aa4
 8008104:	08009868 	.word	0x08009868

08008108 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	4907      	ldr	r1, [pc, #28]	; (800813c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800811e:	4808      	ldr	r0, [pc, #32]	; (8008140 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008120:	f7ff fd3a 	bl	8007b98 <USBD_GetString>
 8008124:	e004      	b.n	8008130 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	4904      	ldr	r1, [pc, #16]	; (800813c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800812a:	4805      	ldr	r0, [pc, #20]	; (8008140 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800812c:	f7ff fd34 	bl	8007b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000aa4 	.word	0x20000aa4
 8008140:	08009868 	.word	0x08009868

08008144 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800814a:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <Get_SerialNum+0x44>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008150:	4b0e      	ldr	r3, [pc, #56]	; (800818c <Get_SerialNum+0x48>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008156:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <Get_SerialNum+0x4c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800816a:	2208      	movs	r2, #8
 800816c:	4909      	ldr	r1, [pc, #36]	; (8008194 <Get_SerialNum+0x50>)
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f814 	bl	800819c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008174:	2204      	movs	r2, #4
 8008176:	4908      	ldr	r1, [pc, #32]	; (8008198 <Get_SerialNum+0x54>)
 8008178:	68b8      	ldr	r0, [r7, #8]
 800817a:	f000 f80f 	bl	800819c <IntToUnicode>
  }
}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	1ffff7e8 	.word	0x1ffff7e8
 800818c:	1ffff7ec 	.word	0x1ffff7ec
 8008190:	1ffff7f0 	.word	0x1ffff7f0
 8008194:	2000016e 	.word	0x2000016e
 8008198:	2000017e 	.word	0x2000017e

0800819c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
 80081b2:	e027      	b.n	8008204 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	0f1b      	lsrs	r3, r3, #28
 80081b8:	2b09      	cmp	r3, #9
 80081ba:	d80b      	bhi.n	80081d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	0f1b      	lsrs	r3, r3, #28
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	4619      	mov	r1, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	440b      	add	r3, r1
 80081cc:	3230      	adds	r2, #48	; 0x30
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e00a      	b.n	80081ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	0f1b      	lsrs	r3, r3, #28
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	4619      	mov	r1, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	440b      	add	r3, r1
 80081e4:	3237      	adds	r2, #55	; 0x37
 80081e6:	b2d2      	uxtb	r2, r2
 80081e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	3301      	adds	r3, #1
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	3301      	adds	r3, #1
 8008202:	75fb      	strb	r3, [r7, #23]
 8008204:	7dfa      	ldrb	r2, [r7, #23]
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	429a      	cmp	r2, r3
 800820a:	d3d3      	bcc.n	80081b4 <IntToUnicode+0x18>
  }
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	371c      	adds	r7, #28
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr

08008218 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a11      	ldr	r2, [pc, #68]	; (800826c <HAL_PCD_MspInit+0x54>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d11b      	bne.n	8008262 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800822a:	4b11      	ldr	r3, [pc, #68]	; (8008270 <HAL_PCD_MspInit+0x58>)
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	4a10      	ldr	r2, [pc, #64]	; (8008270 <HAL_PCD_MspInit+0x58>)
 8008230:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008234:	61d3      	str	r3, [r2, #28]
 8008236:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <HAL_PCD_MspInit+0x58>)
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008242:	2200      	movs	r2, #0
 8008244:	2100      	movs	r1, #0
 8008246:	2013      	movs	r0, #19
 8008248:	f7f9 fc3f 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800824c:	2013      	movs	r0, #19
 800824e:	f7f9 fc58 	bl	8001b02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008252:	2200      	movs	r2, #0
 8008254:	2100      	movs	r1, #0
 8008256:	2014      	movs	r0, #20
 8008258:	f7f9 fc37 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800825c:	2014      	movs	r0, #20
 800825e:	f7f9 fc50 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40005c00 	.word	0x40005c00
 8008270:	40021000 	.word	0x40021000

08008274 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f7fe fd53 	bl	8006d36 <USBD_LL_SetupStage>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80082aa:	78fa      	ldrb	r2, [r7, #3]
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	440b      	add	r3, r1
 80082b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7fe fd85 	bl	8006dd0 <USBD_LL_DataOutStage>
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	440b      	add	r3, r1
 80082ee:	333c      	adds	r3, #60	; 0x3c
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	4619      	mov	r1, r3
 80082f6:	f7fe fddc 	bl	8006eb2 <USBD_LL_DataInStage>
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe feec 	bl	80070ee <USBD_LL_SOF>
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008326:	2301      	movs	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d001      	beq.n	8008336 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008332:	f7f8 f9d1 	bl	80006d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800833c:	7bfa      	ldrb	r2, [r7, #15]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fe9c 	bl	800707e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fe55 	bl	8006ffc <USBD_LL_Reset>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fe96 	bl	800709c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <HAL_PCD_SuspendCallback+0x30>)
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	4a03      	ldr	r2, [pc, #12]	; (800838c <HAL_PCD_SuspendCallback+0x30>)
 800837e:	f043 0306 	orr.w	r3, r3, #6
 8008382:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	e000ed00 	.word	0xe000ed00

08008390 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fe90 	bl	80070c4 <USBD_LL_Resume>
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80083b4:	4a28      	ldr	r2, [pc, #160]	; (8008458 <USBD_LL_Init+0xac>)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a26      	ldr	r2, [pc, #152]	; (8008458 <USBD_LL_Init+0xac>)
 80083c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80083c4:	4b24      	ldr	r3, [pc, #144]	; (8008458 <USBD_LL_Init+0xac>)
 80083c6:	4a25      	ldr	r2, [pc, #148]	; (800845c <USBD_LL_Init+0xb0>)
 80083c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083ca:	4b23      	ldr	r3, [pc, #140]	; (8008458 <USBD_LL_Init+0xac>)
 80083cc:	2208      	movs	r2, #8
 80083ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083d0:	4b21      	ldr	r3, [pc, #132]	; (8008458 <USBD_LL_Init+0xac>)
 80083d2:	2202      	movs	r2, #2
 80083d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083d6:	4b20      	ldr	r3, [pc, #128]	; (8008458 <USBD_LL_Init+0xac>)
 80083d8:	2200      	movs	r2, #0
 80083da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083dc:	4b1e      	ldr	r3, [pc, #120]	; (8008458 <USBD_LL_Init+0xac>)
 80083de:	2200      	movs	r2, #0
 80083e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083e2:	4b1d      	ldr	r3, [pc, #116]	; (8008458 <USBD_LL_Init+0xac>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083e8:	481b      	ldr	r0, [pc, #108]	; (8008458 <USBD_LL_Init+0xac>)
 80083ea:	f7f9 fba4 	bl	8001b36 <HAL_PCD_Init>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083f4:	f7f8 f970 	bl	80006d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083fe:	2318      	movs	r3, #24
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	f7fb f8c3 	bl	800358e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800840e:	2358      	movs	r3, #88	; 0x58
 8008410:	2200      	movs	r2, #0
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	f7fb f8bb 	bl	800358e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800841e:	23c0      	movs	r3, #192	; 0xc0
 8008420:	2200      	movs	r2, #0
 8008422:	2181      	movs	r1, #129	; 0x81
 8008424:	f7fb f8b3 	bl	800358e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800842e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008432:	2200      	movs	r2, #0
 8008434:	2101      	movs	r1, #1
 8008436:	f7fb f8aa 	bl	800358e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008444:	2200      	movs	r2, #0
 8008446:	2182      	movs	r1, #130	; 0x82
 8008448:	f7fb f8a1 	bl	800358e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000ae4 	.word	0x20000ae4
 800845c:	40005c00 	.word	0x40005c00

08008460 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008476:	4618      	mov	r0, r3
 8008478:	f7f9 fc5c 	bl	8001d34 <HAL_PCD_Start>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f94e 	bl	8008724 <USBD_Get_USB_Status>
 8008488:	4603      	mov	r3, r0
 800848a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800848c:	7bbb      	ldrb	r3, [r7, #14]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	4608      	mov	r0, r1
 80084a0:	4611      	mov	r1, r2
 80084a2:	461a      	mov	r2, r3
 80084a4:	4603      	mov	r3, r0
 80084a6:	70fb      	strb	r3, [r7, #3]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70bb      	strb	r3, [r7, #2]
 80084ac:	4613      	mov	r3, r2
 80084ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084be:	78bb      	ldrb	r3, [r7, #2]
 80084c0:	883a      	ldrh	r2, [r7, #0]
 80084c2:	78f9      	ldrb	r1, [r7, #3]
 80084c4:	f7f9 fdb1 	bl	800202a <HAL_PCD_EP_Open>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 f928 	bl	8008724 <USBD_Get_USB_Status>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f7f9 fdef 	bl	80020e4 <HAL_PCD_EP_Close>
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 f909 	bl	8008724 <USBD_Get_USB_Status>
 8008512:	4603      	mov	r3, r0
 8008514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008516:	7bbb      	ldrb	r3, [r7, #14]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	4611      	mov	r1, r2
 800853e:	4618      	mov	r0, r3
 8008540:	f7f9 fe97 	bl	8002272 <HAL_PCD_EP_SetStall>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f8ea 	bl	8008724 <USBD_Get_USB_Status>
 8008550:	4603      	mov	r3, r0
 8008552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008554:	7bbb      	ldrb	r3, [r7, #14]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	460b      	mov	r3, r1
 8008568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008578:	78fa      	ldrb	r2, [r7, #3]
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f7f9 fed8 	bl	8002332 <HAL_PCD_EP_ClrStall>
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f8cb 	bl	8008724 <USBD_Get_USB_Status>
 800858e:	4603      	mov	r3, r0
 8008590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008592:	7bbb      	ldrb	r3, [r7, #14]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	da0c      	bge.n	80085d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085be:	68f9      	ldr	r1, [r7, #12]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	440b      	add	r3, r1
 80085cc:	3302      	adds	r3, #2
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	e00b      	b.n	80085ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085d8:	68f9      	ldr	r1, [r7, #12]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	440b      	add	r3, r1
 80085e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80085e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr

080085f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	4611      	mov	r1, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7f9 fce4 	bl	8001fe0 <HAL_PCD_SetAddress>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f880 	bl	8008724 <USBD_Get_USB_Status>
 8008624:	4603      	mov	r3, r0
 8008626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008628:	7bbb      	ldrb	r3, [r7, #14]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	461a      	mov	r2, r3
 800863e:	460b      	mov	r3, r1
 8008640:	72fb      	strb	r3, [r7, #11]
 8008642:	4613      	mov	r3, r2
 8008644:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008654:	893b      	ldrh	r3, [r7, #8]
 8008656:	7af9      	ldrb	r1, [r7, #11]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	f7f9 fdd3 	bl	8002204 <HAL_PCD_EP_Transmit>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f85d 	bl	8008724 <USBD_Get_USB_Status>
 800866a:	4603      	mov	r3, r0
 800866c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800866e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	607a      	str	r2, [r7, #4]
 8008682:	461a      	mov	r2, r3
 8008684:	460b      	mov	r3, r1
 8008686:	72fb      	strb	r3, [r7, #11]
 8008688:	4613      	mov	r3, r2
 800868a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800869a:	893b      	ldrh	r3, [r7, #8]
 800869c:	7af9      	ldrb	r1, [r7, #11]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	f7f9 fd68 	bl	8002174 <HAL_PCD_EP_Receive>
 80086a4:	4603      	mov	r3, r0
 80086a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f83a 	bl	8008724 <USBD_Get_USB_Status>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7f9 fd7e 	bl	80021d6 <HAL_PCD_EP_GetRxCount>
 80086da:	4603      	mov	r3, r0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <USBD_static_malloc+0x14>)
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr
 80086f8:	20000dd4 	.word	0x20000dd4

080086fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]

}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr

08008724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	2b03      	cmp	r3, #3
 8008736:	d817      	bhi.n	8008768 <USBD_Get_USB_Status+0x44>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <USBD_Get_USB_Status+0x1c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008751 	.word	0x08008751
 8008744:	08008757 	.word	0x08008757
 8008748:	0800875d 	.word	0x0800875d
 800874c:	08008763 	.word	0x08008763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e00b      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e008      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e005      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008762:	2302      	movs	r3, #2
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e002      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008768:	2302      	movs	r3, #2
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	bf00      	nop
  }
  return usb_status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop

0800877c <rand>:
 800877c:	4b16      	ldr	r3, [pc, #88]	; (80087d8 <rand+0x5c>)
 800877e:	b510      	push	{r4, lr}
 8008780:	681c      	ldr	r4, [r3, #0]
 8008782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008784:	b9b3      	cbnz	r3, 80087b4 <rand+0x38>
 8008786:	2018      	movs	r0, #24
 8008788:	f000 fa30 	bl	8008bec <malloc>
 800878c:	4602      	mov	r2, r0
 800878e:	6320      	str	r0, [r4, #48]	; 0x30
 8008790:	b920      	cbnz	r0, 800879c <rand+0x20>
 8008792:	2152      	movs	r1, #82	; 0x52
 8008794:	4b11      	ldr	r3, [pc, #68]	; (80087dc <rand+0x60>)
 8008796:	4812      	ldr	r0, [pc, #72]	; (80087e0 <rand+0x64>)
 8008798:	f000 f9c2 	bl	8008b20 <__assert_func>
 800879c:	4911      	ldr	r1, [pc, #68]	; (80087e4 <rand+0x68>)
 800879e:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <rand+0x6c>)
 80087a0:	e9c0 1300 	strd	r1, r3, [r0]
 80087a4:	4b11      	ldr	r3, [pc, #68]	; (80087ec <rand+0x70>)
 80087a6:	2100      	movs	r1, #0
 80087a8:	6083      	str	r3, [r0, #8]
 80087aa:	230b      	movs	r3, #11
 80087ac:	8183      	strh	r3, [r0, #12]
 80087ae:	2001      	movs	r0, #1
 80087b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80087b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80087b6:	480e      	ldr	r0, [pc, #56]	; (80087f0 <rand+0x74>)
 80087b8:	690b      	ldr	r3, [r1, #16]
 80087ba:	694c      	ldr	r4, [r1, #20]
 80087bc:	4358      	muls	r0, r3
 80087be:	4a0d      	ldr	r2, [pc, #52]	; (80087f4 <rand+0x78>)
 80087c0:	fb02 0004 	mla	r0, r2, r4, r0
 80087c4:	fba3 3202 	umull	r3, r2, r3, r2
 80087c8:	3301      	adds	r3, #1
 80087ca:	eb40 0002 	adc.w	r0, r0, r2
 80087ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80087d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80087d6:	bd10      	pop	{r4, pc}
 80087d8:	200001e0 	.word	0x200001e0
 80087dc:	0800999a 	.word	0x0800999a
 80087e0:	080099b1 	.word	0x080099b1
 80087e4:	abcd330e 	.word	0xabcd330e
 80087e8:	e66d1234 	.word	0xe66d1234
 80087ec:	0005deec 	.word	0x0005deec
 80087f0:	5851f42d 	.word	0x5851f42d
 80087f4:	4c957f2d 	.word	0x4c957f2d

080087f8 <std>:
 80087f8:	2300      	movs	r3, #0
 80087fa:	b510      	push	{r4, lr}
 80087fc:	4604      	mov	r4, r0
 80087fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008806:	6083      	str	r3, [r0, #8]
 8008808:	8181      	strh	r1, [r0, #12]
 800880a:	6643      	str	r3, [r0, #100]	; 0x64
 800880c:	81c2      	strh	r2, [r0, #14]
 800880e:	6183      	str	r3, [r0, #24]
 8008810:	4619      	mov	r1, r3
 8008812:	2208      	movs	r2, #8
 8008814:	305c      	adds	r0, #92	; 0x5c
 8008816:	f000 f8f4 	bl	8008a02 <memset>
 800881a:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <std+0x58>)
 800881c:	6224      	str	r4, [r4, #32]
 800881e:	6263      	str	r3, [r4, #36]	; 0x24
 8008820:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <std+0x5c>)
 8008822:	62a3      	str	r3, [r4, #40]	; 0x28
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <std+0x60>)
 8008826:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008828:	4b0c      	ldr	r3, [pc, #48]	; (800885c <std+0x64>)
 800882a:	6323      	str	r3, [r4, #48]	; 0x30
 800882c:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <std+0x68>)
 800882e:	429c      	cmp	r4, r3
 8008830:	d006      	beq.n	8008840 <std+0x48>
 8008832:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008836:	4294      	cmp	r4, r2
 8008838:	d002      	beq.n	8008840 <std+0x48>
 800883a:	33d0      	adds	r3, #208	; 0xd0
 800883c:	429c      	cmp	r4, r3
 800883e:	d105      	bne.n	800884c <std+0x54>
 8008840:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	f000 b966 	b.w	8008b18 <__retarget_lock_init_recursive>
 800884c:	bd10      	pop	{r4, pc}
 800884e:	bf00      	nop
 8008850:	0800897d 	.word	0x0800897d
 8008854:	0800899f 	.word	0x0800899f
 8008858:	080089d7 	.word	0x080089d7
 800885c:	080089fb 	.word	0x080089fb
 8008860:	20000ff4 	.word	0x20000ff4

08008864 <stdio_exit_handler>:
 8008864:	4a02      	ldr	r2, [pc, #8]	; (8008870 <stdio_exit_handler+0xc>)
 8008866:	4903      	ldr	r1, [pc, #12]	; (8008874 <stdio_exit_handler+0x10>)
 8008868:	4803      	ldr	r0, [pc, #12]	; (8008878 <stdio_exit_handler+0x14>)
 800886a:	f000 b869 	b.w	8008940 <_fwalk_sglue>
 800886e:	bf00      	nop
 8008870:	20000188 	.word	0x20000188
 8008874:	08008e59 	.word	0x08008e59
 8008878:	20000194 	.word	0x20000194

0800887c <cleanup_stdio>:
 800887c:	6841      	ldr	r1, [r0, #4]
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <cleanup_stdio+0x34>)
 8008880:	b510      	push	{r4, lr}
 8008882:	4299      	cmp	r1, r3
 8008884:	4604      	mov	r4, r0
 8008886:	d001      	beq.n	800888c <cleanup_stdio+0x10>
 8008888:	f000 fae6 	bl	8008e58 <_fflush_r>
 800888c:	68a1      	ldr	r1, [r4, #8]
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <cleanup_stdio+0x38>)
 8008890:	4299      	cmp	r1, r3
 8008892:	d002      	beq.n	800889a <cleanup_stdio+0x1e>
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fadf 	bl	8008e58 <_fflush_r>
 800889a:	68e1      	ldr	r1, [r4, #12]
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <cleanup_stdio+0x3c>)
 800889e:	4299      	cmp	r1, r3
 80088a0:	d004      	beq.n	80088ac <cleanup_stdio+0x30>
 80088a2:	4620      	mov	r0, r4
 80088a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a8:	f000 bad6 	b.w	8008e58 <_fflush_r>
 80088ac:	bd10      	pop	{r4, pc}
 80088ae:	bf00      	nop
 80088b0:	20000ff4 	.word	0x20000ff4
 80088b4:	2000105c 	.word	0x2000105c
 80088b8:	200010c4 	.word	0x200010c4

080088bc <global_stdio_init.part.0>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <global_stdio_init.part.0+0x30>)
 80088c0:	4c0b      	ldr	r4, [pc, #44]	; (80088f0 <global_stdio_init.part.0+0x34>)
 80088c2:	4a0c      	ldr	r2, [pc, #48]	; (80088f4 <global_stdio_init.part.0+0x38>)
 80088c4:	4620      	mov	r0, r4
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	2104      	movs	r1, #4
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7ff ff94 	bl	80087f8 <std>
 80088d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088d4:	2201      	movs	r2, #1
 80088d6:	2109      	movs	r1, #9
 80088d8:	f7ff ff8e 	bl	80087f8 <std>
 80088dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088e0:	2202      	movs	r2, #2
 80088e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e6:	2112      	movs	r1, #18
 80088e8:	f7ff bf86 	b.w	80087f8 <std>
 80088ec:	2000112c 	.word	0x2000112c
 80088f0:	20000ff4 	.word	0x20000ff4
 80088f4:	08008865 	.word	0x08008865

080088f8 <__sfp_lock_acquire>:
 80088f8:	4801      	ldr	r0, [pc, #4]	; (8008900 <__sfp_lock_acquire+0x8>)
 80088fa:	f000 b90e 	b.w	8008b1a <__retarget_lock_acquire_recursive>
 80088fe:	bf00      	nop
 8008900:	20001135 	.word	0x20001135

08008904 <__sfp_lock_release>:
 8008904:	4801      	ldr	r0, [pc, #4]	; (800890c <__sfp_lock_release+0x8>)
 8008906:	f000 b909 	b.w	8008b1c <__retarget_lock_release_recursive>
 800890a:	bf00      	nop
 800890c:	20001135 	.word	0x20001135

08008910 <__sinit>:
 8008910:	b510      	push	{r4, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	f7ff fff0 	bl	80088f8 <__sfp_lock_acquire>
 8008918:	6a23      	ldr	r3, [r4, #32]
 800891a:	b11b      	cbz	r3, 8008924 <__sinit+0x14>
 800891c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008920:	f7ff bff0 	b.w	8008904 <__sfp_lock_release>
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <__sinit+0x28>)
 8008926:	6223      	str	r3, [r4, #32]
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <__sinit+0x2c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1f5      	bne.n	800891c <__sinit+0xc>
 8008930:	f7ff ffc4 	bl	80088bc <global_stdio_init.part.0>
 8008934:	e7f2      	b.n	800891c <__sinit+0xc>
 8008936:	bf00      	nop
 8008938:	0800887d 	.word	0x0800887d
 800893c:	2000112c 	.word	0x2000112c

08008940 <_fwalk_sglue>:
 8008940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008944:	4607      	mov	r7, r0
 8008946:	4688      	mov	r8, r1
 8008948:	4614      	mov	r4, r2
 800894a:	2600      	movs	r6, #0
 800894c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008950:	f1b9 0901 	subs.w	r9, r9, #1
 8008954:	d505      	bpl.n	8008962 <_fwalk_sglue+0x22>
 8008956:	6824      	ldr	r4, [r4, #0]
 8008958:	2c00      	cmp	r4, #0
 800895a:	d1f7      	bne.n	800894c <_fwalk_sglue+0xc>
 800895c:	4630      	mov	r0, r6
 800895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008962:	89ab      	ldrh	r3, [r5, #12]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d907      	bls.n	8008978 <_fwalk_sglue+0x38>
 8008968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800896c:	3301      	adds	r3, #1
 800896e:	d003      	beq.n	8008978 <_fwalk_sglue+0x38>
 8008970:	4629      	mov	r1, r5
 8008972:	4638      	mov	r0, r7
 8008974:	47c0      	blx	r8
 8008976:	4306      	orrs	r6, r0
 8008978:	3568      	adds	r5, #104	; 0x68
 800897a:	e7e9      	b.n	8008950 <_fwalk_sglue+0x10>

0800897c <__sread>:
 800897c:	b510      	push	{r4, lr}
 800897e:	460c      	mov	r4, r1
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	f000 f87a 	bl	8008a7c <_read_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	bfab      	itete	ge
 800898c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800898e:	89a3      	ldrhlt	r3, [r4, #12]
 8008990:	181b      	addge	r3, r3, r0
 8008992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008996:	bfac      	ite	ge
 8008998:	6563      	strge	r3, [r4, #84]	; 0x54
 800899a:	81a3      	strhlt	r3, [r4, #12]
 800899c:	bd10      	pop	{r4, pc}

0800899e <__swrite>:
 800899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	461f      	mov	r7, r3
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	4605      	mov	r5, r0
 80089a8:	05db      	lsls	r3, r3, #23
 80089aa:	460c      	mov	r4, r1
 80089ac:	4616      	mov	r6, r2
 80089ae:	d505      	bpl.n	80089bc <__swrite+0x1e>
 80089b0:	2302      	movs	r3, #2
 80089b2:	2200      	movs	r2, #0
 80089b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b8:	f000 f84e 	bl	8008a58 <_lseek_r>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	4632      	mov	r2, r6
 80089c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	4628      	mov	r0, r5
 80089c8:	463b      	mov	r3, r7
 80089ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	f000 b865 	b.w	8008aa0 <_write_r>

080089d6 <__sseek>:
 80089d6:	b510      	push	{r4, lr}
 80089d8:	460c      	mov	r4, r1
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 f83b 	bl	8008a58 <_lseek_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	bf15      	itete	ne
 80089e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strheq	r3, [r4, #12]
 80089f4:	bf18      	it	ne
 80089f6:	81a3      	strhne	r3, [r4, #12]
 80089f8:	bd10      	pop	{r4, pc}

080089fa <__sclose>:
 80089fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fe:	f000 b81b 	b.w	8008a38 <_close_r>

08008a02 <memset>:
 8008a02:	4603      	mov	r3, r0
 8008a04:	4402      	add	r2, r0
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d100      	bne.n	8008a0c <memset+0xa>
 8008a0a:	4770      	bx	lr
 8008a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8008a10:	e7f9      	b.n	8008a06 <memset+0x4>

08008a12 <strncmp>:
 8008a12:	b510      	push	{r4, lr}
 8008a14:	b16a      	cbz	r2, 8008a32 <strncmp+0x20>
 8008a16:	3901      	subs	r1, #1
 8008a18:	1884      	adds	r4, r0, r2
 8008a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d103      	bne.n	8008a2e <strncmp+0x1c>
 8008a26:	42a0      	cmp	r0, r4
 8008a28:	d001      	beq.n	8008a2e <strncmp+0x1c>
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d1f5      	bne.n	8008a1a <strncmp+0x8>
 8008a2e:	1ad0      	subs	r0, r2, r3
 8008a30:	bd10      	pop	{r4, pc}
 8008a32:	4610      	mov	r0, r2
 8008a34:	e7fc      	b.n	8008a30 <strncmp+0x1e>
	...

08008a38 <_close_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4d05      	ldr	r5, [pc, #20]	; (8008a54 <_close_r+0x1c>)
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f8 f948 	bl	8000cd8 <_close>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_close_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_close_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20001130 	.word	0x20001130

08008a58 <_lseek_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	4611      	mov	r1, r2
 8008a60:	2200      	movs	r2, #0
 8008a62:	4d05      	ldr	r5, [pc, #20]	; (8008a78 <_lseek_r+0x20>)
 8008a64:	602a      	str	r2, [r5, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f7f8 f95a 	bl	8000d20 <_lseek>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_lseek_r+0x1e>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_lseek_r+0x1e>
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20001130 	.word	0x20001130

08008a7c <_read_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	2200      	movs	r2, #0
 8008a86:	4d05      	ldr	r5, [pc, #20]	; (8008a9c <_read_r+0x20>)
 8008a88:	602a      	str	r2, [r5, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f7f8 f8eb 	bl	8000c66 <_read>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_read_r+0x1e>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_read_r+0x1e>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20001130 	.word	0x20001130

08008aa0 <_write_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4d05      	ldr	r5, [pc, #20]	; (8008ac0 <_write_r+0x20>)
 8008aac:	602a      	str	r2, [r5, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f7f8 f8f6 	bl	8000ca0 <_write>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_write_r+0x1e>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_write_r+0x1e>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20001130 	.word	0x20001130

08008ac4 <__errno>:
 8008ac4:	4b01      	ldr	r3, [pc, #4]	; (8008acc <__errno+0x8>)
 8008ac6:	6818      	ldr	r0, [r3, #0]
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	200001e0 	.word	0x200001e0

08008ad0 <__libc_init_array>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	4d0c      	ldr	r5, [pc, #48]	; (8008b08 <__libc_init_array+0x38>)
 8008ad6:	4c0d      	ldr	r4, [pc, #52]	; (8008b0c <__libc_init_array+0x3c>)
 8008ad8:	1b64      	subs	r4, r4, r5
 8008ada:	10a4      	asrs	r4, r4, #2
 8008adc:	42a6      	cmp	r6, r4
 8008ade:	d109      	bne.n	8008af4 <__libc_init_array+0x24>
 8008ae0:	f000 fe4c 	bl	800977c <_init>
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	4d0a      	ldr	r5, [pc, #40]	; (8008b10 <__libc_init_array+0x40>)
 8008ae8:	4c0a      	ldr	r4, [pc, #40]	; (8008b14 <__libc_init_array+0x44>)
 8008aea:	1b64      	subs	r4, r4, r5
 8008aec:	10a4      	asrs	r4, r4, #2
 8008aee:	42a6      	cmp	r6, r4
 8008af0:	d105      	bne.n	8008afe <__libc_init_array+0x2e>
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af8:	4798      	blx	r3
 8008afa:	3601      	adds	r6, #1
 8008afc:	e7ee      	b.n	8008adc <__libc_init_array+0xc>
 8008afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b02:	4798      	blx	r3
 8008b04:	3601      	adds	r6, #1
 8008b06:	e7f2      	b.n	8008aee <__libc_init_array+0x1e>
 8008b08:	08009a78 	.word	0x08009a78
 8008b0c:	08009a78 	.word	0x08009a78
 8008b10:	08009a78 	.word	0x08009a78
 8008b14:	08009a7c 	.word	0x08009a7c

08008b18 <__retarget_lock_init_recursive>:
 8008b18:	4770      	bx	lr

08008b1a <__retarget_lock_acquire_recursive>:
 8008b1a:	4770      	bx	lr

08008b1c <__retarget_lock_release_recursive>:
 8008b1c:	4770      	bx	lr
	...

08008b20 <__assert_func>:
 8008b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b22:	4614      	mov	r4, r2
 8008b24:	461a      	mov	r2, r3
 8008b26:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <__assert_func+0x2c>)
 8008b28:	4605      	mov	r5, r0
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68d8      	ldr	r0, [r3, #12]
 8008b2e:	b14c      	cbz	r4, 8008b44 <__assert_func+0x24>
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <__assert_func+0x30>)
 8008b32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b36:	9100      	str	r1, [sp, #0]
 8008b38:	462b      	mov	r3, r5
 8008b3a:	4906      	ldr	r1, [pc, #24]	; (8008b54 <__assert_func+0x34>)
 8008b3c:	f000 f9b4 	bl	8008ea8 <fiprintf>
 8008b40:	f000 f9d4 	bl	8008eec <abort>
 8008b44:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <__assert_func+0x38>)
 8008b46:	461c      	mov	r4, r3
 8008b48:	e7f3      	b.n	8008b32 <__assert_func+0x12>
 8008b4a:	bf00      	nop
 8008b4c:	200001e0 	.word	0x200001e0
 8008b50:	08009a09 	.word	0x08009a09
 8008b54:	08009a16 	.word	0x08009a16
 8008b58:	08009a44 	.word	0x08009a44

08008b5c <_free_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4605      	mov	r5, r0
 8008b60:	2900      	cmp	r1, #0
 8008b62:	d040      	beq.n	8008be6 <_free_r+0x8a>
 8008b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b68:	1f0c      	subs	r4, r1, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfb8      	it	lt
 8008b6e:	18e4      	addlt	r4, r4, r3
 8008b70:	f000 f8e4 	bl	8008d3c <__malloc_lock>
 8008b74:	4a1c      	ldr	r2, [pc, #112]	; (8008be8 <_free_r+0x8c>)
 8008b76:	6813      	ldr	r3, [r2, #0]
 8008b78:	b933      	cbnz	r3, 8008b88 <_free_r+0x2c>
 8008b7a:	6063      	str	r3, [r4, #4]
 8008b7c:	6014      	str	r4, [r2, #0]
 8008b7e:	4628      	mov	r0, r5
 8008b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b84:	f000 b8e0 	b.w	8008d48 <__malloc_unlock>
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	d908      	bls.n	8008b9e <_free_r+0x42>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428b      	cmp	r3, r1
 8008b92:	bf01      	itttt	eq
 8008b94:	6819      	ldreq	r1, [r3, #0]
 8008b96:	685b      	ldreq	r3, [r3, #4]
 8008b98:	1809      	addeq	r1, r1, r0
 8008b9a:	6021      	streq	r1, [r4, #0]
 8008b9c:	e7ed      	b.n	8008b7a <_free_r+0x1e>
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	b10b      	cbz	r3, 8008ba8 <_free_r+0x4c>
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d9fa      	bls.n	8008b9e <_free_r+0x42>
 8008ba8:	6811      	ldr	r1, [r2, #0]
 8008baa:	1850      	adds	r0, r2, r1
 8008bac:	42a0      	cmp	r0, r4
 8008bae:	d10b      	bne.n	8008bc8 <_free_r+0x6c>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	4401      	add	r1, r0
 8008bb4:	1850      	adds	r0, r2, r1
 8008bb6:	4283      	cmp	r3, r0
 8008bb8:	6011      	str	r1, [r2, #0]
 8008bba:	d1e0      	bne.n	8008b7e <_free_r+0x22>
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4408      	add	r0, r1
 8008bc2:	6010      	str	r0, [r2, #0]
 8008bc4:	6053      	str	r3, [r2, #4]
 8008bc6:	e7da      	b.n	8008b7e <_free_r+0x22>
 8008bc8:	d902      	bls.n	8008bd0 <_free_r+0x74>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	e7d6      	b.n	8008b7e <_free_r+0x22>
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	1821      	adds	r1, r4, r0
 8008bd4:	428b      	cmp	r3, r1
 8008bd6:	bf01      	itttt	eq
 8008bd8:	6819      	ldreq	r1, [r3, #0]
 8008bda:	685b      	ldreq	r3, [r3, #4]
 8008bdc:	1809      	addeq	r1, r1, r0
 8008bde:	6021      	streq	r1, [r4, #0]
 8008be0:	6063      	str	r3, [r4, #4]
 8008be2:	6054      	str	r4, [r2, #4]
 8008be4:	e7cb      	b.n	8008b7e <_free_r+0x22>
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20001138 	.word	0x20001138

08008bec <malloc>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <malloc+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f000 b823 	b.w	8008c3c <_malloc_r>
 8008bf6:	bf00      	nop
 8008bf8:	200001e0 	.word	0x200001e0

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0e      	ldr	r6, [pc, #56]	; (8008c38 <sbrk_aligned+0x3c>)
 8008c00:	460c      	mov	r4, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	b911      	cbnz	r1, 8008c0e <sbrk_aligned+0x12>
 8008c08:	f000 f960 	bl	8008ecc <_sbrk_r>
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f95b 	bl	8008ecc <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d00a      	beq.n	8008c30 <sbrk_aligned+0x34>
 8008c1a:	1cc4      	adds	r4, r0, #3
 8008c1c:	f024 0403 	bic.w	r4, r4, #3
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d007      	beq.n	8008c34 <sbrk_aligned+0x38>
 8008c24:	1a21      	subs	r1, r4, r0
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 f950 	bl	8008ecc <_sbrk_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d101      	bne.n	8008c34 <sbrk_aligned+0x38>
 8008c30:	f04f 34ff 	mov.w	r4, #4294967295
 8008c34:	4620      	mov	r0, r4
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	2000113c 	.word	0x2000113c

08008c3c <_malloc_r>:
 8008c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c40:	1ccd      	adds	r5, r1, #3
 8008c42:	f025 0503 	bic.w	r5, r5, #3
 8008c46:	3508      	adds	r5, #8
 8008c48:	2d0c      	cmp	r5, #12
 8008c4a:	bf38      	it	cc
 8008c4c:	250c      	movcc	r5, #12
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	4607      	mov	r7, r0
 8008c52:	db01      	blt.n	8008c58 <_malloc_r+0x1c>
 8008c54:	42a9      	cmp	r1, r5
 8008c56:	d905      	bls.n	8008c64 <_malloc_r+0x28>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	603b      	str	r3, [r7, #0]
 8008c5e:	4630      	mov	r0, r6
 8008c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d38 <_malloc_r+0xfc>
 8008c68:	f000 f868 	bl	8008d3c <__malloc_lock>
 8008c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c70:	461c      	mov	r4, r3
 8008c72:	bb5c      	cbnz	r4, 8008ccc <_malloc_r+0x90>
 8008c74:	4629      	mov	r1, r5
 8008c76:	4638      	mov	r0, r7
 8008c78:	f7ff ffc0 	bl	8008bfc <sbrk_aligned>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	4604      	mov	r4, r0
 8008c80:	d155      	bne.n	8008d2e <_malloc_r+0xf2>
 8008c82:	f8d8 4000 	ldr.w	r4, [r8]
 8008c86:	4626      	mov	r6, r4
 8008c88:	2e00      	cmp	r6, #0
 8008c8a:	d145      	bne.n	8008d18 <_malloc_r+0xdc>
 8008c8c:	2c00      	cmp	r4, #0
 8008c8e:	d048      	beq.n	8008d22 <_malloc_r+0xe6>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	4631      	mov	r1, r6
 8008c94:	4638      	mov	r0, r7
 8008c96:	eb04 0903 	add.w	r9, r4, r3
 8008c9a:	f000 f917 	bl	8008ecc <_sbrk_r>
 8008c9e:	4581      	cmp	r9, r0
 8008ca0:	d13f      	bne.n	8008d22 <_malloc_r+0xe6>
 8008ca2:	6821      	ldr	r1, [r4, #0]
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	1a6d      	subs	r5, r5, r1
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7ff ffa7 	bl	8008bfc <sbrk_aligned>
 8008cae:	3001      	adds	r0, #1
 8008cb0:	d037      	beq.n	8008d22 <_malloc_r+0xe6>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	442b      	add	r3, r5
 8008cb6:	6023      	str	r3, [r4, #0]
 8008cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d038      	beq.n	8008d32 <_malloc_r+0xf6>
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	42a2      	cmp	r2, r4
 8008cc4:	d12b      	bne.n	8008d1e <_malloc_r+0xe2>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	605a      	str	r2, [r3, #4]
 8008cca:	e00f      	b.n	8008cec <_malloc_r+0xb0>
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	1b52      	subs	r2, r2, r5
 8008cd0:	d41f      	bmi.n	8008d12 <_malloc_r+0xd6>
 8008cd2:	2a0b      	cmp	r2, #11
 8008cd4:	d917      	bls.n	8008d06 <_malloc_r+0xca>
 8008cd6:	1961      	adds	r1, r4, r5
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	6025      	str	r5, [r4, #0]
 8008cdc:	bf18      	it	ne
 8008cde:	6059      	strne	r1, [r3, #4]
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	bf08      	it	eq
 8008ce4:	f8c8 1000 	streq.w	r1, [r8]
 8008ce8:	5162      	str	r2, [r4, r5]
 8008cea:	604b      	str	r3, [r1, #4]
 8008cec:	4638      	mov	r0, r7
 8008cee:	f104 060b 	add.w	r6, r4, #11
 8008cf2:	f000 f829 	bl	8008d48 <__malloc_unlock>
 8008cf6:	f026 0607 	bic.w	r6, r6, #7
 8008cfa:	1d23      	adds	r3, r4, #4
 8008cfc:	1af2      	subs	r2, r6, r3
 8008cfe:	d0ae      	beq.n	8008c5e <_malloc_r+0x22>
 8008d00:	1b9b      	subs	r3, r3, r6
 8008d02:	50a3      	str	r3, [r4, r2]
 8008d04:	e7ab      	b.n	8008c5e <_malloc_r+0x22>
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	6862      	ldr	r2, [r4, #4]
 8008d0a:	d1dd      	bne.n	8008cc8 <_malloc_r+0x8c>
 8008d0c:	f8c8 2000 	str.w	r2, [r8]
 8008d10:	e7ec      	b.n	8008cec <_malloc_r+0xb0>
 8008d12:	4623      	mov	r3, r4
 8008d14:	6864      	ldr	r4, [r4, #4]
 8008d16:	e7ac      	b.n	8008c72 <_malloc_r+0x36>
 8008d18:	4634      	mov	r4, r6
 8008d1a:	6876      	ldr	r6, [r6, #4]
 8008d1c:	e7b4      	b.n	8008c88 <_malloc_r+0x4c>
 8008d1e:	4613      	mov	r3, r2
 8008d20:	e7cc      	b.n	8008cbc <_malloc_r+0x80>
 8008d22:	230c      	movs	r3, #12
 8008d24:	4638      	mov	r0, r7
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	f000 f80e 	bl	8008d48 <__malloc_unlock>
 8008d2c:	e797      	b.n	8008c5e <_malloc_r+0x22>
 8008d2e:	6025      	str	r5, [r4, #0]
 8008d30:	e7dc      	b.n	8008cec <_malloc_r+0xb0>
 8008d32:	605b      	str	r3, [r3, #4]
 8008d34:	deff      	udf	#255	; 0xff
 8008d36:	bf00      	nop
 8008d38:	20001138 	.word	0x20001138

08008d3c <__malloc_lock>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <__malloc_lock+0x8>)
 8008d3e:	f7ff beec 	b.w	8008b1a <__retarget_lock_acquire_recursive>
 8008d42:	bf00      	nop
 8008d44:	20001134 	.word	0x20001134

08008d48 <__malloc_unlock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	; (8008d50 <__malloc_unlock+0x8>)
 8008d4a:	f7ff bee7 	b.w	8008b1c <__retarget_lock_release_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20001134 	.word	0x20001134

08008d54 <__sflush_r>:
 8008d54:	898a      	ldrh	r2, [r1, #12]
 8008d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d58:	4605      	mov	r5, r0
 8008d5a:	0710      	lsls	r0, r2, #28
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	d457      	bmi.n	8008e10 <__sflush_r+0xbc>
 8008d60:	684b      	ldr	r3, [r1, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	dc04      	bgt.n	8008d70 <__sflush_r+0x1c>
 8008d66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc01      	bgt.n	8008d70 <__sflush_r+0x1c>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d72:	2e00      	cmp	r6, #0
 8008d74:	d0fa      	beq.n	8008d6c <__sflush_r+0x18>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d7c:	682f      	ldr	r7, [r5, #0]
 8008d7e:	6a21      	ldr	r1, [r4, #32]
 8008d80:	602b      	str	r3, [r5, #0]
 8008d82:	d032      	beq.n	8008dea <__sflush_r+0x96>
 8008d84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	075a      	lsls	r2, r3, #29
 8008d8a:	d505      	bpl.n	8008d98 <__sflush_r+0x44>
 8008d8c:	6863      	ldr	r3, [r4, #4]
 8008d8e:	1ac0      	subs	r0, r0, r3
 8008d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d92:	b10b      	cbz	r3, 8008d98 <__sflush_r+0x44>
 8008d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d96:	1ac0      	subs	r0, r0, r3
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9e:	4628      	mov	r0, r5
 8008da0:	6a21      	ldr	r1, [r4, #32]
 8008da2:	47b0      	blx	r6
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	d106      	bne.n	8008db8 <__sflush_r+0x64>
 8008daa:	6829      	ldr	r1, [r5, #0]
 8008dac:	291d      	cmp	r1, #29
 8008dae:	d82b      	bhi.n	8008e08 <__sflush_r+0xb4>
 8008db0:	4a28      	ldr	r2, [pc, #160]	; (8008e54 <__sflush_r+0x100>)
 8008db2:	410a      	asrs	r2, r1
 8008db4:	07d6      	lsls	r6, r2, #31
 8008db6:	d427      	bmi.n	8008e08 <__sflush_r+0xb4>
 8008db8:	2200      	movs	r2, #0
 8008dba:	6062      	str	r2, [r4, #4]
 8008dbc:	6922      	ldr	r2, [r4, #16]
 8008dbe:	04d9      	lsls	r1, r3, #19
 8008dc0:	6022      	str	r2, [r4, #0]
 8008dc2:	d504      	bpl.n	8008dce <__sflush_r+0x7a>
 8008dc4:	1c42      	adds	r2, r0, #1
 8008dc6:	d101      	bne.n	8008dcc <__sflush_r+0x78>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b903      	cbnz	r3, 8008dce <__sflush_r+0x7a>
 8008dcc:	6560      	str	r0, [r4, #84]	; 0x54
 8008dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dd0:	602f      	str	r7, [r5, #0]
 8008dd2:	2900      	cmp	r1, #0
 8008dd4:	d0ca      	beq.n	8008d6c <__sflush_r+0x18>
 8008dd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d002      	beq.n	8008de4 <__sflush_r+0x90>
 8008dde:	4628      	mov	r0, r5
 8008de0:	f7ff febc 	bl	8008b5c <_free_r>
 8008de4:	2000      	movs	r0, #0
 8008de6:	6360      	str	r0, [r4, #52]	; 0x34
 8008de8:	e7c1      	b.n	8008d6e <__sflush_r+0x1a>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b0      	blx	r6
 8008df0:	1c41      	adds	r1, r0, #1
 8008df2:	d1c8      	bne.n	8008d86 <__sflush_r+0x32>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0c5      	beq.n	8008d86 <__sflush_r+0x32>
 8008dfa:	2b1d      	cmp	r3, #29
 8008dfc:	d001      	beq.n	8008e02 <__sflush_r+0xae>
 8008dfe:	2b16      	cmp	r3, #22
 8008e00:	d101      	bne.n	8008e06 <__sflush_r+0xb2>
 8008e02:	602f      	str	r7, [r5, #0]
 8008e04:	e7b2      	b.n	8008d6c <__sflush_r+0x18>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	e7ae      	b.n	8008d6e <__sflush_r+0x1a>
 8008e10:	690f      	ldr	r7, [r1, #16]
 8008e12:	2f00      	cmp	r7, #0
 8008e14:	d0aa      	beq.n	8008d6c <__sflush_r+0x18>
 8008e16:	0793      	lsls	r3, r2, #30
 8008e18:	bf18      	it	ne
 8008e1a:	2300      	movne	r3, #0
 8008e1c:	680e      	ldr	r6, [r1, #0]
 8008e1e:	bf08      	it	eq
 8008e20:	694b      	ldreq	r3, [r1, #20]
 8008e22:	1bf6      	subs	r6, r6, r7
 8008e24:	600f      	str	r7, [r1, #0]
 8008e26:	608b      	str	r3, [r1, #8]
 8008e28:	2e00      	cmp	r6, #0
 8008e2a:	dd9f      	ble.n	8008d6c <__sflush_r+0x18>
 8008e2c:	4633      	mov	r3, r6
 8008e2e:	463a      	mov	r2, r7
 8008e30:	4628      	mov	r0, r5
 8008e32:	6a21      	ldr	r1, [r4, #32]
 8008e34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008e38:	47e0      	blx	ip
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	dc06      	bgt.n	8008e4c <__sflush_r+0xf8>
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f04f 30ff 	mov.w	r0, #4294967295
 8008e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	e790      	b.n	8008d6e <__sflush_r+0x1a>
 8008e4c:	4407      	add	r7, r0
 8008e4e:	1a36      	subs	r6, r6, r0
 8008e50:	e7ea      	b.n	8008e28 <__sflush_r+0xd4>
 8008e52:	bf00      	nop
 8008e54:	dfbffffe 	.word	0xdfbffffe

08008e58 <_fflush_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	690b      	ldr	r3, [r1, #16]
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	b913      	cbnz	r3, 8008e68 <_fflush_r+0x10>
 8008e62:	2500      	movs	r5, #0
 8008e64:	4628      	mov	r0, r5
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	b118      	cbz	r0, 8008e72 <_fflush_r+0x1a>
 8008e6a:	6a03      	ldr	r3, [r0, #32]
 8008e6c:	b90b      	cbnz	r3, 8008e72 <_fflush_r+0x1a>
 8008e6e:	f7ff fd4f 	bl	8008910 <__sinit>
 8008e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0f3      	beq.n	8008e62 <_fflush_r+0xa>
 8008e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e7c:	07d0      	lsls	r0, r2, #31
 8008e7e:	d404      	bmi.n	8008e8a <_fflush_r+0x32>
 8008e80:	0599      	lsls	r1, r3, #22
 8008e82:	d402      	bmi.n	8008e8a <_fflush_r+0x32>
 8008e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e86:	f7ff fe48 	bl	8008b1a <__retarget_lock_acquire_recursive>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	f7ff ff61 	bl	8008d54 <__sflush_r>
 8008e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e94:	4605      	mov	r5, r0
 8008e96:	07da      	lsls	r2, r3, #31
 8008e98:	d4e4      	bmi.n	8008e64 <_fflush_r+0xc>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	059b      	lsls	r3, r3, #22
 8008e9e:	d4e1      	bmi.n	8008e64 <_fflush_r+0xc>
 8008ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ea2:	f7ff fe3b 	bl	8008b1c <__retarget_lock_release_recursive>
 8008ea6:	e7dd      	b.n	8008e64 <_fflush_r+0xc>

08008ea8 <fiprintf>:
 8008ea8:	b40e      	push	{r1, r2, r3}
 8008eaa:	b503      	push	{r0, r1, lr}
 8008eac:	4601      	mov	r1, r0
 8008eae:	ab03      	add	r3, sp, #12
 8008eb0:	4805      	ldr	r0, [pc, #20]	; (8008ec8 <fiprintf+0x20>)
 8008eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb6:	6800      	ldr	r0, [r0, #0]
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	f000 f845 	bl	8008f48 <_vfiprintf_r>
 8008ebe:	b002      	add	sp, #8
 8008ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec4:	b003      	add	sp, #12
 8008ec6:	4770      	bx	lr
 8008ec8:	200001e0 	.word	0x200001e0

08008ecc <_sbrk_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4d05      	ldr	r5, [pc, #20]	; (8008ee8 <_sbrk_r+0x1c>)
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	602b      	str	r3, [r5, #0]
 8008ed8:	f7f7 ff2e 	bl	8000d38 <_sbrk>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_sbrk_r+0x1a>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_sbrk_r+0x1a>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	20001130 	.word	0x20001130

08008eec <abort>:
 8008eec:	2006      	movs	r0, #6
 8008eee:	b508      	push	{r3, lr}
 8008ef0:	f000 fb96 	bl	8009620 <raise>
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	f7f7 feac 	bl	8000c52 <_exit>

08008efa <__sfputc_r>:
 8008efa:	6893      	ldr	r3, [r2, #8]
 8008efc:	b410      	push	{r4}
 8008efe:	3b01      	subs	r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	6093      	str	r3, [r2, #8]
 8008f04:	da07      	bge.n	8008f16 <__sfputc_r+0x1c>
 8008f06:	6994      	ldr	r4, [r2, #24]
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	db01      	blt.n	8008f10 <__sfputc_r+0x16>
 8008f0c:	290a      	cmp	r1, #10
 8008f0e:	d102      	bne.n	8008f16 <__sfputc_r+0x1c>
 8008f10:	bc10      	pop	{r4}
 8008f12:	f000 bac7 	b.w	80094a4 <__swbuf_r>
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	1c58      	adds	r0, r3, #1
 8008f1a:	6010      	str	r0, [r2, #0]
 8008f1c:	7019      	strb	r1, [r3, #0]
 8008f1e:	4608      	mov	r0, r1
 8008f20:	bc10      	pop	{r4}
 8008f22:	4770      	bx	lr

08008f24 <__sfputs_r>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	4614      	mov	r4, r2
 8008f2c:	18d5      	adds	r5, r2, r3
 8008f2e:	42ac      	cmp	r4, r5
 8008f30:	d101      	bne.n	8008f36 <__sfputs_r+0x12>
 8008f32:	2000      	movs	r0, #0
 8008f34:	e007      	b.n	8008f46 <__sfputs_r+0x22>
 8008f36:	463a      	mov	r2, r7
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3e:	f7ff ffdc 	bl	8008efa <__sfputc_r>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	d1f3      	bne.n	8008f2e <__sfputs_r+0xa>
 8008f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f48 <_vfiprintf_r>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	460d      	mov	r5, r1
 8008f4e:	4614      	mov	r4, r2
 8008f50:	4698      	mov	r8, r3
 8008f52:	4606      	mov	r6, r0
 8008f54:	b09d      	sub	sp, #116	; 0x74
 8008f56:	b118      	cbz	r0, 8008f60 <_vfiprintf_r+0x18>
 8008f58:	6a03      	ldr	r3, [r0, #32]
 8008f5a:	b90b      	cbnz	r3, 8008f60 <_vfiprintf_r+0x18>
 8008f5c:	f7ff fcd8 	bl	8008910 <__sinit>
 8008f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f62:	07d9      	lsls	r1, r3, #31
 8008f64:	d405      	bmi.n	8008f72 <_vfiprintf_r+0x2a>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	059a      	lsls	r2, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <_vfiprintf_r+0x2a>
 8008f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f6e:	f7ff fdd4 	bl	8008b1a <__retarget_lock_acquire_recursive>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	071b      	lsls	r3, r3, #28
 8008f76:	d501      	bpl.n	8008f7c <_vfiprintf_r+0x34>
 8008f78:	692b      	ldr	r3, [r5, #16]
 8008f7a:	b99b      	cbnz	r3, 8008fa4 <_vfiprintf_r+0x5c>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 face 	bl	8009520 <__swsetup_r>
 8008f84:	b170      	cbz	r0, 8008fa4 <_vfiprintf_r+0x5c>
 8008f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f88:	07dc      	lsls	r4, r3, #31
 8008f8a:	d504      	bpl.n	8008f96 <_vfiprintf_r+0x4e>
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	b01d      	add	sp, #116	; 0x74
 8008f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	0598      	lsls	r0, r3, #22
 8008f9a:	d4f7      	bmi.n	8008f8c <_vfiprintf_r+0x44>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f9e:	f7ff fdbd 	bl	8008b1c <__retarget_lock_release_recursive>
 8008fa2:	e7f3      	b.n	8008f8c <_vfiprintf_r+0x44>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa8:	2320      	movs	r3, #32
 8008faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fae:	2330      	movs	r3, #48	; 0x30
 8008fb0:	f04f 0901 	mov.w	r9, #1
 8008fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009168 <_vfiprintf_r+0x220>
 8008fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	469a      	mov	sl, r3
 8008fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc8:	b10a      	cbz	r2, 8008fce <_vfiprintf_r+0x86>
 8008fca:	2a25      	cmp	r2, #37	; 0x25
 8008fcc:	d1f9      	bne.n	8008fc2 <_vfiprintf_r+0x7a>
 8008fce:	ebba 0b04 	subs.w	fp, sl, r4
 8008fd2:	d00b      	beq.n	8008fec <_vfiprintf_r+0xa4>
 8008fd4:	465b      	mov	r3, fp
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ffa2 	bl	8008f24 <__sfputs_r>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f000 80a9 	beq.w	8009138 <_vfiprintf_r+0x1f0>
 8008fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe8:	445a      	add	r2, fp
 8008fea:	9209      	str	r2, [sp, #36]	; 0x24
 8008fec:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80a1 	beq.w	8009138 <_vfiprintf_r+0x1f0>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009000:	f10a 0a01 	add.w	sl, sl, #1
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	9307      	str	r3, [sp, #28]
 8009008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800900c:	931a      	str	r3, [sp, #104]	; 0x68
 800900e:	4654      	mov	r4, sl
 8009010:	2205      	movs	r2, #5
 8009012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009016:	4854      	ldr	r0, [pc, #336]	; (8009168 <_vfiprintf_r+0x220>)
 8009018:	f000 fb1e 	bl	8009658 <memchr>
 800901c:	9a04      	ldr	r2, [sp, #16]
 800901e:	b9d8      	cbnz	r0, 8009058 <_vfiprintf_r+0x110>
 8009020:	06d1      	lsls	r1, r2, #27
 8009022:	bf44      	itt	mi
 8009024:	2320      	movmi	r3, #32
 8009026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902a:	0713      	lsls	r3, r2, #28
 800902c:	bf44      	itt	mi
 800902e:	232b      	movmi	r3, #43	; 0x2b
 8009030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009034:	f89a 3000 	ldrb.w	r3, [sl]
 8009038:	2b2a      	cmp	r3, #42	; 0x2a
 800903a:	d015      	beq.n	8009068 <_vfiprintf_r+0x120>
 800903c:	4654      	mov	r4, sl
 800903e:	2000      	movs	r0, #0
 8009040:	f04f 0c0a 	mov.w	ip, #10
 8009044:	9a07      	ldr	r2, [sp, #28]
 8009046:	4621      	mov	r1, r4
 8009048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800904c:	3b30      	subs	r3, #48	; 0x30
 800904e:	2b09      	cmp	r3, #9
 8009050:	d94d      	bls.n	80090ee <_vfiprintf_r+0x1a6>
 8009052:	b1b0      	cbz	r0, 8009082 <_vfiprintf_r+0x13a>
 8009054:	9207      	str	r2, [sp, #28]
 8009056:	e014      	b.n	8009082 <_vfiprintf_r+0x13a>
 8009058:	eba0 0308 	sub.w	r3, r0, r8
 800905c:	fa09 f303 	lsl.w	r3, r9, r3
 8009060:	4313      	orrs	r3, r2
 8009062:	46a2      	mov	sl, r4
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	e7d2      	b.n	800900e <_vfiprintf_r+0xc6>
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	1d19      	adds	r1, r3, #4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	9103      	str	r1, [sp, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	bfbb      	ittet	lt
 8009074:	425b      	neglt	r3, r3
 8009076:	f042 0202 	orrlt.w	r2, r2, #2
 800907a:	9307      	strge	r3, [sp, #28]
 800907c:	9307      	strlt	r3, [sp, #28]
 800907e:	bfb8      	it	lt
 8009080:	9204      	strlt	r2, [sp, #16]
 8009082:	7823      	ldrb	r3, [r4, #0]
 8009084:	2b2e      	cmp	r3, #46	; 0x2e
 8009086:	d10c      	bne.n	80090a2 <_vfiprintf_r+0x15a>
 8009088:	7863      	ldrb	r3, [r4, #1]
 800908a:	2b2a      	cmp	r3, #42	; 0x2a
 800908c:	d134      	bne.n	80090f8 <_vfiprintf_r+0x1b0>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	3402      	adds	r4, #2
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	9203      	str	r2, [sp, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfb8      	it	lt
 800909c:	f04f 33ff 	movlt.w	r3, #4294967295
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800916c <_vfiprintf_r+0x224>
 80090a6:	2203      	movs	r2, #3
 80090a8:	4650      	mov	r0, sl
 80090aa:	7821      	ldrb	r1, [r4, #0]
 80090ac:	f000 fad4 	bl	8009658 <memchr>
 80090b0:	b138      	cbz	r0, 80090c2 <_vfiprintf_r+0x17a>
 80090b2:	2240      	movs	r2, #64	; 0x40
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	eba0 000a 	sub.w	r0, r0, sl
 80090ba:	4082      	lsls	r2, r0
 80090bc:	4313      	orrs	r3, r2
 80090be:	3401      	adds	r4, #1
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c6:	2206      	movs	r2, #6
 80090c8:	4829      	ldr	r0, [pc, #164]	; (8009170 <_vfiprintf_r+0x228>)
 80090ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ce:	f000 fac3 	bl	8009658 <memchr>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d03f      	beq.n	8009156 <_vfiprintf_r+0x20e>
 80090d6:	4b27      	ldr	r3, [pc, #156]	; (8009174 <_vfiprintf_r+0x22c>)
 80090d8:	bb1b      	cbnz	r3, 8009122 <_vfiprintf_r+0x1da>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	3307      	adds	r3, #7
 80090de:	f023 0307 	bic.w	r3, r3, #7
 80090e2:	3308      	adds	r3, #8
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e8:	443b      	add	r3, r7
 80090ea:	9309      	str	r3, [sp, #36]	; 0x24
 80090ec:	e768      	b.n	8008fc0 <_vfiprintf_r+0x78>
 80090ee:	460c      	mov	r4, r1
 80090f0:	2001      	movs	r0, #1
 80090f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090f6:	e7a6      	b.n	8009046 <_vfiprintf_r+0xfe>
 80090f8:	2300      	movs	r3, #0
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4619      	mov	r1, r3
 8009100:	3401      	adds	r4, #1
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	4620      	mov	r0, r4
 8009106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800910a:	3a30      	subs	r2, #48	; 0x30
 800910c:	2a09      	cmp	r2, #9
 800910e:	d903      	bls.n	8009118 <_vfiprintf_r+0x1d0>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0c6      	beq.n	80090a2 <_vfiprintf_r+0x15a>
 8009114:	9105      	str	r1, [sp, #20]
 8009116:	e7c4      	b.n	80090a2 <_vfiprintf_r+0x15a>
 8009118:	4604      	mov	r4, r0
 800911a:	2301      	movs	r3, #1
 800911c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009120:	e7f0      	b.n	8009104 <_vfiprintf_r+0x1bc>
 8009122:	ab03      	add	r3, sp, #12
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	462a      	mov	r2, r5
 8009128:	4630      	mov	r0, r6
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <_vfiprintf_r+0x230>)
 800912c:	a904      	add	r1, sp, #16
 800912e:	f3af 8000 	nop.w
 8009132:	4607      	mov	r7, r0
 8009134:	1c78      	adds	r0, r7, #1
 8009136:	d1d6      	bne.n	80090e6 <_vfiprintf_r+0x19e>
 8009138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800913a:	07d9      	lsls	r1, r3, #31
 800913c:	d405      	bmi.n	800914a <_vfiprintf_r+0x202>
 800913e:	89ab      	ldrh	r3, [r5, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d402      	bmi.n	800914a <_vfiprintf_r+0x202>
 8009144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009146:	f7ff fce9 	bl	8008b1c <__retarget_lock_release_recursive>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	065b      	lsls	r3, r3, #25
 800914e:	f53f af1d 	bmi.w	8008f8c <_vfiprintf_r+0x44>
 8009152:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009154:	e71c      	b.n	8008f90 <_vfiprintf_r+0x48>
 8009156:	ab03      	add	r3, sp, #12
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	462a      	mov	r2, r5
 800915c:	4630      	mov	r0, r6
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <_vfiprintf_r+0x230>)
 8009160:	a904      	add	r1, sp, #16
 8009162:	f000 f87d 	bl	8009260 <_printf_i>
 8009166:	e7e4      	b.n	8009132 <_vfiprintf_r+0x1ea>
 8009168:	08009a45 	.word	0x08009a45
 800916c:	08009a4b 	.word	0x08009a4b
 8009170:	08009a4f 	.word	0x08009a4f
 8009174:	00000000 	.word	0x00000000
 8009178:	08008f25 	.word	0x08008f25

0800917c <_printf_common>:
 800917c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009180:	4616      	mov	r6, r2
 8009182:	4699      	mov	r9, r3
 8009184:	688a      	ldr	r2, [r1, #8]
 8009186:	690b      	ldr	r3, [r1, #16]
 8009188:	4607      	mov	r7, r0
 800918a:	4293      	cmp	r3, r2
 800918c:	bfb8      	it	lt
 800918e:	4613      	movlt	r3, r2
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009196:	460c      	mov	r4, r1
 8009198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800919c:	b10a      	cbz	r2, 80091a2 <_printf_common+0x26>
 800919e:	3301      	adds	r3, #1
 80091a0:	6033      	str	r3, [r6, #0]
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	0699      	lsls	r1, r3, #26
 80091a6:	bf42      	ittt	mi
 80091a8:	6833      	ldrmi	r3, [r6, #0]
 80091aa:	3302      	addmi	r3, #2
 80091ac:	6033      	strmi	r3, [r6, #0]
 80091ae:	6825      	ldr	r5, [r4, #0]
 80091b0:	f015 0506 	ands.w	r5, r5, #6
 80091b4:	d106      	bne.n	80091c4 <_printf_common+0x48>
 80091b6:	f104 0a19 	add.w	sl, r4, #25
 80091ba:	68e3      	ldr	r3, [r4, #12]
 80091bc:	6832      	ldr	r2, [r6, #0]
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dc2b      	bgt.n	800921c <_printf_common+0xa0>
 80091c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091c8:	1e13      	subs	r3, r2, #0
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	bf18      	it	ne
 80091ce:	2301      	movne	r3, #1
 80091d0:	0692      	lsls	r2, r2, #26
 80091d2:	d430      	bmi.n	8009236 <_printf_common+0xba>
 80091d4:	4649      	mov	r1, r9
 80091d6:	4638      	mov	r0, r7
 80091d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091dc:	47c0      	blx	r8
 80091de:	3001      	adds	r0, #1
 80091e0:	d023      	beq.n	800922a <_printf_common+0xae>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	6922      	ldr	r2, [r4, #16]
 80091e6:	f003 0306 	and.w	r3, r3, #6
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	bf14      	ite	ne
 80091ee:	2500      	movne	r5, #0
 80091f0:	6833      	ldreq	r3, [r6, #0]
 80091f2:	f04f 0600 	mov.w	r6, #0
 80091f6:	bf08      	it	eq
 80091f8:	68e5      	ldreq	r5, [r4, #12]
 80091fa:	f104 041a 	add.w	r4, r4, #26
 80091fe:	bf08      	it	eq
 8009200:	1aed      	subeq	r5, r5, r3
 8009202:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009206:	bf08      	it	eq
 8009208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800920c:	4293      	cmp	r3, r2
 800920e:	bfc4      	itt	gt
 8009210:	1a9b      	subgt	r3, r3, r2
 8009212:	18ed      	addgt	r5, r5, r3
 8009214:	42b5      	cmp	r5, r6
 8009216:	d11a      	bne.n	800924e <_printf_common+0xd2>
 8009218:	2000      	movs	r0, #0
 800921a:	e008      	b.n	800922e <_printf_common+0xb2>
 800921c:	2301      	movs	r3, #1
 800921e:	4652      	mov	r2, sl
 8009220:	4649      	mov	r1, r9
 8009222:	4638      	mov	r0, r7
 8009224:	47c0      	blx	r8
 8009226:	3001      	adds	r0, #1
 8009228:	d103      	bne.n	8009232 <_printf_common+0xb6>
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009232:	3501      	adds	r5, #1
 8009234:	e7c1      	b.n	80091ba <_printf_common+0x3e>
 8009236:	2030      	movs	r0, #48	; 0x30
 8009238:	18e1      	adds	r1, r4, r3
 800923a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009244:	4422      	add	r2, r4
 8009246:	3302      	adds	r3, #2
 8009248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800924c:	e7c2      	b.n	80091d4 <_printf_common+0x58>
 800924e:	2301      	movs	r3, #1
 8009250:	4622      	mov	r2, r4
 8009252:	4649      	mov	r1, r9
 8009254:	4638      	mov	r0, r7
 8009256:	47c0      	blx	r8
 8009258:	3001      	adds	r0, #1
 800925a:	d0e6      	beq.n	800922a <_printf_common+0xae>
 800925c:	3601      	adds	r6, #1
 800925e:	e7d9      	b.n	8009214 <_printf_common+0x98>

08009260 <_printf_i>:
 8009260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	7e0f      	ldrb	r7, [r1, #24]
 8009266:	4691      	mov	r9, r2
 8009268:	2f78      	cmp	r7, #120	; 0x78
 800926a:	4680      	mov	r8, r0
 800926c:	460c      	mov	r4, r1
 800926e:	469a      	mov	sl, r3
 8009270:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009276:	d807      	bhi.n	8009288 <_printf_i+0x28>
 8009278:	2f62      	cmp	r7, #98	; 0x62
 800927a:	d80a      	bhi.n	8009292 <_printf_i+0x32>
 800927c:	2f00      	cmp	r7, #0
 800927e:	f000 80d5 	beq.w	800942c <_printf_i+0x1cc>
 8009282:	2f58      	cmp	r7, #88	; 0x58
 8009284:	f000 80c1 	beq.w	800940a <_printf_i+0x1aa>
 8009288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800928c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009290:	e03a      	b.n	8009308 <_printf_i+0xa8>
 8009292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009296:	2b15      	cmp	r3, #21
 8009298:	d8f6      	bhi.n	8009288 <_printf_i+0x28>
 800929a:	a101      	add	r1, pc, #4	; (adr r1, 80092a0 <_printf_i+0x40>)
 800929c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092a0:	080092f9 	.word	0x080092f9
 80092a4:	0800930d 	.word	0x0800930d
 80092a8:	08009289 	.word	0x08009289
 80092ac:	08009289 	.word	0x08009289
 80092b0:	08009289 	.word	0x08009289
 80092b4:	08009289 	.word	0x08009289
 80092b8:	0800930d 	.word	0x0800930d
 80092bc:	08009289 	.word	0x08009289
 80092c0:	08009289 	.word	0x08009289
 80092c4:	08009289 	.word	0x08009289
 80092c8:	08009289 	.word	0x08009289
 80092cc:	08009413 	.word	0x08009413
 80092d0:	08009339 	.word	0x08009339
 80092d4:	080093cd 	.word	0x080093cd
 80092d8:	08009289 	.word	0x08009289
 80092dc:	08009289 	.word	0x08009289
 80092e0:	08009435 	.word	0x08009435
 80092e4:	08009289 	.word	0x08009289
 80092e8:	08009339 	.word	0x08009339
 80092ec:	08009289 	.word	0x08009289
 80092f0:	08009289 	.word	0x08009289
 80092f4:	080093d5 	.word	0x080093d5
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	1d1a      	adds	r2, r3, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	602a      	str	r2, [r5, #0]
 8009300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009308:	2301      	movs	r3, #1
 800930a:	e0a0      	b.n	800944e <_printf_i+0x1ee>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	682b      	ldr	r3, [r5, #0]
 8009310:	0607      	lsls	r7, r0, #24
 8009312:	f103 0104 	add.w	r1, r3, #4
 8009316:	6029      	str	r1, [r5, #0]
 8009318:	d501      	bpl.n	800931e <_printf_i+0xbe>
 800931a:	681e      	ldr	r6, [r3, #0]
 800931c:	e003      	b.n	8009326 <_printf_i+0xc6>
 800931e:	0646      	lsls	r6, r0, #25
 8009320:	d5fb      	bpl.n	800931a <_printf_i+0xba>
 8009322:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009326:	2e00      	cmp	r6, #0
 8009328:	da03      	bge.n	8009332 <_printf_i+0xd2>
 800932a:	232d      	movs	r3, #45	; 0x2d
 800932c:	4276      	negs	r6, r6
 800932e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009332:	230a      	movs	r3, #10
 8009334:	4859      	ldr	r0, [pc, #356]	; (800949c <_printf_i+0x23c>)
 8009336:	e012      	b.n	800935e <_printf_i+0xfe>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	6820      	ldr	r0, [r4, #0]
 800933c:	1d19      	adds	r1, r3, #4
 800933e:	6029      	str	r1, [r5, #0]
 8009340:	0605      	lsls	r5, r0, #24
 8009342:	d501      	bpl.n	8009348 <_printf_i+0xe8>
 8009344:	681e      	ldr	r6, [r3, #0]
 8009346:	e002      	b.n	800934e <_printf_i+0xee>
 8009348:	0641      	lsls	r1, r0, #25
 800934a:	d5fb      	bpl.n	8009344 <_printf_i+0xe4>
 800934c:	881e      	ldrh	r6, [r3, #0]
 800934e:	2f6f      	cmp	r7, #111	; 0x6f
 8009350:	bf0c      	ite	eq
 8009352:	2308      	moveq	r3, #8
 8009354:	230a      	movne	r3, #10
 8009356:	4851      	ldr	r0, [pc, #324]	; (800949c <_printf_i+0x23c>)
 8009358:	2100      	movs	r1, #0
 800935a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800935e:	6865      	ldr	r5, [r4, #4]
 8009360:	2d00      	cmp	r5, #0
 8009362:	bfa8      	it	ge
 8009364:	6821      	ldrge	r1, [r4, #0]
 8009366:	60a5      	str	r5, [r4, #8]
 8009368:	bfa4      	itt	ge
 800936a:	f021 0104 	bicge.w	r1, r1, #4
 800936e:	6021      	strge	r1, [r4, #0]
 8009370:	b90e      	cbnz	r6, 8009376 <_printf_i+0x116>
 8009372:	2d00      	cmp	r5, #0
 8009374:	d04b      	beq.n	800940e <_printf_i+0x1ae>
 8009376:	4615      	mov	r5, r2
 8009378:	fbb6 f1f3 	udiv	r1, r6, r3
 800937c:	fb03 6711 	mls	r7, r3, r1, r6
 8009380:	5dc7      	ldrb	r7, [r0, r7]
 8009382:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009386:	4637      	mov	r7, r6
 8009388:	42bb      	cmp	r3, r7
 800938a:	460e      	mov	r6, r1
 800938c:	d9f4      	bls.n	8009378 <_printf_i+0x118>
 800938e:	2b08      	cmp	r3, #8
 8009390:	d10b      	bne.n	80093aa <_printf_i+0x14a>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	07de      	lsls	r6, r3, #31
 8009396:	d508      	bpl.n	80093aa <_printf_i+0x14a>
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	6861      	ldr	r1, [r4, #4]
 800939c:	4299      	cmp	r1, r3
 800939e:	bfde      	ittt	le
 80093a0:	2330      	movle	r3, #48	; 0x30
 80093a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093aa:	1b52      	subs	r2, r2, r5
 80093ac:	6122      	str	r2, [r4, #16]
 80093ae:	464b      	mov	r3, r9
 80093b0:	4621      	mov	r1, r4
 80093b2:	4640      	mov	r0, r8
 80093b4:	f8cd a000 	str.w	sl, [sp]
 80093b8:	aa03      	add	r2, sp, #12
 80093ba:	f7ff fedf 	bl	800917c <_printf_common>
 80093be:	3001      	adds	r0, #1
 80093c0:	d14a      	bne.n	8009458 <_printf_i+0x1f8>
 80093c2:	f04f 30ff 	mov.w	r0, #4294967295
 80093c6:	b004      	add	sp, #16
 80093c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	f043 0320 	orr.w	r3, r3, #32
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	2778      	movs	r7, #120	; 0x78
 80093d6:	4832      	ldr	r0, [pc, #200]	; (80094a0 <_printf_i+0x240>)
 80093d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	6829      	ldr	r1, [r5, #0]
 80093e0:	061f      	lsls	r7, r3, #24
 80093e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80093e6:	d402      	bmi.n	80093ee <_printf_i+0x18e>
 80093e8:	065f      	lsls	r7, r3, #25
 80093ea:	bf48      	it	mi
 80093ec:	b2b6      	uxthmi	r6, r6
 80093ee:	07df      	lsls	r7, r3, #31
 80093f0:	bf48      	it	mi
 80093f2:	f043 0320 	orrmi.w	r3, r3, #32
 80093f6:	6029      	str	r1, [r5, #0]
 80093f8:	bf48      	it	mi
 80093fa:	6023      	strmi	r3, [r4, #0]
 80093fc:	b91e      	cbnz	r6, 8009406 <_printf_i+0x1a6>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	f023 0320 	bic.w	r3, r3, #32
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	2310      	movs	r3, #16
 8009408:	e7a6      	b.n	8009358 <_printf_i+0xf8>
 800940a:	4824      	ldr	r0, [pc, #144]	; (800949c <_printf_i+0x23c>)
 800940c:	e7e4      	b.n	80093d8 <_printf_i+0x178>
 800940e:	4615      	mov	r5, r2
 8009410:	e7bd      	b.n	800938e <_printf_i+0x12e>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	6826      	ldr	r6, [r4, #0]
 8009416:	1d18      	adds	r0, r3, #4
 8009418:	6961      	ldr	r1, [r4, #20]
 800941a:	6028      	str	r0, [r5, #0]
 800941c:	0635      	lsls	r5, r6, #24
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	d501      	bpl.n	8009426 <_printf_i+0x1c6>
 8009422:	6019      	str	r1, [r3, #0]
 8009424:	e002      	b.n	800942c <_printf_i+0x1cc>
 8009426:	0670      	lsls	r0, r6, #25
 8009428:	d5fb      	bpl.n	8009422 <_printf_i+0x1c2>
 800942a:	8019      	strh	r1, [r3, #0]
 800942c:	2300      	movs	r3, #0
 800942e:	4615      	mov	r5, r2
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	e7bc      	b.n	80093ae <_printf_i+0x14e>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	2100      	movs	r1, #0
 8009438:	1d1a      	adds	r2, r3, #4
 800943a:	602a      	str	r2, [r5, #0]
 800943c:	681d      	ldr	r5, [r3, #0]
 800943e:	6862      	ldr	r2, [r4, #4]
 8009440:	4628      	mov	r0, r5
 8009442:	f000 f909 	bl	8009658 <memchr>
 8009446:	b108      	cbz	r0, 800944c <_printf_i+0x1ec>
 8009448:	1b40      	subs	r0, r0, r5
 800944a:	6060      	str	r0, [r4, #4]
 800944c:	6863      	ldr	r3, [r4, #4]
 800944e:	6123      	str	r3, [r4, #16]
 8009450:	2300      	movs	r3, #0
 8009452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009456:	e7aa      	b.n	80093ae <_printf_i+0x14e>
 8009458:	462a      	mov	r2, r5
 800945a:	4649      	mov	r1, r9
 800945c:	4640      	mov	r0, r8
 800945e:	6923      	ldr	r3, [r4, #16]
 8009460:	47d0      	blx	sl
 8009462:	3001      	adds	r0, #1
 8009464:	d0ad      	beq.n	80093c2 <_printf_i+0x162>
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	079b      	lsls	r3, r3, #30
 800946a:	d413      	bmi.n	8009494 <_printf_i+0x234>
 800946c:	68e0      	ldr	r0, [r4, #12]
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	4298      	cmp	r0, r3
 8009472:	bfb8      	it	lt
 8009474:	4618      	movlt	r0, r3
 8009476:	e7a6      	b.n	80093c6 <_printf_i+0x166>
 8009478:	2301      	movs	r3, #1
 800947a:	4632      	mov	r2, r6
 800947c:	4649      	mov	r1, r9
 800947e:	4640      	mov	r0, r8
 8009480:	47d0      	blx	sl
 8009482:	3001      	adds	r0, #1
 8009484:	d09d      	beq.n	80093c2 <_printf_i+0x162>
 8009486:	3501      	adds	r5, #1
 8009488:	68e3      	ldr	r3, [r4, #12]
 800948a:	9903      	ldr	r1, [sp, #12]
 800948c:	1a5b      	subs	r3, r3, r1
 800948e:	42ab      	cmp	r3, r5
 8009490:	dcf2      	bgt.n	8009478 <_printf_i+0x218>
 8009492:	e7eb      	b.n	800946c <_printf_i+0x20c>
 8009494:	2500      	movs	r5, #0
 8009496:	f104 0619 	add.w	r6, r4, #25
 800949a:	e7f5      	b.n	8009488 <_printf_i+0x228>
 800949c:	08009a56 	.word	0x08009a56
 80094a0:	08009a67 	.word	0x08009a67

080094a4 <__swbuf_r>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	460e      	mov	r6, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	4605      	mov	r5, r0
 80094ac:	b118      	cbz	r0, 80094b6 <__swbuf_r+0x12>
 80094ae:	6a03      	ldr	r3, [r0, #32]
 80094b0:	b90b      	cbnz	r3, 80094b6 <__swbuf_r+0x12>
 80094b2:	f7ff fa2d 	bl	8008910 <__sinit>
 80094b6:	69a3      	ldr	r3, [r4, #24]
 80094b8:	60a3      	str	r3, [r4, #8]
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	071a      	lsls	r2, r3, #28
 80094be:	d525      	bpl.n	800950c <__swbuf_r+0x68>
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	b31b      	cbz	r3, 800950c <__swbuf_r+0x68>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	6922      	ldr	r2, [r4, #16]
 80094c8:	b2f6      	uxtb	r6, r6
 80094ca:	1a98      	subs	r0, r3, r2
 80094cc:	6963      	ldr	r3, [r4, #20]
 80094ce:	4637      	mov	r7, r6
 80094d0:	4283      	cmp	r3, r0
 80094d2:	dc04      	bgt.n	80094de <__swbuf_r+0x3a>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4628      	mov	r0, r5
 80094d8:	f7ff fcbe 	bl	8008e58 <_fflush_r>
 80094dc:	b9e0      	cbnz	r0, 8009518 <__swbuf_r+0x74>
 80094de:	68a3      	ldr	r3, [r4, #8]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	60a3      	str	r3, [r4, #8]
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	6022      	str	r2, [r4, #0]
 80094ea:	701e      	strb	r6, [r3, #0]
 80094ec:	6962      	ldr	r2, [r4, #20]
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d004      	beq.n	80094fe <__swbuf_r+0x5a>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	07db      	lsls	r3, r3, #31
 80094f8:	d506      	bpl.n	8009508 <__swbuf_r+0x64>
 80094fa:	2e0a      	cmp	r6, #10
 80094fc:	d104      	bne.n	8009508 <__swbuf_r+0x64>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f7ff fca9 	bl	8008e58 <_fflush_r>
 8009506:	b938      	cbnz	r0, 8009518 <__swbuf_r+0x74>
 8009508:	4638      	mov	r0, r7
 800950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800950c:	4621      	mov	r1, r4
 800950e:	4628      	mov	r0, r5
 8009510:	f000 f806 	bl	8009520 <__swsetup_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	d0d5      	beq.n	80094c4 <__swbuf_r+0x20>
 8009518:	f04f 37ff 	mov.w	r7, #4294967295
 800951c:	e7f4      	b.n	8009508 <__swbuf_r+0x64>
	...

08009520 <__swsetup_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4b2a      	ldr	r3, [pc, #168]	; (80095cc <__swsetup_r+0xac>)
 8009524:	4605      	mov	r5, r0
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	460c      	mov	r4, r1
 800952a:	b118      	cbz	r0, 8009534 <__swsetup_r+0x14>
 800952c:	6a03      	ldr	r3, [r0, #32]
 800952e:	b90b      	cbnz	r3, 8009534 <__swsetup_r+0x14>
 8009530:	f7ff f9ee 	bl	8008910 <__sinit>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800953a:	0718      	lsls	r0, r3, #28
 800953c:	d422      	bmi.n	8009584 <__swsetup_r+0x64>
 800953e:	06d9      	lsls	r1, r3, #27
 8009540:	d407      	bmi.n	8009552 <__swsetup_r+0x32>
 8009542:	2309      	movs	r3, #9
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	81a3      	strh	r3, [r4, #12]
 8009550:	e034      	b.n	80095bc <__swsetup_r+0x9c>
 8009552:	0758      	lsls	r0, r3, #29
 8009554:	d512      	bpl.n	800957c <__swsetup_r+0x5c>
 8009556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009558:	b141      	cbz	r1, 800956c <__swsetup_r+0x4c>
 800955a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800955e:	4299      	cmp	r1, r3
 8009560:	d002      	beq.n	8009568 <__swsetup_r+0x48>
 8009562:	4628      	mov	r0, r5
 8009564:	f7ff fafa 	bl	8008b5c <_free_r>
 8009568:	2300      	movs	r3, #0
 800956a:	6363      	str	r3, [r4, #52]	; 0x34
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	2300      	movs	r3, #0
 8009576:	6063      	str	r3, [r4, #4]
 8009578:	6923      	ldr	r3, [r4, #16]
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f043 0308 	orr.w	r3, r3, #8
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	b94b      	cbnz	r3, 800959c <__swsetup_r+0x7c>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800958e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009592:	d003      	beq.n	800959c <__swsetup_r+0x7c>
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f891 	bl	80096be <__smakebuf_r>
 800959c:	89a0      	ldrh	r0, [r4, #12]
 800959e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095a2:	f010 0301 	ands.w	r3, r0, #1
 80095a6:	d00a      	beq.n	80095be <__swsetup_r+0x9e>
 80095a8:	2300      	movs	r3, #0
 80095aa:	60a3      	str	r3, [r4, #8]
 80095ac:	6963      	ldr	r3, [r4, #20]
 80095ae:	425b      	negs	r3, r3
 80095b0:	61a3      	str	r3, [r4, #24]
 80095b2:	6923      	ldr	r3, [r4, #16]
 80095b4:	b943      	cbnz	r3, 80095c8 <__swsetup_r+0xa8>
 80095b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095ba:	d1c4      	bne.n	8009546 <__swsetup_r+0x26>
 80095bc:	bd38      	pop	{r3, r4, r5, pc}
 80095be:	0781      	lsls	r1, r0, #30
 80095c0:	bf58      	it	pl
 80095c2:	6963      	ldrpl	r3, [r4, #20]
 80095c4:	60a3      	str	r3, [r4, #8]
 80095c6:	e7f4      	b.n	80095b2 <__swsetup_r+0x92>
 80095c8:	2000      	movs	r0, #0
 80095ca:	e7f7      	b.n	80095bc <__swsetup_r+0x9c>
 80095cc:	200001e0 	.word	0x200001e0

080095d0 <_raise_r>:
 80095d0:	291f      	cmp	r1, #31
 80095d2:	b538      	push	{r3, r4, r5, lr}
 80095d4:	4604      	mov	r4, r0
 80095d6:	460d      	mov	r5, r1
 80095d8:	d904      	bls.n	80095e4 <_raise_r+0x14>
 80095da:	2316      	movs	r3, #22
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	f04f 30ff 	mov.w	r0, #4294967295
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095e6:	b112      	cbz	r2, 80095ee <_raise_r+0x1e>
 80095e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095ec:	b94b      	cbnz	r3, 8009602 <_raise_r+0x32>
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 f830 	bl	8009654 <_getpid_r>
 80095f4:	462a      	mov	r2, r5
 80095f6:	4601      	mov	r1, r0
 80095f8:	4620      	mov	r0, r4
 80095fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095fe:	f000 b817 	b.w	8009630 <_kill_r>
 8009602:	2b01      	cmp	r3, #1
 8009604:	d00a      	beq.n	800961c <_raise_r+0x4c>
 8009606:	1c59      	adds	r1, r3, #1
 8009608:	d103      	bne.n	8009612 <_raise_r+0x42>
 800960a:	2316      	movs	r3, #22
 800960c:	6003      	str	r3, [r0, #0]
 800960e:	2001      	movs	r0, #1
 8009610:	e7e7      	b.n	80095e2 <_raise_r+0x12>
 8009612:	2400      	movs	r4, #0
 8009614:	4628      	mov	r0, r5
 8009616:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800961a:	4798      	blx	r3
 800961c:	2000      	movs	r0, #0
 800961e:	e7e0      	b.n	80095e2 <_raise_r+0x12>

08009620 <raise>:
 8009620:	4b02      	ldr	r3, [pc, #8]	; (800962c <raise+0xc>)
 8009622:	4601      	mov	r1, r0
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	f7ff bfd3 	b.w	80095d0 <_raise_r>
 800962a:	bf00      	nop
 800962c:	200001e0 	.word	0x200001e0

08009630 <_kill_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	2300      	movs	r3, #0
 8009634:	4d06      	ldr	r5, [pc, #24]	; (8009650 <_kill_r+0x20>)
 8009636:	4604      	mov	r4, r0
 8009638:	4608      	mov	r0, r1
 800963a:	4611      	mov	r1, r2
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	f7f7 faf8 	bl	8000c32 <_kill>
 8009642:	1c43      	adds	r3, r0, #1
 8009644:	d102      	bne.n	800964c <_kill_r+0x1c>
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	b103      	cbz	r3, 800964c <_kill_r+0x1c>
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	bd38      	pop	{r3, r4, r5, pc}
 800964e:	bf00      	nop
 8009650:	20001130 	.word	0x20001130

08009654 <_getpid_r>:
 8009654:	f7f7 bae6 	b.w	8000c24 <_getpid>

08009658 <memchr>:
 8009658:	4603      	mov	r3, r0
 800965a:	b510      	push	{r4, lr}
 800965c:	b2c9      	uxtb	r1, r1
 800965e:	4402      	add	r2, r0
 8009660:	4293      	cmp	r3, r2
 8009662:	4618      	mov	r0, r3
 8009664:	d101      	bne.n	800966a <memchr+0x12>
 8009666:	2000      	movs	r0, #0
 8009668:	e003      	b.n	8009672 <memchr+0x1a>
 800966a:	7804      	ldrb	r4, [r0, #0]
 800966c:	3301      	adds	r3, #1
 800966e:	428c      	cmp	r4, r1
 8009670:	d1f6      	bne.n	8009660 <memchr+0x8>
 8009672:	bd10      	pop	{r4, pc}

08009674 <__swhatbuf_r>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	460c      	mov	r4, r1
 8009678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967c:	4615      	mov	r5, r2
 800967e:	2900      	cmp	r1, #0
 8009680:	461e      	mov	r6, r3
 8009682:	b096      	sub	sp, #88	; 0x58
 8009684:	da0c      	bge.n	80096a0 <__swhatbuf_r+0x2c>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	2100      	movs	r1, #0
 800968a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800968e:	bf0c      	ite	eq
 8009690:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009694:	2340      	movne	r3, #64	; 0x40
 8009696:	2000      	movs	r0, #0
 8009698:	6031      	str	r1, [r6, #0]
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	b016      	add	sp, #88	; 0x58
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	466a      	mov	r2, sp
 80096a2:	f000 f849 	bl	8009738 <_fstat_r>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	dbed      	blt.n	8009686 <__swhatbuf_r+0x12>
 80096aa:	9901      	ldr	r1, [sp, #4]
 80096ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096b4:	4259      	negs	r1, r3
 80096b6:	4159      	adcs	r1, r3
 80096b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096bc:	e7eb      	b.n	8009696 <__swhatbuf_r+0x22>

080096be <__smakebuf_r>:
 80096be:	898b      	ldrh	r3, [r1, #12]
 80096c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096c2:	079d      	lsls	r5, r3, #30
 80096c4:	4606      	mov	r6, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	d507      	bpl.n	80096da <__smakebuf_r+0x1c>
 80096ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	2301      	movs	r3, #1
 80096d4:	6163      	str	r3, [r4, #20]
 80096d6:	b002      	add	sp, #8
 80096d8:	bd70      	pop	{r4, r5, r6, pc}
 80096da:	466a      	mov	r2, sp
 80096dc:	ab01      	add	r3, sp, #4
 80096de:	f7ff ffc9 	bl	8009674 <__swhatbuf_r>
 80096e2:	9900      	ldr	r1, [sp, #0]
 80096e4:	4605      	mov	r5, r0
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff faa8 	bl	8008c3c <_malloc_r>
 80096ec:	b948      	cbnz	r0, 8009702 <__smakebuf_r+0x44>
 80096ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f2:	059a      	lsls	r2, r3, #22
 80096f4:	d4ef      	bmi.n	80096d6 <__smakebuf_r+0x18>
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	f043 0302 	orr.w	r3, r3, #2
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	e7e3      	b.n	80096ca <__smakebuf_r+0xc>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	6020      	str	r0, [r4, #0]
 8009706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	9b00      	ldr	r3, [sp, #0]
 800970e:	6120      	str	r0, [r4, #16]
 8009710:	6163      	str	r3, [r4, #20]
 8009712:	9b01      	ldr	r3, [sp, #4]
 8009714:	b15b      	cbz	r3, 800972e <__smakebuf_r+0x70>
 8009716:	4630      	mov	r0, r6
 8009718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800971c:	f000 f81e 	bl	800975c <_isatty_r>
 8009720:	b128      	cbz	r0, 800972e <__smakebuf_r+0x70>
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	f023 0303 	bic.w	r3, r3, #3
 8009728:	f043 0301 	orr.w	r3, r3, #1
 800972c:	81a3      	strh	r3, [r4, #12]
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	431d      	orrs	r5, r3
 8009732:	81a5      	strh	r5, [r4, #12]
 8009734:	e7cf      	b.n	80096d6 <__smakebuf_r+0x18>
	...

08009738 <_fstat_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	2300      	movs	r3, #0
 800973c:	4d06      	ldr	r5, [pc, #24]	; (8009758 <_fstat_r+0x20>)
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f7f7 fad2 	bl	8000cee <_fstat>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d102      	bne.n	8009754 <_fstat_r+0x1c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b103      	cbz	r3, 8009754 <_fstat_r+0x1c>
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	20001130 	.word	0x20001130

0800975c <_isatty_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	2300      	movs	r3, #0
 8009760:	4d05      	ldr	r5, [pc, #20]	; (8009778 <_isatty_r+0x1c>)
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f7 fad0 	bl	8000d0c <_isatty>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_isatty_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_isatty_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20001130 	.word	0x20001130

0800977c <_init>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	bf00      	nop
 8009780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009782:	bc08      	pop	{r3}
 8009784:	469e      	mov	lr, r3
 8009786:	4770      	bx	lr

08009788 <_fini>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr
