
qam-mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008188  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008294  08008294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a0  080083a0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080083a0  080083a0  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083a0  080083a0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080083a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d94  200001ec  08008594  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f80  08008594  00020f80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ef3  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f0  00000000  00000000  00036108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  000396f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  0003a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a8bd  00000000  00000000  0003ace0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7e2  00000000  00000000  0005559d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008593b  00000000  00000000  00063d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e96ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  000e9738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	0800827c 	.word	0x0800827c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	0800827c 	.word	0x0800827c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DMA1_Channel2_IRQHandler>:



void DMA1_Channel2_IRQHandler() __attribute__ ((interrupt));
void DMA1_Channel2_IRQHandler()
{
 800015c:	4668      	mov	r0, sp
 800015e:	f020 0107 	bic.w	r1, r0, #7
 8000162:	468d      	mov	sp, r1
 8000164:	b481      	push	{r0, r7}
 8000166:	af00      	add	r7, sp, #0
	SET(DMA1->IFCR, DMA_IFCR_CTCIF2);
 8000168:	4b05      	ldr	r3, [pc, #20]	; (8000180 <DMA1_Channel2_IRQHandler+0x24>)
 800016a:	685b      	ldr	r3, [r3, #4]
 800016c:	4a04      	ldr	r2, [pc, #16]	; (8000180 <DMA1_Channel2_IRQHandler+0x24>)
 800016e:	f043 0320 	orr.w	r3, r3, #32
 8000172:	6053      	str	r3, [r2, #4]

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc81      	pop	{r0, r7}
 800017a:	4685      	mov	sp, r0
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	40020000 	.word	0x40020000

08000184 <pow10i>:
#include "common.h"
#include <string.h>

static uint64_t pow10i(uint16_t exp)
{
 8000184:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 8000188:	b085      	sub	sp, #20
 800018a:	af00      	add	r7, sp, #0
 800018c:	4603      	mov	r3, r0
 800018e:	80fb      	strh	r3, [r7, #6]
	if(exp == 0)
 8000190:	88fb      	ldrh	r3, [r7, #6]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d104      	bne.n	80001a0 <pow10i+0x1c>
		return 1;
 8000196:	f04f 0301 	mov.w	r3, #1
 800019a:	f04f 0400 	mov.w	r4, #0
 800019e:	e029      	b.n	80001f4 <pow10i+0x70>
	uint64_t n = 1;
 80001a0:	f04f 0301 	mov.w	r3, #1
 80001a4:	f04f 0400 	mov.w	r4, #0
 80001a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(exp--)
 80001ac:	e01b      	b.n	80001e6 <pow10i+0x62>
		n *= 10;
 80001ae:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80001b2:	46ab      	mov	fp, r5
 80001b4:	46b4      	mov	ip, r6
 80001b6:	f04f 0100 	mov.w	r1, #0
 80001ba:	f04f 0200 	mov.w	r2, #0
 80001be:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80001c2:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80001c6:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80001ca:	468b      	mov	fp, r1
 80001cc:	4694      	mov	ip, r2
 80001ce:	eb1b 0b05 	adds.w	fp, fp, r5
 80001d2:	eb4c 0c06 	adc.w	ip, ip, r6
 80001d6:	eb1b 030b 	adds.w	r3, fp, fp
 80001da:	eb4c 040c 	adc.w	r4, ip, ip
 80001de:	469b      	mov	fp, r3
 80001e0:	46a4      	mov	ip, r4
 80001e2:	e9c7 bc02 	strd	fp, ip, [r7, #8]
	while(exp--)
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	1e5a      	subs	r2, r3, #1
 80001ea:	80fa      	strh	r2, [r7, #6]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d1de      	bne.n	80001ae <pow10i+0x2a>
	return n;
 80001f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	4621      	mov	r1, r4
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8000200:	4770      	bx	lr

08000202 <StrToInt>:


int64_t StrToInt(const char *str, uint16_t len)
{
 8000202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000204:	b087      	sub	sp, #28
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
 800020a:	460b      	mov	r3, r1
 800020c:	807b      	strh	r3, [r7, #2]
	if(len == 0)
 800020e:	887b      	ldrh	r3, [r7, #2]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d104      	bne.n	800021e <StrToInt+0x1c>
		len = strlen(str);
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f7ff ff99 	bl	800014c <strlen>
 800021a:	4603      	mov	r3, r0
 800021c:	807b      	strh	r3, [r7, #2]

	int64_t tmp = 0;
 800021e:	f04f 0300 	mov.w	r3, #0
 8000222:	f04f 0400 	mov.w	r4, #0
 8000226:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for(int32_t i = (len - 1); i >= 0; i--)
 800022a:	887b      	ldrh	r3, [r7, #2]
 800022c:	3b01      	subs	r3, #1
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e045      	b.n	80002be <StrToInt+0xbc>
	{
		if((i == 0) && (str[0] == '-'))
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d109      	bne.n	800024c <StrToInt+0x4a>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b2d      	cmp	r3, #45	; 0x2d
 800023e:	d105      	bne.n	800024c <StrToInt+0x4a>
		{
			return -tmp;
 8000240:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000244:	425b      	negs	r3, r3
 8000246:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800024a:	e03d      	b.n	80002c8 <StrToInt+0xc6>
		}
		else if(IS_NUMBER(str[i]))
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b2f      	cmp	r3, #47	; 0x2f
 8000256:	d92a      	bls.n	80002ae <StrToInt+0xac>
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b39      	cmp	r3, #57	; 0x39
 8000262:	d824      	bhi.n	80002ae <StrToInt+0xac>
			tmp += ((str[i] - '0') * pow10i(len - 1 - i));
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	4413      	add	r3, r2
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	3b30      	subs	r3, #48	; 0x30
 800026e:	461c      	mov	r4, r3
 8000270:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	b29b      	uxth	r3, r3
 8000278:	887a      	ldrh	r2, [r7, #2]
 800027a:	1ad3      	subs	r3, r2, r3
 800027c:	b29b      	uxth	r3, r3
 800027e:	3b01      	subs	r3, #1
 8000280:	b29b      	uxth	r3, r3
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff7e 	bl	8000184 <pow10i>
 8000288:	4602      	mov	r2, r0
 800028a:	460b      	mov	r3, r1
 800028c:	fb02 f005 	mul.w	r0, r2, r5
 8000290:	fb04 f103 	mul.w	r1, r4, r3
 8000294:	4401      	add	r1, r0
 8000296:	fba4 5602 	umull	r5, r6, r4, r2
 800029a:	198a      	adds	r2, r1, r6
 800029c:	4616      	mov	r6, r2
 800029e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80002a2:	186b      	adds	r3, r5, r1
 80002a4:	eb46 0402 	adc.w	r4, r6, r2
 80002a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80002ac:	e004      	b.n	80002b8 <StrToInt+0xb6>
		else
			return 0;
 80002ae:	f04f 0300 	mov.w	r3, #0
 80002b2:	f04f 0400 	mov.w	r4, #0
 80002b6:	e007      	b.n	80002c8 <StrToInt+0xc6>
	for(int32_t i = (len - 1); i >= 0; i--)
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	dab6      	bge.n	8000232 <StrToInt+0x30>
	}
	return tmp;
 80002c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	4621      	mov	r1, r4
 80002cc:	371c      	adds	r7, #28
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d8:	f001 f8f2 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002dc:	f000 f884 	bl	80003e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  	 //USB pullup down when the peripheral is being initialized
	SET(RCC->APB2ENR, RCC_APB2ENR_IOPAEN);
 80002e0:	4b3c      	ldr	r3, [pc, #240]	; (80003d4 <main+0x100>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a3b      	ldr	r2, [pc, #236]	; (80003d4 <main+0x100>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
	SET(GPIOA->CRH, GPIO_CRH_MODE15_1);
 80002ec:	4b3a      	ldr	r3, [pc, #232]	; (80003d8 <main+0x104>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	4a39      	ldr	r2, [pc, #228]	; (80003d8 <main+0x104>)
 80002f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80002f6:	6053      	str	r3, [r2, #4]
	RESET(GPIOA->CRH, GPIO_CRH_CNF15);
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <main+0x104>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a36      	ldr	r2, [pc, #216]	; (80003d8 <main+0x104>)
 80002fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000302:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR = GPIO_BSRR_BR15;
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <main+0x104>)
 8000306:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800030a:	611a      	str	r2, [r3, #16]
	HAL_Delay(100);
 800030c:	2064      	movs	r0, #100	; 0x64
 800030e:	f001 f939 	bl	8001584 <HAL_Delay>
	GPIOA->BSRR = GPIO_BSRR_BS15;
 8000312:	4b31      	ldr	r3, [pc, #196]	; (80003d8 <main+0x104>)
 8000314:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000318:	611a      	str	r2, [r3, #16]


	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <main+0x100>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <main+0x100>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	6193      	str	r3, [r2, #24]
	GPIOA->CRH |= GPIO_CRH_MODE12_1;
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <main+0x104>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	4a2b      	ldr	r2, [pc, #172]	; (80003d8 <main+0x104>)
 800032c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000330:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~GPIO_CRH_CNF12;
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <main+0x104>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	4a28      	ldr	r2, [pc, #160]	; (80003d8 <main+0x104>)
 8000338:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800033c:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR = GPIO_BSRR_BR12;
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <main+0x104>)
 8000340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000344:	611a      	str	r2, [r3, #16]
	HAL_Delay(100);
 8000346:	2064      	movs	r0, #100	; 0x64
 8000348:	f001 f91c 	bl	8001584 <HAL_Delay>
	GPIOA->CRH &= ~GPIO_CRH_MODE12;
 800034c:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <main+0x104>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <main+0x104>)
 8000352:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000356:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF12_0;
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <main+0x104>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4a1e      	ldr	r2, [pc, #120]	; (80003d8 <main+0x104>)
 800035e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000362:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000364:	f000 f89a 	bl	800049c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000368:	f007 f988 	bl	800767c <MX_USB_DEVICE_Init>
  //USB pullup high to force enumeration




	UartInit(&UartUsb, NULL, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	2100      	movs	r1, #0
 8000370:	481a      	ldr	r0, [pc, #104]	; (80003dc <main+0x108>)
 8000372:	f000 ff2f 	bl	80011d4 <UartInit>
	UartConfig(&UartUsb, 1);
 8000376:	2101      	movs	r1, #1
 8000378:	4818      	ldr	r0, [pc, #96]	; (80003dc <main+0x108>)
 800037a:	f000 ff69 	bl	8001250 <UartConfig>

	ModulatorInit();
 800037e:	f000 f8cf 	bl	8000520 <ModulatorInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(UartUsb.rxType != DATA_NOTHING)
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <main+0x108>)
 8000384:	7a1b      	ldrb	r3, [r3, #8]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00f      	beq.n	80003aa <main+0xd6>
	  {
		  TermHandleSpecial(&UartUsb);
 800038a:	4814      	ldr	r0, [pc, #80]	; (80003dc <main+0x108>)
 800038c:	f000 fb80 	bl	8000a90 <TermHandleSpecial>
		  if(UartUsb.rxType != DATA_USB)
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <main+0x108>)
 8000392:	7a1b      	ldrb	r3, [r3, #8]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d005      	beq.n	80003a4 <main+0xd0>
		  {
			  TermParse(&UartUsb);
 8000398:	4810      	ldr	r0, [pc, #64]	; (80003dc <main+0x108>)
 800039a:	f000 fbfd 	bl	8000b98 <TermParse>
		  	  UartClearRx(&UartUsb);
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <main+0x108>)
 80003a0:	f001 f858 	bl	8001454 <UartClearRx>
		  }
		  UartUsb.rxType = DATA_NOTHING;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <main+0x108>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	721a      	strb	r2, [r3, #8]
	  }
	  if(Uart1.rxType != DATA_NOTHING)
 80003aa:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <main+0x10c>)
 80003ac:	7a1b      	ldrb	r3, [r3, #8]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d005      	beq.n	80003be <main+0xea>
	  {
		  TermParse(&Uart1);
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <main+0x10c>)
 80003b4:	f000 fbf0 	bl	8000b98 <TermParse>
		  UartClearRx(&Uart1);
 80003b8:	4809      	ldr	r0, [pc, #36]	; (80003e0 <main+0x10c>)
 80003ba:	f001 f84b 	bl	8001454 <UartClearRx>
	  }
	  if(Uart2.rxType != DATA_NOTHING)
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <main+0x110>)
 80003c0:	7a1b      	ldrb	r3, [r3, #8]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0dd      	beq.n	8000382 <main+0xae>
	  {
		  TermParse(&Uart2);
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <main+0x110>)
 80003c8:	f000 fbe6 	bl	8000b98 <TermParse>
		  UartClearRx(&Uart2);
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <main+0x110>)
 80003ce:	f001 f841 	bl	8001454 <UartClearRx>
	  if(UartUsb.rxType != DATA_NOTHING)
 80003d2:	e7d6      	b.n	8000382 <main+0xae>
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800
 80003dc:	20000444 	.word	0x20000444
 80003e0:	20000214 	.word	0x20000214
 80003e4:	2000032c 	.word	0x2000032c

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b094      	sub	sp, #80	; 0x50
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f2:	2228      	movs	r2, #40	; 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f007 fe7e 	bl	80080f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000418:	2301      	movs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000432:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000434:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000438:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043e:	4618      	mov	r0, r3
 8000440:	f002 fe92 	bl	8003168 <HAL_RCC_OscConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800044a:	f000 f849 	bl	80004e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044e:	230f      	movs	r3, #15
 8000450:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	2302      	movs	r3, #2
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f003 f8fc 	bl	8003668 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000476:	f000 f833 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800047a:	2310      	movs	r3, #16
 800047c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fa59 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000490:	f000 f826 	bl	80004e0 <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3750      	adds	r7, #80	; 0x50
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_GPIO_Init+0x40>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <MX_GPIO_Init+0x40>)
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_GPIO_Init+0x40>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0320 	and.w	r3, r3, #32
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_GPIO_Init+0x40>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <MX_GPIO_Init+0x40>)
 80004c0:	f043 0304 	orr.w	r3, r3, #4
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_GPIO_Init+0x40>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0304 	and.w	r3, r3, #4
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <Error_Handler+0x6>

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4906      	ldr	r1, [pc, #24]	; (800051c <__NVIC_EnableIRQ+0x34>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	e000e100 	.word	0xe000e100

08000520 <ModulatorInit>:
static uint8_t mask = 0xF;
static uint32_t baudrate = 100;
static uint8_t (*callback)(void) = NULL;

void ModulatorInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	SET(RCC->APB2ENR,  RCC_APB2ENR_IOPAEN);
 8000524:	4b5c      	ldr	r3, [pc, #368]	; (8000698 <ModulatorInit+0x178>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a5b      	ldr	r2, [pc, #364]	; (8000698 <ModulatorInit+0x178>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
	SET(RCC->APB2ENR,  RCC_APB2ENR_IOPBEN);
 8000530:	4b59      	ldr	r3, [pc, #356]	; (8000698 <ModulatorInit+0x178>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a58      	ldr	r2, [pc, #352]	; (8000698 <ModulatorInit+0x178>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
	//PA3
	SET(GPIOA->CRL, GPIO_CRL_MODE3_0);
 800053c:	4b57      	ldr	r3, [pc, #348]	; (800069c <ModulatorInit+0x17c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a56      	ldr	r2, [pc, #344]	; (800069c <ModulatorInit+0x17c>)
 8000542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000546:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE3_1);
 8000548:	4b54      	ldr	r3, [pc, #336]	; (800069c <ModulatorInit+0x17c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a53      	ldr	r2, [pc, #332]	; (800069c <ModulatorInit+0x17c>)
 800054e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000552:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF3);
 8000554:	4b51      	ldr	r3, [pc, #324]	; (800069c <ModulatorInit+0x17c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a50      	ldr	r2, [pc, #320]	; (800069c <ModulatorInit+0x17c>)
 800055a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800055e:	6013      	str	r3, [r2, #0]
	//PA4
	SET(GPIOA->CRL, GPIO_CRL_MODE4_0);
 8000560:	4b4e      	ldr	r3, [pc, #312]	; (800069c <ModulatorInit+0x17c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a4d      	ldr	r2, [pc, #308]	; (800069c <ModulatorInit+0x17c>)
 8000566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800056a:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE4_1);
 800056c:	4b4b      	ldr	r3, [pc, #300]	; (800069c <ModulatorInit+0x17c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a4a      	ldr	r2, [pc, #296]	; (800069c <ModulatorInit+0x17c>)
 8000572:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000576:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF4);
 8000578:	4b48      	ldr	r3, [pc, #288]	; (800069c <ModulatorInit+0x17c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a47      	ldr	r2, [pc, #284]	; (800069c <ModulatorInit+0x17c>)
 800057e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000582:	6013      	str	r3, [r2, #0]
	//PA5
	SET(GPIOA->CRL, GPIO_CRL_MODE5_0);
 8000584:	4b45      	ldr	r3, [pc, #276]	; (800069c <ModulatorInit+0x17c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a44      	ldr	r2, [pc, #272]	; (800069c <ModulatorInit+0x17c>)
 800058a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058e:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE5_1);
 8000590:	4b42      	ldr	r3, [pc, #264]	; (800069c <ModulatorInit+0x17c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a41      	ldr	r2, [pc, #260]	; (800069c <ModulatorInit+0x17c>)
 8000596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800059a:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF5);
 800059c:	4b3f      	ldr	r3, [pc, #252]	; (800069c <ModulatorInit+0x17c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a3e      	ldr	r2, [pc, #248]	; (800069c <ModulatorInit+0x17c>)
 80005a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80005a6:	6013      	str	r3, [r2, #0]
	//PA6
	SET(GPIOA->CRL, GPIO_CRL_MODE6_0);
 80005a8:	4b3c      	ldr	r3, [pc, #240]	; (800069c <ModulatorInit+0x17c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a3b      	ldr	r2, [pc, #236]	; (800069c <ModulatorInit+0x17c>)
 80005ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005b2:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE6_1);
 80005b4:	4b39      	ldr	r3, [pc, #228]	; (800069c <ModulatorInit+0x17c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a38      	ldr	r2, [pc, #224]	; (800069c <ModulatorInit+0x17c>)
 80005ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80005be:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF6);
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <ModulatorInit+0x17c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a35      	ldr	r2, [pc, #212]	; (800069c <ModulatorInit+0x17c>)
 80005c6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80005ca:	6013      	str	r3, [r2, #0]
	//PA7
	SET(GPIOA->CRL, GPIO_CRL_MODE7_0);
 80005cc:	4b33      	ldr	r3, [pc, #204]	; (800069c <ModulatorInit+0x17c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a32      	ldr	r2, [pc, #200]	; (800069c <ModulatorInit+0x17c>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_MODE7_1);
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <ModulatorInit+0x17c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a2f      	ldr	r2, [pc, #188]	; (800069c <ModulatorInit+0x17c>)
 80005de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80005e2:	6013      	str	r3, [r2, #0]
	RESET(GPIOA->CRL, GPIO_CRL_CNF7);
 80005e4:	4b2d      	ldr	r3, [pc, #180]	; (800069c <ModulatorInit+0x17c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2c      	ldr	r2, [pc, #176]	; (800069c <ModulatorInit+0x17c>)
 80005ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80005ee:	6013      	str	r3, [r2, #0]
	//PB0
	SET(GPIOB->CRL, GPIO_CRL_MODE0_0);
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <ModulatorInit+0x180>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <ModulatorInit+0x180>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_MODE0_1);
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <ModulatorInit+0x180>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <ModulatorInit+0x180>)
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_CNF0);
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <ModulatorInit+0x180>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <ModulatorInit+0x180>)
 800060e:	f023 030c 	bic.w	r3, r3, #12
 8000612:	6013      	str	r3, [r2, #0]
	//PB1
	SET(GPIOB->CRL, GPIO_CRL_MODE1_0);
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <ModulatorInit+0x180>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <ModulatorInit+0x180>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_MODE1_1);
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <ModulatorInit+0x180>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <ModulatorInit+0x180>)
 8000626:	f023 0320 	bic.w	r3, r3, #32
 800062a:	6013      	str	r3, [r2, #0]
	RESET(GPIOB->CRL, GPIO_CRL_CNF1);
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <ModulatorInit+0x180>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <ModulatorInit+0x180>)
 8000632:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000636:	6013      	str	r3, [r2, #0]
	//PB10
	SET(GPIOB->CRH, GPIO_CRH_MODE10_0);
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <ModulatorInit+0x180>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <ModulatorInit+0x180>)
 800063e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000642:	6053      	str	r3, [r2, #4]
	RESET(GPIOB->CRH, GPIO_CRH_MODE10_1);
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <ModulatorInit+0x180>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <ModulatorInit+0x180>)
 800064a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800064e:	6053      	str	r3, [r2, #4]
	RESET(GPIOB->CRH, GPIO_CRH_CNF10);
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <ModulatorInit+0x180>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <ModulatorInit+0x180>)
 8000656:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800065a:	6053      	str	r3, [r2, #4]

	ModulatorPut(0);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f827 	bl	80006b0 <ModulatorPut>


	SET(RCC->APB2ENR, RCC_APB2ENR_TIM1EN);
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <ModulatorInit+0x178>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <ModulatorInit+0x178>)
 8000668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800066c:	6193      	str	r3, [r2, #24]
	//run timer at 1 MHz, minimum baudrate is 15.26 Bd
	TIM1->PSC = 71;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <ModulatorInit+0x184>)
 8000670:	2247      	movs	r2, #71	; 0x47
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
	SET(TIM1->DIER, TIM_DIER_UIE);
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <ModulatorInit+0x184>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <ModulatorInit+0x184>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = 1000000 / baudrate;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <ModulatorInit+0x188>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <ModulatorInit+0x184>)
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <ModulatorInit+0x18c>)
 8000688:	fbb1 f3f3 	udiv	r3, r1, r3
 800068c:	62d3      	str	r3, [r2, #44]	; 0x2c
	NVIC_EnableIRQ(TIM1_UP_IRQn);
 800068e:	2019      	movs	r0, #25
 8000690:	f7ff ff2a 	bl	80004e8 <__NVIC_EnableIRQ>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	20000008 	.word	0x20000008
 80006ac:	000f4240 	.word	0x000f4240

080006b0 <ModulatorPut>:

void ModulatorPut(uint8_t value)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	value = lut[value & mask]; //map value to constellation point
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <ModulatorPut+0xcc>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a30      	ldr	r2, [pc, #192]	; (8000780 <ModulatorPut+0xd0>)
 80006c0:	7811      	ldrb	r1, [r2, #0]
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	400a      	ands	r2, r1
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	71fb      	strb	r3, [r7, #7]

	if(value & 1)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d007      	beq.n	80006e8 <ModulatorPut+0x38>
	{
		GPIOA->BSRR = GPIO_BSRR_BS3;
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <ModulatorPut+0xd4>)
 80006da:	2208      	movs	r2, #8
 80006dc:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BR4;
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <ModulatorPut+0xd4>)
 80006e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006e4:	611a      	str	r2, [r3, #16]
 80006e6:	e006      	b.n	80006f6 <ModulatorPut+0x46>
	}
	else
	{
		GPIOA->BSRR = GPIO_BSRR_BR3;
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <ModulatorPut+0xd4>)
 80006ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006ee:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BS4;
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <ModulatorPut+0xd4>)
 80006f2:	2210      	movs	r2, #16
 80006f4:	611a      	str	r2, [r3, #16]
	}

	//"inner" outputs are actually swapped due to use of Butler matrix without output crossover
	if(value & 4)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d007      	beq.n	8000710 <ModulatorPut+0x60>
	{
		GPIOA->BSRR = GPIO_BSRR_BS5;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <ModulatorPut+0xd4>)
 8000702:	2220      	movs	r2, #32
 8000704:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BR6;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <ModulatorPut+0xd4>)
 8000708:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	e006      	b.n	800071e <ModulatorPut+0x6e>
	}
	else
	{
		GPIOA->BSRR = GPIO_BSRR_BR5;
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <ModulatorPut+0xd4>)
 8000712:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000716:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = GPIO_BSRR_BS6;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <ModulatorPut+0xd4>)
 800071a:	2240      	movs	r2, #64	; 0x40
 800071c:	611a      	str	r2, [r3, #16]
	}

	if(value & 2)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	2b00      	cmp	r3, #0
 8000726:	d007      	beq.n	8000738 <ModulatorPut+0x88>
	{
		GPIOA->BSRR = GPIO_BSRR_BS7;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <ModulatorPut+0xd4>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BR0;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <ModulatorPut+0xd8>)
 8000730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000734:	611a      	str	r2, [r3, #16]
 8000736:	e006      	b.n	8000746 <ModulatorPut+0x96>
	}
	else
	{
		GPIOA->BSRR = GPIO_BSRR_BR7;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <ModulatorPut+0xd4>)
 800073a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800073e:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BS0;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <ModulatorPut+0xd8>)
 8000742:	2201      	movs	r2, #1
 8000744:	611a      	str	r2, [r3, #16]
	}

	if(value & 8)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	2b00      	cmp	r3, #0
 800074e:	d007      	beq.n	8000760 <ModulatorPut+0xb0>
	{
		GPIOB->BSRR = GPIO_BSRR_BS1;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <ModulatorPut+0xd8>)
 8000752:	2202      	movs	r2, #2
 8000754:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BR10;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <ModulatorPut+0xd8>)
 8000758:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800075c:	611a      	str	r2, [r3, #16]
	else
	{
		GPIOB->BSRR = GPIO_BSRR_BR1;
		GPIOB->BSRR = GPIO_BSRR_BS10;
	}
}
 800075e:	e007      	b.n	8000770 <ModulatorPut+0xc0>
		GPIOB->BSRR = GPIO_BSRR_BR1;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <ModulatorPut+0xd8>)
 8000762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000766:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = GPIO_BSRR_BS10;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <ModulatorPut+0xd8>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	611a      	str	r2, [r3, #16]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00

0800078c <ModulatorSetMode>:

void ModulatorSetMode(enum Modulator m)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	mode = m;
 8000796:	4a11      	ldr	r2, [pc, #68]	; (80007dc <ModulatorSetMode+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	7013      	strb	r3, [r2, #0]
	switch(m)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d002      	beq.n	80007a8 <ModulatorSetMode+0x1c>
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d007      	beq.n	80007b6 <ModulatorSetMode+0x2a>
 80007a6:	e00d      	b.n	80007c4 <ModulatorSetMode+0x38>
	{
		case QAM4:
			mask = 0x3;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <ModulatorSetMode+0x54>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	701a      	strb	r2, [r3, #0]
			lut = (uint8_t*)qpsk;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <ModulatorSetMode+0x58>)
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <ModulatorSetMode+0x5c>)
 80007b2:	601a      	str	r2, [r3, #0]
			break;
 80007b4:	e00d      	b.n	80007d2 <ModulatorSetMode+0x46>
		case BPSK:
			mask = 0x1;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <ModulatorSetMode+0x54>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
			lut = (uint8_t*)bpsk;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <ModulatorSetMode+0x58>)
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <ModulatorSetMode+0x60>)
 80007c0:	601a      	str	r2, [r3, #0]
			break;
 80007c2:	e006      	b.n	80007d2 <ModulatorSetMode+0x46>
		default:
		case QAM16:
			mask = 0xF;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <ModulatorSetMode+0x54>)
 80007c6:	220f      	movs	r2, #15
 80007c8:	701a      	strb	r2, [r3, #0]
			lut = (uint8_t*)qam16;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <ModulatorSetMode+0x58>)
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <ModulatorSetMode+0x64>)
 80007ce:	601a      	str	r2, [r3, #0]
			break;
 80007d0:	bf00      	nop
	}
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000208 	.word	0x20000208
 80007e0:	20000004 	.word	0x20000004
 80007e4:	20000000 	.word	0x20000000
 80007e8:	08008388 	.word	0x08008388
 80007ec:	0800838c 	.word	0x0800838c
 80007f0:	08008378 	.word	0x08008378

080007f4 <ModulatorSetBaudrate>:

uint32_t ModulatorSetBaudrate(uint32_t baud)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	//assume the timer runs at 1 MHz
	uint32_t arr = 1000000 / baud;
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <ModulatorSetBaudrate+0x34>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	fbb2 f3f3 	udiv	r3, r2, r3
 8000804:	60fb      	str	r3, [r7, #12]
	TIM1->ARR = arr;
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <ModulatorSetBaudrate+0x38>)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	62d3      	str	r3, [r2, #44]	; 0x2c
	baudrate = arr * 1000000;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4a06      	ldr	r2, [pc, #24]	; (8000828 <ModulatorSetBaudrate+0x34>)
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <ModulatorSetBaudrate+0x3c>)
 8000816:	6013      	str	r3, [r2, #0]
	return baudrate;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <ModulatorSetBaudrate+0x3c>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	000f4240 	.word	0x000f4240
 800082c:	40012c00 	.word	0x40012c00
 8000830:	20000008 	.word	0x20000008

08000834 <ModulatorStartTimer>:

void ModulatorStartTimer(uint8_t (*symbolCallback)(void))
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	if(NULL == symbolCallback)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d106      	bne.n	8000850 <ModulatorStartTimer+0x1c>
	{
		RESET(TIM1->CR1, TIM_CR1_CEN);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <ModulatorStartTimer+0x38>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <ModulatorStartTimer+0x38>)
 8000848:	f023 0301 	bic.w	r3, r3, #1
 800084c:	6013      	str	r3, [r2, #0]
		return;
 800084e:	e008      	b.n	8000862 <ModulatorStartTimer+0x2e>
	}
	callback = symbolCallback;
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <ModulatorStartTimer+0x3c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
	SET(TIM1->CR1, TIM_CR1_CEN);
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <ModulatorStartTimer+0x38>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <ModulatorStartTimer+0x38>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6013      	str	r3, [r2, #0]
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40012c00 	.word	0x40012c00
 8000870:	2000020c 	.word	0x2000020c

08000874 <ModulatorStop>:

void ModulatorStop(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	RESET(TIM1->CR1, TIM_CR1_CEN);
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <ModulatorStop+0x18>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <ModulatorStop+0x18>)
 800087e:	f023 0301 	bic.w	r3, r3, #1
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40012c00 	.word	0x40012c00

08000890 <randomCallback>:

static uint8_t randomCallback(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	return rand() % (mask + 1);
 8000894:	f007 fc38 	bl	8008108 <rand>
 8000898:	4602      	mov	r2, r0
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <randomCallback+0x20>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	fb92 f1f3 	sdiv	r1, r2, r3
 80008a4:	fb03 f301 	mul.w	r3, r3, r1
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	b2db      	uxtb	r3, r3
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000004 	.word	0x20000004

080008b4 <ModulatorStartRandom>:

void ModulatorStartRandom(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	ModulatorStartTimer(&randomCallback);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <ModulatorStartRandom+0x10>)
 80008ba:	f7ff ffbb 	bl	8000834 <ModulatorStartTimer>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	08000891 	.word	0x08000891

080008c8 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler() __attribute__((interrupt));
void TIM1_UP_IRQHandler()
{
 80008c8:	4668      	mov	r0, sp
 80008ca:	f020 0107 	bic.w	r1, r0, #7
 80008ce:	468d      	mov	sp, r1
 80008d0:	b589      	push	{r0, r3, r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	RESET(TIM1->SR, TIM_SR_UIF);
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <TIM1_UP_IRQHandler+0x3c>)
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <TIM1_UP_IRQHandler+0x3c>)
 80008da:	f023 0301 	bic.w	r3, r3, #1
 80008de:	6113      	str	r3, [r2, #16]
	if(NULL != callback)
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <TIM1_UP_IRQHandler+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <TIM1_UP_IRQHandler+0x2e>
		ModulatorPut(callback());
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <TIM1_UP_IRQHandler+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4798      	blx	r3
 80008ee:	4603      	mov	r3, r0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fedd 	bl	80006b0 <ModulatorPut>
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80008fe:	4685      	mov	sp, r0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40012c00 	.word	0x40012c00
 8000908:	2000020c 	.word	0x2000020c

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_MspInit+0x5c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x5c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_MspInit+0x60>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_MspInit+0x60>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <__NVIC_SystemReset+0x20>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000980:	4903      	ldr	r1, [pc, #12]	; (8000990 <__NVIC_SystemReset+0x20>)
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <__NVIC_SystemReset+0x24>)
 8000984:	4313      	orrs	r3, r2
 8000986:	60cb      	str	r3, [r1, #12]
 8000988:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <__NVIC_SystemReset+0x1c>
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	05fa0004 	.word	0x05fa0004

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	NVIC_SystemReset();
 800099c:	f7ff ffe8 	bl	8000970 <__NVIC_SystemReset>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80009a4:	f7ff ffe4 	bl	8000970 <__NVIC_SystemReset>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	NVIC_SystemReset();
 80009ac:	f7ff ffe0 	bl	8000970 <__NVIC_SystemReset>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	NVIC_SystemReset();
 80009b4:	f7ff ffdc 	bl	8000970 <__NVIC_SystemReset>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	NVIC_SystemReset();
 80009bc:	f7ff ffd8 	bl	8000970 <__NVIC_SystemReset>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 fdb0 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80009f6:	f001 f825 	bl	8001a44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000c90 	.word	0x20000c90

08000a04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a0a:	f001 f81b 	bl	8001a44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000c90 	.word	0x20000c90

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f007 fb2c 	bl	80080a4 <__errno>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	230c      	movs	r3, #12
 8000a50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20005000 	.word	0x20005000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	20000210 	.word	0x20000210
 8000a80:	20000f80 	.word	0x20000f80

08000a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <TermHandleSpecial>:
			UartSendNumber(&Uart2, n);
	}
}

void TermHandleSpecial(Uart *u)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if(u->lastRxBufferHead >= u->rxBufferHead) //UART RX buffer index was probably cleared
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d303      	bcc.n	8000ab4 <TermHandleSpecial+0x24>
		u->lastRxBufferHead = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

	if(u->rxBuffer[u->rxBufferHead - 1] == '\b') //user entered backspace
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	7a9b      	ldrb	r3, [r3, #10]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d127      	bne.n	8000b1a <TermHandleSpecial+0x8a>
	{
		if(u->rxBufferHead > 1) //there was some data in buffer
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d91d      	bls.n	8000b12 <TermHandleSpecial+0x82>
		{
			u->rxBufferHead -= 2; //remove backspace and preceding character
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3b02      	subs	r3, #2
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			UartSendString(u, "\b \b", 3); //backspace (one character left), remove backspaced character (send space) and backspace again
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4929      	ldr	r1, [pc, #164]	; (8000b90 <TermHandleSpecial+0x100>)
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 faf5 	bl	80010dc <UartSendString>
			if(u->lastRxBufferHead > 0)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00d      	beq.n	8000b1a <TermHandleSpecial+0x8a>
				u->lastRxBufferHead--; //1 character was removed
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	3b01      	subs	r3, #1
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 8000b10:	e003      	b.n	8000b1a <TermHandleSpecial+0x8a>
		}
		else //no preceding character
			u->rxBufferHead = 0;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	}
	uint16_t t = u->rxBufferHead; //store last index
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000b20:	81fb      	strh	r3, [r7, #14]
	if(u->lastRxBufferHead < t) //local echo handling
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	89fa      	ldrh	r2, [r7, #14]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d92b      	bls.n	8000b88 <TermHandleSpecial+0xf8>
	{
		UartSendString(u, (uint8_t*)&u->rxBuffer[u->lastRxBufferHead], t - u->lastRxBufferHead); //echo characters entered by user
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3308      	adds	r3, #8
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	1c99      	adds	r1, r3, #2
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	89fa      	ldrh	r2, [r7, #14]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 fac3 	bl	80010dc <UartSendString>
		if((u->rxBuffer[t - 1] == '\r') || (u->rxBuffer[t - 1] == '\n'))
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	7a9b      	ldrb	r3, [r3, #10]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b0d      	cmp	r3, #13
 8000b64:	d007      	beq.n	8000b76 <TermHandleSpecial+0xe6>
 8000b66:	89fb      	ldrh	r3, [r7, #14]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	7a9b      	ldrb	r3, [r3, #10]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b0a      	cmp	r3, #10
 8000b74:	d104      	bne.n	8000b80 <TermHandleSpecial+0xf0>
			UartSendString(u, "\r\n", 2);
 8000b76:	2202      	movs	r2, #2
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <TermHandleSpecial+0x104>)
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 faae 	bl	80010dc <UartSendString>
		u->lastRxBufferHead = t;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	}

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08008294 	.word	0x08008294
 8000b94:	08008298 	.word	0x08008298

08000b98 <TermParse>:

void TermParse(Uart *src)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	const char *cmd = (char*)src->rxBuffer;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	330a      	adds	r3, #10
 8000ba4:	61bb      	str	r3, [r7, #24]
	uint16_t len = src->rxBufferHead;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000bac:	83fb      	strh	r3, [r7, #30]
	for(uint16_t i = 0; i < len; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	83bb      	strh	r3, [r7, #28]
 8000bb2:	e011      	b.n	8000bd8 <TermParse+0x40>
	{
		if((cmd[i] == '\r') || (cmd[i] == '\n'))
 8000bb4:	8bbb      	ldrh	r3, [r7, #28]
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b0d      	cmp	r3, #13
 8000bbe:	d005      	beq.n	8000bcc <TermParse+0x34>
 8000bc0:	8bbb      	ldrh	r3, [r7, #28]
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d102      	bne.n	8000bd2 <TermParse+0x3a>
		{
			len = i;
 8000bcc:	8bbb      	ldrh	r3, [r7, #28]
 8000bce:	83fb      	strh	r3, [r7, #30]
			break;
 8000bd0:	e006      	b.n	8000be0 <TermParse+0x48>
	for(uint16_t i = 0; i < len; i++)
 8000bd2:	8bbb      	ldrh	r3, [r7, #28]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	83bb      	strh	r3, [r7, #28]
 8000bd8:	8bba      	ldrh	r2, [r7, #28]
 8000bda:	8bfb      	ldrh	r3, [r7, #30]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d3e9      	bcc.n	8000bb4 <TermParse+0x1c>
	}

	/*
	 * Settings insertion handling
	 */
	if(!strncmp(cmd, "mod", 3))
 8000be0:	2203      	movs	r2, #3
 8000be2:	4959      	ldr	r1, [pc, #356]	; (8000d48 <TermParse+0x1b0>)
 8000be4:	69b8      	ldr	r0, [r7, #24]
 8000be6:	f007 fac3 	bl	8008170 <strncmp>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d13d      	bne.n	8000c6c <TermParse+0xd4>
	{
		if(!strncmp(&cmd[4], "16qam", 5))
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	2205      	movs	r2, #5
 8000bf6:	4955      	ldr	r1, [pc, #340]	; (8000d4c <TermParse+0x1b4>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 fab9 	bl	8008170 <strncmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d103      	bne.n	8000c0c <TermParse+0x74>
			ModulatorSetMode(QAM16);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fdc1 	bl	800078c <ModulatorSetMode>
 8000c0a:	e094      	b.n	8000d36 <TermParse+0x19e>
		else if(!strncmp(&cmd[4], "4qam", 4))
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	2204      	movs	r2, #4
 8000c12:	494f      	ldr	r1, [pc, #316]	; (8000d50 <TermParse+0x1b8>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 faab 	bl	8008170 <strncmp>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d103      	bne.n	8000c28 <TermParse+0x90>
			ModulatorSetMode(QAM4);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fdb3 	bl	800078c <ModulatorSetMode>
 8000c26:	e086      	b.n	8000d36 <TermParse+0x19e>
		else if(!strncmp(&cmd[4], "qpsk", 4))
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	4949      	ldr	r1, [pc, #292]	; (8000d54 <TermParse+0x1bc>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f007 fa9d 	bl	8008170 <strncmp>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d103      	bne.n	8000c44 <TermParse+0xac>
			ModulatorSetMode(QPSK);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fda5 	bl	800078c <ModulatorSetMode>
 8000c42:	e078      	b.n	8000d36 <TermParse+0x19e>
		else if(!strncmp(&cmd[4], "bpsk", 4))
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	3304      	adds	r3, #4
 8000c48:	2204      	movs	r2, #4
 8000c4a:	4943      	ldr	r1, [pc, #268]	; (8000d58 <TermParse+0x1c0>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f007 fa8f 	bl	8008170 <strncmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d103      	bne.n	8000c60 <TermParse+0xc8>
			ModulatorSetMode(BPSK);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fd97 	bl	800078c <ModulatorSetMode>
 8000c5e:	e06a      	b.n	8000d36 <TermParse+0x19e>
		else
		{
			UartSendString(src, "Bad modulator mode!\r\n", 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	493e      	ldr	r1, [pc, #248]	; (8000d5c <TermParse+0x1c4>)
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fa39 	bl	80010dc <UartSendString>
			return;
 8000c6a:	e069      	b.n	8000d40 <TermParse+0x1a8>
		}
	}
	else if(!strncmp(cmd, "baud", 4))
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	493c      	ldr	r1, [pc, #240]	; (8000d60 <TermParse+0x1c8>)
 8000c70:	69b8      	ldr	r0, [r7, #24]
 8000c72:	f007 fa7d 	bl	8008170 <strncmp>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d128      	bne.n	8000cce <TermParse+0x136>
	{
		int64_t t = StrToInt(&cmd[5], len - 5);
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	1d5a      	adds	r2, r3, #5
 8000c80:	8bfb      	ldrh	r3, [r7, #30]
 8000c82:	3b05      	subs	r3, #5
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4619      	mov	r1, r3
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f7ff faba 	bl	8000202 <StrToInt>
 8000c8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
		if(0 == t)
 8000c92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000c96:	4323      	orrs	r3, r4
 8000c98:	d105      	bne.n	8000ca6 <TermParse+0x10e>
		{
			UartSendString(src, "Bad baud rate!\r\n", 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4931      	ldr	r1, [pc, #196]	; (8000d64 <TermParse+0x1cc>)
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 fa1c 	bl	80010dc <UartSendString>
			return;
 8000ca4:	e04c      	b.n	8000d40 <TermParse+0x1a8>
		}
		else
		{
			UartSendString(src, "Real baud rate: ", 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	492f      	ldr	r1, [pc, #188]	; (8000d68 <TermParse+0x1d0>)
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 fa16 	bl	80010dc <UartSendString>
			UartSendNumber(src, ModulatorSetBaudrate(t));
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fd9e 	bl	80007f4 <ModulatorSetBaudrate>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 fa4f 	bl	8001160 <UartSendNumber>
			UartSendString(src, "\r\n", 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4929      	ldr	r1, [pc, #164]	; (8000d6c <TermParse+0x1d4>)
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 fa08 	bl	80010dc <UartSendString>
 8000ccc:	e033      	b.n	8000d36 <TermParse+0x19e>
		}
	}
	else if(!strncmp(cmd, "out", 3))
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4927      	ldr	r1, [pc, #156]	; (8000d70 <TermParse+0x1d8>)
 8000cd2:	69b8      	ldr	r0, [r7, #24]
 8000cd4:	f007 fa4c 	bl	8008170 <strncmp>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10f      	bne.n	8000cfe <TermParse+0x166>
	{
		int64_t t = StrToInt(&cmd[4], len - 4);
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	1d1a      	adds	r2, r3, #4
 8000ce2:	8bfb      	ldrh	r3, [r7, #30]
 8000ce4:	3b04      	subs	r3, #4
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f7ff fa89 	bl	8000202 <StrToInt>
 8000cf0:	e9c7 0104 	strd	r0, r1, [r7, #16]
		ModulatorPut(t);
 8000cf4:	7c3b      	ldrb	r3, [r7, #16]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcda 	bl	80006b0 <ModulatorPut>
 8000cfc:	e01b      	b.n	8000d36 <TermParse+0x19e>
	}
	else if(!strncmp(cmd, "stop", 4))
 8000cfe:	2204      	movs	r2, #4
 8000d00:	491c      	ldr	r1, [pc, #112]	; (8000d74 <TermParse+0x1dc>)
 8000d02:	69b8      	ldr	r0, [r7, #24]
 8000d04:	f007 fa34 	bl	8008170 <strncmp>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <TermParse+0x17c>
	{
		ModulatorStop();
 8000d0e:	f7ff fdb1 	bl	8000874 <ModulatorStop>
 8000d12:	e010      	b.n	8000d36 <TermParse+0x19e>
	}
	else if(!strncmp(cmd, "random", 6))
 8000d14:	2206      	movs	r2, #6
 8000d16:	4918      	ldr	r1, [pc, #96]	; (8000d78 <TermParse+0x1e0>)
 8000d18:	69b8      	ldr	r0, [r7, #24]
 8000d1a:	f007 fa29 	bl	8008170 <strncmp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <TermParse+0x192>
	{
		ModulatorStartRandom();
 8000d24:	f7ff fdc6 	bl	80008b4 <ModulatorStartRandom>
 8000d28:	e005      	b.n	8000d36 <TermParse+0x19e>
//		else
//			err = true;
//	}
	else
	{
		UartSendString(src, "Unknown command\r\n", 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4913      	ldr	r1, [pc, #76]	; (8000d7c <TermParse+0x1e4>)
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f9d4 	bl	80010dc <UartSendString>
		return;
 8000d34:	e004      	b.n	8000d40 <TermParse+0x1a8>
	}


	UartSendString(src, "OK\r\n", 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	4911      	ldr	r1, [pc, #68]	; (8000d80 <TermParse+0x1e8>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f9ce 	bl	80010dc <UartSendString>
}
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800829c 	.word	0x0800829c
 8000d4c:	080082a0 	.word	0x080082a0
 8000d50:	080082a8 	.word	0x080082a8
 8000d54:	080082b0 	.word	0x080082b0
 8000d58:	080082b8 	.word	0x080082b8
 8000d5c:	080082c0 	.word	0x080082c0
 8000d60:	080082d8 	.word	0x080082d8
 8000d64:	080082e0 	.word	0x080082e0
 8000d68:	080082f4 	.word	0x080082f4
 8000d6c:	08008298 	.word	0x08008298
 8000d70:	08008308 	.word	0x08008308
 8000d74:	0800830c 	.word	0x0800830c
 8000d78:	08008314 	.word	0x08008314
 8000d7c:	0800831c 	.word	0x0800831c
 8000d80:	08008330 	.word	0x08008330

08000d84 <__NVIC_EnableIRQ>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4906      	ldr	r1, [pc, #24]	; (8000db8 <__NVIC_EnableIRQ+0x34>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_DisableIRQ>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db10      	blt.n	8000df0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4909      	ldr	r1, [pc, #36]	; (8000dfc <__NVIC_DisableIRQ+0x40>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	3320      	adds	r3, #32
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000de8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dec:	f3bf 8f6f 	isb	sy
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <handleInterrupt>:
#include "terminal.h"

Uart Uart1 = {}, Uart2 = {}, UartUsb = {};

static void handleInterrupt(Uart *port)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	if(UART_LL_CHECK_RX_NOT_EMPTY(port->port)) //byte received
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d02d      	beq.n	8000ec6 <handleInterrupt+0x72>
	{
		UART_LL_CLEAR_RX_NOT_EMPTY(port->port);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0220 	bic.w	r2, r2, #32
 8000e78:	601a      	str	r2, [r3, #0]
		uint8_t data = port->port->DR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	73fb      	strb	r3, [r7, #15]
		port->rxBuffer[port->rxBufferHead++] = data; //store it
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	b291      	uxth	r1, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	f8a2 108c 	strh.w	r1, [r2, #140]	; 0x8c
 8000e94:	461a      	mov	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	729a      	strb	r2, [r3, #10]
		port->rxBufferHead %= UART_BUFFER_SIZE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <handleInterrupt+0x164>)
 8000ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8000eac:	09d9      	lsrs	r1, r3, #7
 8000eae:	460b      	mov	r3, r1
 8000eb0:	019b      	lsls	r3, r3, #6
 8000eb2:	440b      	add	r3, r1
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

		TermHandleSpecial(port);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fde5 	bl	8000a90 <TermHandleSpecial>
	}
	if(UART_LL_CHECK_RX_IDLE(port->port)) //line is idle, end of data reception
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d021      	beq.n	8000f18 <handleInterrupt+0xc4>
	{
		UART_LL_GET_DATA(port->port); //reset idle flag by dummy read
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
		if(port->rxBufferHead != 0)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d018      	beq.n	8000f18 <handleInterrupt+0xc4>
		{
			if(((port->rxBuffer[port->rxBufferHead - 1] == '\r') || (port->rxBuffer[port->rxBufferHead - 1] == '\n'))) //data ends with \r or \n, process as data
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	7a9b      	ldrb	r3, [r3, #10]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b0d      	cmp	r3, #13
 8000efa:	d00a      	beq.n	8000f12 <handleInterrupt+0xbe>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b01      	subs	r3, #1
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	7a9b      	ldrb	r3, [r3, #10]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b0a      	cmp	r3, #10
 8000f10:	d102      	bne.n	8000f18 <handleInterrupt+0xc4>
			{
				port->rxType = DATA_TERM;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	721a      	strb	r2, [r3, #8]
			}
		}
	}
	if(UART_LL_CHECK_TX_EMPTY(port->port)) //TX buffer empty
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d043      	beq.n	8000fae <handleInterrupt+0x15a>
	{
		if((port->txBufferHead != port->txBufferTail) || port->txBufferFull) //if there is anything to transmit
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d107      	bne.n	8000f4a <handleInterrupt+0xf6>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8000f40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d029      	beq.n	8000f9e <handleInterrupt+0x14a>
		{
			UART_LL_PUT_DATA(port->port, port->txBuffer[port->txBufferTail++]);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	b291      	uxth	r1, r2
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	f8a2 1112 	strh.w	r1, [r2, #274]	; 0x112
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
			port->txBufferTail %= UART_BUFFER_SIZE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <handleInterrupt+0x164>)
 8000f76:	fba3 1302 	umull	r1, r3, r3, r2
 8000f7a:	09d9      	lsrs	r1, r3, #7
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	019b      	lsls	r3, r3, #6
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			port->txBufferFull = 0;
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 8000f94:	f36f 0300 	bfc	r3, #0, #1
 8000f98:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
		else //nothing more to be transmitted
		{
			UART_LL_DISABLE_TX_EMPTY_INTERRUPT(port->port);
		}
	}
}
 8000f9c:	e007      	b.n	8000fae <handleInterrupt+0x15a>
			UART_LL_DISABLE_TX_EMPTY_INTERRUPT(port->port);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fac:	60da      	str	r2, [r3, #12]
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	fc0fc0fd 	.word	0xfc0fc0fd

08000fbc <USART1_IRQHandler>:

void UART_LL_UART1_INTERUPT_HANDLER(void) __attribute__ ((interrupt));
void UART_LL_UART1_INTERUPT_HANDLER(void)
{
 8000fbc:	4668      	mov	r0, sp
 8000fbe:	f020 0107 	bic.w	r1, r0, #7
 8000fc2:	468d      	mov	sp, r1
 8000fc4:	b589      	push	{r0, r3, r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	handleInterrupt(&Uart1);
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <USART1_IRQHandler+0x20>)
 8000fca:	f7ff ff43 	bl	8000e54 <handleInterrupt>
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8000fd6:	4685      	mov	sp, r0
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000214 	.word	0x20000214

08000fe0 <USART2_IRQHandler>:

void UART_LL_UART2_INTERUPT_HANDLER(void) __attribute__ ((interrupt));
void UART_LL_UART2_INTERUPT_HANDLER(void)
{
 8000fe0:	4668      	mov	r0, sp
 8000fe2:	f020 0107 	bic.w	r1, r0, #7
 8000fe6:	468d      	mov	sp, r1
 8000fe8:	b589      	push	{r0, r3, r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	handleInterrupt(&Uart2);
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <USART2_IRQHandler+0x20>)
 8000fee:	f7ff ff31 	bl	8000e54 <handleInterrupt>
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8000ffa:	4685      	mov	sp, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000032c 	.word	0x2000032c

08001004 <UartSendByte>:


void UartSendByte(Uart *port, uint8_t data)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	if(!port->enabled)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7a5b      	ldrb	r3, [r3, #9]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d058      	beq.n	80010d0 <UartSendByte+0xcc>
		return;

	if(port->isUsb)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7a5b      	ldrb	r3, [r3, #9]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <UartSendByte+0x34>
	{
		CDC_Transmit_FS(&data, 1);
 800102c:	1cfb      	adds	r3, r7, #3
 800102e:	2101      	movs	r1, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f006 fc17 	bl	8007864 <CDC_Transmit_FS>
 8001036:	e04c      	b.n	80010d2 <UartSendByte+0xce>
	}
	else
	{
		while(port->txBufferFull)
 8001038:	bf00      	nop
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001040:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f7      	bne.n	800103a <UartSendByte+0x36>
			;
		port->txBuffer[port->txBufferHead++] = data;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8001050:	b29b      	uxth	r3, r3
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	b291      	uxth	r1, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	f8a2 1110 	strh.w	r1, [r2, #272]	; 0x110
 800105c:	4619      	mov	r1, r3
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	440b      	add	r3, r1
 8001064:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		port->txBufferHead %= UART_BUFFER_SIZE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <UartSendByte+0xd4>)
 8001072:	fba3 1302 	umull	r1, r3, r3, r2
 8001076:	09d9      	lsrs	r1, r3, #7
 8001078:	460b      	mov	r3, r1
 800107a:	019b      	lsls	r3, r3, #6
 800107c:	440b      	add	r3, r1
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
  __ASM volatile ("cpsid i" : : : "memory");
 800108a:	b672      	cpsid	i
		__disable_irq();
		if(port->txBufferHead == port->txBufferTail)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800109a:	b29b      	uxth	r3, r3
 800109c:	429a      	cmp	r2, r3
 800109e:	d106      	bne.n	80010ae <UartSendByte+0xaa>
			port->txBufferFull = 1;
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
		if(0 == (UART_LL_CHECK_ENABLED_TX_EMPTY_INTERRUPT(port->port)))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <UartSendByte+0xc8>
			UART_LL_ENABLE_TX_EMPTY_INTERRUPT(port->port);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80010cc:	b662      	cpsie	i
 80010ce:	e000      	b.n	80010d2 <UartSendByte+0xce>
		return;
 80010d0:	bf00      	nop
		__enable_irq();
	}
}
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	fc0fc0fd 	.word	0xfc0fc0fd

080010dc <UartSendString>:


void UartSendString(Uart *port, void *data, uint16_t len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
	if(0 == len)
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <UartSendString+0x1e>
		len = strlen((char*)data);
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff f82b 	bl	800014c <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]

	for(uint16_t i = 0; i < len; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	82fb      	strh	r3, [r7, #22]
 80010fe:	e00a      	b.n	8001116 <UartSendString+0x3a>
	{
		UartSendByte(port, ((uint8_t*)data)[i]);
 8001100:	8afb      	ldrh	r3, [r7, #22]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff ff7a 	bl	8001004 <UartSendByte>
	for(uint16_t i = 0; i < len; i++)
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	3301      	adds	r3, #1
 8001114:	82fb      	strh	r3, [r7, #22]
 8001116:	8afa      	ldrh	r2, [r7, #22]
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3f0      	bcc.n	8001100 <UartSendString+0x24>
	}
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <findHighestPosition>:


static unsigned int findHighestPosition(unsigned int n)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
    unsigned int i = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
    while((i * 10) <= n)
 8001132:	e005      	b.n	8001140 <findHighestPosition+0x1a>
        i *= 10;
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
    while((i * 10) <= n)
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4293      	cmp	r3, r2
 8001150:	d2f0      	bcs.n	8001134 <findHighestPosition+0xe>

    return i;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <UartSendNumber>:

void UartSendNumber(Uart *port, int32_t n)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	if(n < 0)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	da03      	bge.n	8001178 <UartSendNumber+0x18>
		UartSendByte(port, '-');
 8001170:	212d      	movs	r1, #45	; 0x2d
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff46 	bl	8001004 <UartSendByte>
	n = abs(n);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfb8      	it	lt
 800117e:	425b      	neglt	r3, r3
 8001180:	603b      	str	r3, [r7, #0]
    unsigned int position = findHighestPosition(n);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ffce 	bl	8001126 <findHighestPosition>
 800118a:	60f8      	str	r0, [r7, #12]
    while(position)
 800118c:	e019      	b.n	80011c2 <UartSendNumber+0x62>
    {
        unsigned int number = n / position;
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	60bb      	str	r3, [r7, #8]
        UartSendByte(port, (number + 48));
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3330      	adds	r3, #48	; 0x30
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff2e 	bl	8001004 <UartSendByte>
        n -= (number * position);
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	68f9      	ldr	r1, [r7, #12]
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	603b      	str	r3, [r7, #0]
        position /= 10;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <UartSendNumber+0x70>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	60fb      	str	r3, [r7, #12]
    while(position)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e2      	bne.n	800118e <UartSendNumber+0x2e>
    }
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	cccccccd 	.word	0xcccccccd

080011d4 <UartInit>:

void UartInit(Uart *port, USART_TypeDef *uart, uint32_t baud)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	port->port = uart;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	601a      	str	r2, [r3, #0]
	port->baudrate = baud;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	605a      	str	r2, [r3, #4]
	port->rxType = DATA_NOTHING;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	721a      	strb	r2, [r3, #8]
	port->rxBufferHead = 0;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	port->txBufferHead = 0;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	port->txBufferTail = 0;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
	port->txBufferFull = 0;
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 8001210:	f36f 0300 	bfc	r3, #0, #1
 8001214:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
	port->enabled = 0;
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	7a53      	ldrb	r3, [r2, #9]
 800121c:	f36f 0300 	bfc	r3, #0, #1
 8001220:	7253      	strb	r3, [r2, #9]
	port->lastRxBufferHead = 0;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	memset((void*)port->rxBuffer, 0, sizeof(port->rxBuffer));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	330a      	adds	r3, #10
 800122e:	2282      	movs	r2, #130	; 0x82
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f006 ff60 	bl	80080f8 <memset>
	memset((void*)port->txBuffer, 0, sizeof(port->txBuffer));
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	338e      	adds	r3, #142	; 0x8e
 800123c:	2282      	movs	r2, #130	; 0x82
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f006 ff59 	bl	80080f8 <memset>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <UartConfig>:


void UartConfig(Uart *port, uint8_t state)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
	if(port->port == UART_LL_UART1_STRUCTURE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a77      	ldr	r2, [pc, #476]	; (8001440 <UartConfig+0x1f0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d168      	bne.n	8001338 <UartConfig+0xe8>
	{
		UART_LL_UART1_INITIALIZE_PERIPHERAL(port->baudrate);
 8001266:	4b77      	ldr	r3, [pc, #476]	; (8001444 <UartConfig+0x1f4>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a76      	ldr	r2, [pc, #472]	; (8001444 <UartConfig+0x1f4>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b74      	ldr	r3, [pc, #464]	; (8001444 <UartConfig+0x1f4>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a73      	ldr	r2, [pc, #460]	; (8001444 <UartConfig+0x1f4>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b72      	ldr	r3, [pc, #456]	; (8001448 <UartConfig+0x1f8>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a71      	ldr	r2, [pc, #452]	; (8001448 <UartConfig+0x1f8>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	6053      	str	r3, [r2, #4]
 800128a:	4b6f      	ldr	r3, [pc, #444]	; (8001448 <UartConfig+0x1f8>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4a6e      	ldr	r2, [pc, #440]	; (8001448 <UartConfig+0x1f8>)
 8001290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001294:	6053      	str	r3, [r2, #4]
 8001296:	4b6c      	ldr	r3, [pc, #432]	; (8001448 <UartConfig+0x1f8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a6b      	ldr	r2, [pc, #428]	; (8001448 <UartConfig+0x1f8>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6053      	str	r3, [r2, #4]
 80012a2:	4b69      	ldr	r3, [pc, #420]	; (8001448 <UartConfig+0x1f8>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a68      	ldr	r2, [pc, #416]	; (8001448 <UartConfig+0x1f8>)
 80012a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ac:	6053      	str	r3, [r2, #4]
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <UartConfig+0x1f8>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <UartConfig+0x1f8>)
 80012b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012b8:	6053      	str	r3, [r2, #4]
 80012ba:	4b64      	ldr	r3, [pc, #400]	; (800144c <UartConfig+0x1fc>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	495f      	ldr	r1, [pc, #380]	; (8001440 <UartConfig+0x1f0>)
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	608b      	str	r3, [r1, #8]

		if(state)
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <UartConfig+0x96>
		{
			UART_LL_ENABLE(port->port);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012de:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80012e2:	60d3      	str	r3, [r2, #12]
 80012e4:	e009      	b.n	80012fa <UartConfig+0xaa>
		}
		else
		{
			UART_LL_DISABLE(port->port);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012f4:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80012f8:	60d3      	str	r3, [r2, #12]
		}

		NVIC_SetPriority(UART_LL_UART1_IRQ, 2);
 80012fa:	2102      	movs	r1, #2
 80012fc:	2025      	movs	r0, #37	; 0x25
 80012fe:	f7ff fd7f 	bl	8000e00 <__NVIC_SetPriority>
		if(state)
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <UartConfig+0xc0>
			NVIC_EnableIRQ(UART_LL_UART1_IRQ);
 8001308:	2025      	movs	r0, #37	; 0x25
 800130a:	f7ff fd3b 	bl	8000d84 <__NVIC_EnableIRQ>
 800130e:	e002      	b.n	8001316 <UartConfig+0xc6>
		else
			NVIC_DisableIRQ(UART_LL_UART1_IRQ);
 8001310:	2025      	movs	r0, #37	; 0x25
 8001312:	f7ff fd53 	bl	8000dbc <__NVIC_DisableIRQ>

		port->enabled = state > 0;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2d9      	uxtb	r1, r3
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	7a53      	ldrb	r3, [r2, #9]
 8001326:	f361 0300 	bfi	r3, r1, #0, #1
 800132a:	7253      	strb	r3, [r2, #9]
		port->isUsb = 0;
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	7a53      	ldrb	r3, [r2, #9]
 8001330:	f36f 0341 	bfc	r3, #1, #1
 8001334:	7253      	strb	r3, [r2, #9]
	{
		port->isUsb = 1;
		port->enabled = state > 0;
	}

}
 8001336:	e07e      	b.n	8001436 <UartConfig+0x1e6>
	else if(port->port == UART_LL_UART2_STRUCTURE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a44      	ldr	r2, [pc, #272]	; (8001450 <UartConfig+0x200>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d169      	bne.n	8001416 <UartConfig+0x1c6>
		UART_LL_UART2_INITIALIZE_PERIPHERAL(port->baudrate);
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <UartConfig+0x1f4>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <UartConfig+0x1f4>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <UartConfig+0x1f4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <UartConfig+0x1f4>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <UartConfig+0x1f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a3a      	ldr	r2, [pc, #232]	; (8001448 <UartConfig+0x1f8>)
 8001360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <UartConfig+0x1f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a37      	ldr	r2, [pc, #220]	; (8001448 <UartConfig+0x1f8>)
 800136c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <UartConfig+0x1f8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a34      	ldr	r2, [pc, #208]	; (8001448 <UartConfig+0x1f8>)
 8001378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <UartConfig+0x1f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a31      	ldr	r2, [pc, #196]	; (8001448 <UartConfig+0x1f8>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <UartConfig+0x1f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <UartConfig+0x1f8>)
 8001390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <UartConfig+0x1fc>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	492b      	ldr	r1, [pc, #172]	; (8001450 <UartConfig+0x200>)
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	608b      	str	r3, [r1, #8]
		if(state)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <UartConfig+0x174>
			UART_LL_ENABLE(port->port);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013bc:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80013c0:	60d3      	str	r3, [r2, #12]
 80013c2:	e009      	b.n	80013d8 <UartConfig+0x188>
			UART_LL_DISABLE(port->port);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013d2:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80013d6:	60d3      	str	r3, [r2, #12]
		NVIC_SetPriority(UART_LL_UART2_IRQ, 2);
 80013d8:	2102      	movs	r1, #2
 80013da:	2026      	movs	r0, #38	; 0x26
 80013dc:	f7ff fd10 	bl	8000e00 <__NVIC_SetPriority>
		if(state)
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <UartConfig+0x19e>
			NVIC_EnableIRQ(UART_LL_UART2_IRQ);
 80013e6:	2026      	movs	r0, #38	; 0x26
 80013e8:	f7ff fccc 	bl	8000d84 <__NVIC_EnableIRQ>
 80013ec:	e002      	b.n	80013f4 <UartConfig+0x1a4>
			NVIC_DisableIRQ(UART_LL_UART2_IRQ);
 80013ee:	2026      	movs	r0, #38	; 0x26
 80013f0:	f7ff fce4 	bl	8000dbc <__NVIC_DisableIRQ>
		port->enabled = state > 0;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2d9      	uxtb	r1, r3
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	7a53      	ldrb	r3, [r2, #9]
 8001404:	f361 0300 	bfi	r3, r1, #0, #1
 8001408:	7253      	strb	r3, [r2, #9]
		port->isUsb = 0;
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	7a53      	ldrb	r3, [r2, #9]
 800140e:	f36f 0341 	bfc	r3, #1, #1
 8001412:	7253      	strb	r3, [r2, #9]
}
 8001414:	e00f      	b.n	8001436 <UartConfig+0x1e6>
		port->isUsb = 1;
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	7a53      	ldrb	r3, [r2, #9]
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	7253      	strb	r3, [r2, #9]
		port->enabled = state > 0;
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2d9      	uxtb	r1, r3
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	7a53      	ldrb	r3, [r2, #9]
 8001430:	f361 0300 	bfi	r3, r1, #0, #1
 8001434:	7253      	strb	r3, [r2, #9]
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40013800 	.word	0x40013800
 8001444:	40021000 	.word	0x40021000
 8001448:	40010800 	.word	0x40010800
 800144c:	2000000c 	.word	0x2000000c
 8001450:	40004400 	.word	0x40004400

08001454 <UartClearRx>:


void UartClearRx(Uart *port)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	port->rxBufferHead = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	port->rxType = DATA_NOTHING;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	721a      	strb	r2, [r3, #8]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149a:	f7ff faf3 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f006 fe07 	bl	80080b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7fe ff17 	bl	80002d4 <main>
  bx lr
 80014a6:	4770      	bx	lr
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80014b0:	080083a8 	.word	0x080083a8
  ldr r2, =_sbss
 80014b4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80014b8:	20000f80 	.word	0x20000f80

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x28>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f945 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fa16 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f95d 	bl	80017ca <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f925 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000000c 	.word	0x2000000c
 8001544:	20000014 	.word	0x20000014
 8001548:	20000010 	.word	0x20000010

0800154c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x20>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000014 	.word	0x20000014
 800156c:	20000788 	.word	0x20000788

08001570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000788 	.word	0x20000788

08001584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff fff0 	bl	8001570 <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d005      	beq.n	80015aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_Delay+0x40>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015aa:	bf00      	nop
 80015ac:	f7ff ffe0 	bl	8001570 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8f7      	bhi.n	80015ac <HAL_Delay+0x28>
  {
  }
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000014 	.word	0x20000014

080015c8 <__NVIC_SetPriorityGrouping>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4906      	ldr	r1, [pc, #24]	; (8001660 <__NVIC_EnableIRQ+0x34>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff90 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff2d 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff42 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff90 	bl	80016b8 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5f 	bl	8001664 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff35 	bl	800162c <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e4:	b08b      	sub	sp, #44	; 0x2c
 80017e6:	af06      	add	r7, sp, #24
 80017e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0fd      	b.n	80019f0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d106      	bne.n	800180e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f006 f999 	bl	8007b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2203      	movs	r2, #3
 8001812:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f002 f96a 	bl	8003af4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	687e      	ldr	r6, [r7, #4]
 8001828:	466d      	mov	r5, sp
 800182a:	f106 0410 	add.w	r4, r6, #16
 800182e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	602b      	str	r3, [r5, #0]
 8001836:	1d33      	adds	r3, r6, #4
 8001838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f002 f934 	bl	8003aa8 <USB_CoreInit>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0ce      	b.n	80019f0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f002 f965 	bl	8003b28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e04c      	b.n	80018fe <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3301      	adds	r3, #1
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	b298      	uxth	r0, r3
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3336      	adds	r3, #54	; 0x36
 80018a2:	4602      	mov	r2, r0
 80018a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3303      	adds	r3, #3
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3338      	adds	r3, #56	; 0x38
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	333c      	adds	r3, #60	; 0x3c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3340      	adds	r3, #64	; 0x40
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	3301      	adds	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3ad      	bcc.n	8001864 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e044      	b.n	8001998 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3b5      	bcc.n	800190e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	687e      	ldr	r6, [r7, #4]
 80019aa:	466d      	mov	r5, sp
 80019ac:	f106 0410 	add.w	r4, r6, #16
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	602b      	str	r3, [r5, #0]
 80019b8:	1d33      	adds	r3, r6, #4
 80019ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f002 f8bf 	bl	8003b40 <USB_DevInit>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00d      	b.n	80019f0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 fa30 	bl	8005e4e <USB_DevDisconnect>

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_PCD_Start+0x16>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e016      	b.n	8001a3c <HAL_PCD_Start+0x44>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 f854 	bl	8003ac8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a20:	2101      	movs	r1, #1
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f006 fb07 	bl	8008036 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fa04 	bl	8005e3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fa06 	bl	8005e62 <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a60:	d102      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fb61 	bl	800212a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f004 f9f8 	bl	8005e62 <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7c:	d112      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a90:	b292      	uxth	r2, r2
 8001a92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f006 f8d5 	bl	8007c46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f925 	bl	8001cee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 f9da 	bl	8005e62 <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001acc:	b292      	uxth	r2, r2
 8001ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 f9c3 	bl	8005e62 <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae6:	d10b      	bne.n	8001b00 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001afa:	b292      	uxth	r2, r2
 8001afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f9ac 	bl	8005e62 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b14:	d126      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0204 	bic.w	r2, r2, #4
 8001b28:	b292      	uxth	r2, r2
 8001b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0208 	bic.w	r2, r2, #8
 8001b40:	b292      	uxth	r2, r2
 8001b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f006 f8b6 	bl	8007cb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 f97a 	bl	8005e62 <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b78:	f040 8084 	bne.w	8001c84 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	77fb      	strb	r3, [r7, #31]
 8001b80:	e011      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	8812      	ldrh	r2, [r2, #0]
 8001b92:	b292      	uxth	r2, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	f107 0120 	add.w	r1, r7, #32
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	77fb      	strb	r3, [r7, #31]
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	2b07      	cmp	r3, #7
 8001baa:	d9ea      	bls.n	8001b82 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bdc:	bf00      	nop
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f6      	beq.n	8001bde <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c02:	b292      	uxth	r2, r2
 8001c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
 8001c0c:	e010      	b.n	8001c30 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	4611      	mov	r1, r2
 8001c16:	7ffa      	ldrb	r2, [r7, #31]
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	440a      	add	r2, r1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	f107 0120 	add.w	r1, r7, #32
 8001c22:	440b      	add	r3, r1
 8001c24:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c28:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c2a:	7ffb      	ldrb	r3, [r7, #31]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	77fb      	strb	r3, [r7, #31]
 8001c30:	7ffb      	ldrb	r3, [r7, #31]
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	d9eb      	bls.n	8001c0e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0208 	orr.w	r2, r2, #8
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c60:	b292      	uxth	r2, r2
 8001c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0204 	orr.w	r2, r2, #4
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f006 f800 	bl	8007c84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f004 f8ea 	bl	8005e62 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c98:	d10e      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cac:	b292      	uxth	r2, r2
 8001cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f005 ffb9 	bl	8007c2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 f8d0 	bl	8005e62 <USB_ReadInterrupts>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_PCD_SetAddress+0x1a>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e013      	b.n	8001d30 <HAL_PCD_SetAddress+0x42>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 f877 	bl	8005e14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	70fb      	strb	r3, [r7, #3]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	803b      	strh	r3, [r7, #0]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da0e      	bge.n	8001d7c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	705a      	strb	r2, [r3, #1]
 8001d7a:	e00e      	b.n	8001d9a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 0207 	and.w	r2, r3, #7
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001da6:	883a      	ldrh	r2, [r7, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	78ba      	ldrb	r2, [r7, #2]
 8001db0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dc4:	78bb      	ldrb	r3, [r7, #2]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d102      	bne.n	8001dd0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_PCD_EP_Open+0xa6>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e00e      	b.n	8001dfc <HAL_PCD_EP_Open+0xc4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fec7 	bl	8003b80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da0e      	bge.n	8001e36 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	705a      	strb	r2, [r3, #1]
 8001e34:	e00e      	b.n	8001e54 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 0207 	and.w	r2, r3, #7
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_PCD_EP_Close+0x6a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e00e      	b.n	8001e8c <HAL_PCD_EP_Close+0x88>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 f9e9 	bl	8004254 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea4:	7afb      	ldrb	r3, [r7, #11]
 8001ea6:	f003 0207 	and.w	r2, r3, #7
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee0:	7afb      	ldrb	r3, [r7, #11]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6979      	ldr	r1, [r7, #20]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fb9b 	bl	800462c <USB_EPStartXfer>
 8001ef6:	e005      	b.n	8001f04 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6979      	ldr	r1, [r7, #20]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fb94 	bl	800462c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 0207 	and.w	r2, r3, #7
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f30:	681b      	ldr	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2201      	movs	r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 fb41 	bl	800462c <USB_EPStartXfer>
 8001faa:	e005      	b.n	8001fb8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6979      	ldr	r1, [r7, #20]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fb3a 	bl	800462c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 0207 	and.w	r2, r3, #7
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d901      	bls.n	8001fe0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e04c      	b.n	800207a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	da0e      	bge.n	8002006 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	705a      	strb	r2, [r3, #1]
 8002004:	e00c      	b.n	8002020 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_PCD_EP_SetStall+0x7e>
 800203c:	2302      	movs	r3, #2
 800203e:	e01c      	b.n	800207a <HAL_PCD_EP_SetStall+0xb8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fde3 	bl	8005c1a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	2b00      	cmp	r3, #0
 800205c:	d108      	bne.n	8002070 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f003 ff08 	bl	8005e80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 020f 	and.w	r2, r3, #15
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	429a      	cmp	r2, r3
 800209a:	d901      	bls.n	80020a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e040      	b.n	8002122 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da0e      	bge.n	80020c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	705a      	strb	r2, [r3, #1]
 80020c4:	e00e      	b.n	80020e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 0207 	and.w	r2, r3, #7
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_PCD_EP_ClrStall+0x82>
 8002100:	2302      	movs	r3, #2
 8002102:	e00e      	b.n	8002122 <HAL_PCD_EP_ClrStall+0xa0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fdd1 	bl	8005cba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b08e      	sub	sp, #56	; 0x38
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002132:	e2ec      	b.n	800270e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800213c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800213e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800214a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 8161 	bne.w	8002416 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d152      	bne.n	8002204 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216e:	81fb      	strh	r3, [r7, #14]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800217e:	b29b      	uxth	r3, r3
 8002180:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3328      	adds	r3, #40	; 0x28
 8002186:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	3302      	adds	r3, #2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	441a      	add	r2, r3
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f005 fd16 	bl	8007bf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 829b 	beq.w	800270e <PCD_EP_ISR_Handler+0x5e4>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f040 8296 	bne.w	800270e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b292      	uxth	r2, r2
 80021f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002202:	e284      	b.n	800270e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002214:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	3306      	adds	r3, #6
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800225c:	b29b      	uxth	r3, r3
 800225e:	f003 fe5e 	bl	8005f1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29a      	uxth	r2, r3
 800226a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800226e:	4013      	ands	r3, r2
 8002270:	823b      	strh	r3, [r7, #16]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	8a3a      	ldrh	r2, [r7, #16]
 8002278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800227c:	b292      	uxth	r2, r2
 800227e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f005 fc8b 	bl	8007b9c <HAL_PCD_SetupStageCallback>
 8002286:	e242      	b.n	800270e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002288:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800228c:	2b00      	cmp	r3, #0
 800228e:	f280 823e 	bge.w	800270e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29a      	uxth	r2, r3
 800229a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800229e:	4013      	ands	r3, r2
 80022a0:	83bb      	strh	r3, [r7, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	8bba      	ldrh	r2, [r7, #28]
 80022a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ac:	b292      	uxth	r2, r2
 80022ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	3306      	adds	r3, #6
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d019      	beq.n	8002318 <PCD_EP_ISR_Handler+0x1ee>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	6959      	ldr	r1, [r3, #20]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f003 fe0e 	bl	8005f1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	441a      	add	r2, r3
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002310:	2100      	movs	r1, #0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f005 fc54 	bl	8007bc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 81f2 	bne.w	800270e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d112      	bne.n	8002378 <PCD_EP_ISR_Handler+0x24e>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800235c:	b29a      	uxth	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002370:	b29a      	uxth	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	e02f      	b.n	80023d8 <PCD_EP_ISR_Handler+0x2ae>
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b3e      	cmp	r3, #62	; 0x3e
 800237e:	d813      	bhi.n	80023a8 <PCD_EP_ISR_Handler+0x27e>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <PCD_EP_ISR_Handler+0x270>
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	3301      	adds	r3, #1
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	b29b      	uxth	r3, r3
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e017      	b.n	80023d8 <PCD_EP_ISR_Handler+0x2ae>
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <PCD_EP_ISR_Handler+0x298>
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	3b01      	subs	r3, #1
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	029b      	lsls	r3, r3, #10
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e8:	827b      	strh	r3, [r7, #18]
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023f0:	827b      	strh	r3, [r7, #18]
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023f8:	827b      	strh	r3, [r7, #18]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	8a7b      	ldrh	r3, [r7, #18]
 8002400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002410:	b29b      	uxth	r3, r3
 8002412:	8013      	strh	r3, [r2, #0]
 8002414:	e17b      	b.n	800270e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002428:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800242c:	2b00      	cmp	r3, #0
 800242e:	f280 80ea 	bge.w	8002606 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002448:	4013      	ands	r3, r2
 800244a:	853b      	strh	r3, [r7, #40]	; 0x28
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800245c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002460:	b292      	uxth	r2, r2
 8002462:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002464:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	7b1b      	ldrb	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d122      	bne.n	80024c8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	3306      	adds	r3, #6
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024aa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	6959      	ldr	r1, [r3, #20]
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	88da      	ldrh	r2, [r3, #6]
 80024c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024c2:	f003 fd2c 	bl	8005f1e <USB_ReadPMA>
 80024c6:	e07c      	b.n	80025c2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	78db      	ldrb	r3, [r3, #3]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d108      	bne.n	80024e2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f927 	bl	800272a <HAL_PCD_EP_DB_Receive>
 80024dc:	4603      	mov	r3, r0
 80024de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024e0:	e06f      	b.n	80025c2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	441a      	add	r2, r3
 800250c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800250e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800251e:	b29b      	uxth	r3, r3
 8002520:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3302      	adds	r3, #2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002566:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02a      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	891a      	ldrh	r2, [r3, #8]
 8002578:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800257a:	f003 fcd0 	bl	8005f1e <USB_ReadPMA>
 800257e:	e020      	b.n	80025c2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	3306      	adds	r3, #6
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	6959      	ldr	r1, [r3, #20]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	895a      	ldrh	r2, [r3, #10]
 80025bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025be:	f003 fcae 	bl	8005f1e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c8:	441a      	add	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d4:	441a      	add	r2, r3
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <PCD_EP_ISR_Handler+0x4c2>
 80025e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d206      	bcs.n	80025fa <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f005 fae4 	bl	8007bc0 <HAL_PCD_DataOutStageCallback>
 80025f8:	e005      	b.n	8002606 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	4618      	mov	r0, r3
 8002602:	f002 f813 	bl	800462c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002606:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260c:	2b00      	cmp	r3, #0
 800260e:	d07e      	beq.n	800270e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002610:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	843b      	strh	r3, [r7, #32]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	8c3b      	ldrh	r3, [r7, #32]
 8002650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002658:	b29b      	uxth	r3, r3
 800265a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d00c      	beq.n	800267e <PCD_EP_ISR_Handler+0x554>
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	78db      	ldrb	r3, [r3, #3]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002670:	2b02      	cmp	r3, #2
 8002672:	d146      	bne.n	8002702 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002674:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d141      	bne.n	8002702 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	3302      	adds	r3, #2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	8bfb      	ldrh	r3, [r7, #30]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d906      	bls.n	80026c0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	8bfb      	ldrh	r3, [r7, #30]
 80026b8:	1ad2      	subs	r2, r2, r3
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	e002      	b.n	80026c6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f005 fa8e 	bl	8007bf6 <HAL_PCD_DataInStageCallback>
 80026da:	e018      	b.n	800270e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	8bfb      	ldrh	r3, [r7, #30]
 80026e2:	441a      	add	r2, r3
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	8bfb      	ldrh	r3, [r7, #30]
 80026ee:	441a      	add	r2, r3
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 ff96 	bl	800462c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002700:	e005      	b.n	800270e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002702:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002704:	461a      	mov	r2, r3
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f91b 	bl	8002944 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002716:	b29b      	uxth	r3, r3
 8002718:	b21b      	sxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	f6ff ad0a 	blt.w	8002134 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3738      	adds	r7, #56	; 0x38
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b088      	sub	sp, #32
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d07e      	beq.n	8002840 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	3302      	adds	r3, #2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	8b7b      	ldrh	r3, [r7, #26]
 8002772:	429a      	cmp	r2, r3
 8002774:	d306      	bcc.n	8002784 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	1ad2      	subs	r2, r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	619a      	str	r2, [r3, #24]
 8002782:	e002      	b.n	800278a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d123      	bne.n	80027da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ac:	833b      	strh	r3, [r7, #24]
 80027ae:	8b3b      	ldrh	r3, [r7, #24]
 80027b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027b4:	833b      	strh	r3, [r7, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8b3b      	ldrh	r3, [r7, #24]
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01f      	beq.n	8002824 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	82fb      	strh	r3, [r7, #22]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	441a      	add	r2, r3
 800280e:	8afb      	ldrh	r3, [r7, #22]
 8002810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002824:	8b7b      	ldrh	r3, [r7, #26]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8087 	beq.w	800293a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6959      	ldr	r1, [r3, #20]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	891a      	ldrh	r2, [r3, #8]
 8002838:	8b7b      	ldrh	r3, [r7, #26]
 800283a:	f003 fb70 	bl	8005f1e <USB_ReadPMA>
 800283e:	e07c      	b.n	800293a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	3306      	adds	r3, #6
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002868:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	8b7b      	ldrh	r3, [r7, #26]
 8002870:	429a      	cmp	r2, r3
 8002872:	d306      	bcc.n	8002882 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	8b7b      	ldrh	r3, [r7, #26]
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	e002      	b.n	8002888 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d123      	bne.n	80028d8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	83fb      	strh	r3, [r7, #30]
 80028ac:	8bfb      	ldrh	r3, [r7, #30]
 80028ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028b2:	83fb      	strh	r3, [r7, #30]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	8bfb      	ldrh	r3, [r7, #30]
 80028c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11f      	bne.n	8002922 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	83bb      	strh	r3, [r7, #28]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	8bbb      	ldrh	r3, [r7, #28]
 800290e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800291e:	b29b      	uxth	r3, r3
 8002920:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002922:	8b7b      	ldrh	r3, [r7, #26]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	895a      	ldrh	r2, [r3, #10]
 8002934:	8b7b      	ldrh	r3, [r7, #26]
 8002936:	f003 faf2 	bl	8005f1e <USB_ReadPMA>
    }
  }

  return count;
 800293a:	8b7b      	ldrh	r3, [r7, #26]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0a2      	sub	sp, #136	; 0x88
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 81c7 	beq.w	8002cec <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	3302      	adds	r3, #2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002986:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002992:	429a      	cmp	r2, r3
 8002994:	d907      	bls.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800299e:	1ad2      	subs	r2, r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	619a      	str	r2, [r3, #24]
 80029a4:	e002      	b.n	80029ac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 80b9 	bne.w	8002b28 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d126      	bne.n	8002a0c <HAL_PCD_EP_DB_Transmit+0xc8>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	4413      	add	r3, r2
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	011a      	lsls	r2, r3, #4
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	4413      	add	r3, r2
 80029e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	801a      	strh	r2, [r3, #0]
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e01a      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d116      	bne.n	8002a42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	4413      	add	r3, r2
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	011a      	lsls	r2, r3, #4
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	4413      	add	r3, r2
 8002a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	623b      	str	r3, [r7, #32]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d126      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	4413      	add	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	011a      	lsls	r2, r3, #4
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	e017      	b.n	8002ace <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d113      	bne.n	8002ace <HAL_PCD_EP_DB_Transmit+0x18a>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	011a      	lsls	r2, r3, #4
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f005 f88e 	bl	8007bf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 82d1 	beq.w	8003088 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	827b      	strh	r3, [r7, #18]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	8a7b      	ldrh	r3, [r7, #18]
 8002b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	8013      	strh	r3, [r2, #0]
 8002b26:	e2af      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d021      	beq.n	8002b76 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	f040 8283 	bne.w	8003088 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002b8a:	441a      	add	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002b98:	441a      	add	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d309      	bcc.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	621a      	str	r2, [r3, #32]
 8002bbc:	e015      	b.n	8002bea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002bc6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002bca:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bd4:	e009      	b.n	8002bea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d155      	bne.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	4413      	add	r3, r2
 8002c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	011a      	lsls	r2, r3, #4
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	4413      	add	r3, r2
 8002c14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d112      	bne.n	8002c46 <HAL_PCD_EP_DB_Transmit+0x302>
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	e047      	b.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c48:	2b3e      	cmp	r3, #62	; 0x3e
 8002c4a:	d811      	bhi.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	653b      	str	r3, [r7, #80]	; 0x50
 8002c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5e:	3301      	adds	r3, #1
 8002c60:	653b      	str	r3, [r7, #80]	; 0x50
 8002c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	029b      	lsls	r3, r3, #10
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e032      	b.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	653b      	str	r3, [r7, #80]	; 0x50
 8002c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c82:	3b01      	subs	r3, #1
 8002c84:	653b      	str	r3, [r7, #80]	; 0x50
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	029b      	lsls	r3, r3, #10
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	801a      	strh	r2, [r3, #0]
 8002c9c:	e01b      	b.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d117      	bne.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cba:	4413      	add	r3, r2
 8002cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	011a      	lsls	r2, r3, #4
 8002cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6959      	ldr	r1, [r3, #20]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	891a      	ldrh	r2, [r3, #8]
 8002ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f003 f8d6 	bl	8005e96 <USB_WritePMA>
 8002cea:	e1cd      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3306      	adds	r3, #6
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d307      	bcc.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	619a      	str	r2, [r3, #24]
 8002d32:	e002      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80c1 	bne.w	8002ec6 <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	785b      	ldrb	r3, [r3, #1]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d126      	bne.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x456>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d60:	4413      	add	r3, r2
 8002d62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	011a      	lsls	r2, r3, #4
 8002d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d72:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e01a      	b.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d116      	bne.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	673b      	str	r3, [r7, #112]	; 0x70
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db6:	4413      	add	r3, r2
 8002db8:	673b      	str	r3, [r7, #112]	; 0x70
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	011a      	lsls	r2, r3, #4
 8002dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	2200      	movs	r2, #0
 8002dce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	785b      	ldrb	r3, [r3, #1]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d126      	bne.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x4ea>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df4:	4413      	add	r3, r2
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	011a      	lsls	r2, r3, #4
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e00:	4413      	add	r3, r2
 8002e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	e01c      	b.n	8002e68 <HAL_PCD_EP_DB_Transmit+0x524>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d118      	bne.n	8002e68 <HAL_PCD_EP_DB_Transmit+0x524>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e46:	4413      	add	r3, r2
 8002e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	011a      	lsls	r2, r3, #4
 8002e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e64:	2200      	movs	r2, #0
 8002e66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f004 fec1 	bl	8007bf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 8104 	bne.w	8003088 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	441a      	add	r2, r3
 8002eac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	8013      	strh	r3, [r2, #0]
 8002ec4:	e0e0      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d121      	bne.n	8002f14 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	441a      	add	r2, r3
 8002efc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	f040 80b4 	bne.w	8003088 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002f28:	441a      	add	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002f36:	441a      	add	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d309      	bcc.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f54:	1ad2      	subs	r2, r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	621a      	str	r2, [r3, #32]
 8002f5a:	e015      	b.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d107      	bne.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 8002f64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002f68:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f72:	e009      	b.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d155      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x6fe>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002faa:	4413      	add	r3, r2
 8002fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	011a      	lsls	r2, r3, #4
 8002fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d112      	bne.n	8002fea <HAL_PCD_EP_DB_Transmit+0x6a6>
 8002fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e044      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x730>
 8002fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fec:	2b3e      	cmp	r3, #62	; 0x3e
 8002fee:	d811      	bhi.n	8003014 <HAL_PCD_EP_DB_Transmit+0x6d0>
 8002ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	677b      	str	r3, [r7, #116]	; 0x74
 8002ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_PCD_EP_DB_Transmit+0x6c2>
 8003000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003002:	3301      	adds	r3, #1
 8003004:	677b      	str	r3, [r7, #116]	; 0x74
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	b29b      	uxth	r3, r3
 800300a:	029b      	lsls	r3, r3, #10
 800300c:	b29a      	uxth	r2, r3
 800300e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e02f      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x730>
 8003014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	677b      	str	r3, [r7, #116]	; 0x74
 800301a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <HAL_PCD_EP_DB_Transmit+0x6e6>
 8003024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003026:	3b01      	subs	r3, #1
 8003028:	677b      	str	r3, [r7, #116]	; 0x74
 800302a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302c:	b29b      	uxth	r3, r3
 800302e:	029b      	lsls	r3, r3, #10
 8003030:	b29b      	uxth	r3, r3
 8003032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303a:	b29a      	uxth	r2, r3
 800303c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	e018      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x730>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d114      	bne.n	8003074 <HAL_PCD_EP_DB_Transmit+0x730>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003058:	4413      	add	r3, r2
 800305a:	667b      	str	r3, [r7, #100]	; 0x64
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	011a      	lsls	r2, r3, #4
 8003062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003064:	4413      	add	r3, r2
 8003066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800306a:	663b      	str	r3, [r7, #96]	; 0x60
 800306c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306e:	b29a      	uxth	r2, r3
 8003070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003072:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6959      	ldr	r1, [r3, #20]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	895a      	ldrh	r2, [r3, #10]
 8003080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003082:	b29b      	uxth	r3, r3
 8003084:	f002 ff07 	bl	8005e96 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a2:	823b      	strh	r3, [r7, #16]
 80030a4:	8a3b      	ldrh	r3, [r7, #16]
 80030a6:	f083 0310 	eor.w	r3, r3, #16
 80030aa:	823b      	strh	r3, [r7, #16]
 80030ac:	8a3b      	ldrh	r3, [r7, #16]
 80030ae:	f083 0320 	eor.w	r3, r3, #32
 80030b2:	823b      	strh	r3, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	8a3b      	ldrh	r3, [r7, #16]
 80030c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3788      	adds	r7, #136	; 0x88
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	817b      	strh	r3, [r7, #10]
 80030f0:	4613      	mov	r3, r2
 80030f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030f4:	897b      	ldrh	r3, [r7, #10]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003100:	897b      	ldrh	r3, [r7, #10]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e009      	b.n	800312c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003118:	897a      	ldrh	r2, [r7, #10]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	b29a      	uxth	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	80da      	strh	r2, [r3, #6]
 8003140:	e00b      	b.n	800315a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2201      	movs	r2, #1
 8003146:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	b29a      	uxth	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b29a      	uxth	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
	...

08003168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e26c      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8087 	beq.w	8003296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003188:	4b92      	ldr	r3, [pc, #584]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b04      	cmp	r3, #4
 8003192:	d00c      	beq.n	80031ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003194:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d112      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5e>
 80031a0:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d10b      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ae:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d06c      	beq.n	8003294 <HAL_RCC_OscConfig+0x12c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d168      	bne.n	8003294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e246      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x76>
 80031d0:	4b80      	ldr	r3, [pc, #512]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7f      	ldr	r2, [pc, #508]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	e02e      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x98>
 80031e6:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7a      	ldr	r2, [pc, #488]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a77      	ldr	r2, [pc, #476]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0xbc>
 800320a:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a71      	ldr	r2, [pc, #452]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 8003224:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6a      	ldr	r2, [pc, #424]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe f994 	bl	8001570 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe f990 	bl	8001570 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1fa      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xe4>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe f980 	bl	8001570 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe f97c 	bl	8001570 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1e6      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x10c>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a2:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x18c>
 80032ba:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1ba      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4939      	ldr	r1, [pc, #228]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe f935 	bl	8001570 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe f931 	bl	8001570 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e19b      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4927      	ldr	r1, [pc, #156]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe f914 	bl	8001570 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334c:	f7fe f910 	bl	8001570 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e17a      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03a      	beq.n	80033ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d019      	beq.n	80033b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fe f8f4 	bl	8001570 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fe f8f0 	bl	8001570 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e15a      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f000 faa8 	bl	8003900 <RCC_Delay>
 80033b0:	e01c      	b.n	80033ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe f8da 	bl	8001570 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033be:	e00f      	b.n	80033e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe f8d6 	bl	8001570 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d908      	bls.n	80033e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e140      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	42420000 	.word	0x42420000
 80033dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	4b9e      	ldr	r3, [pc, #632]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e9      	bne.n	80033c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a6 	beq.w	8003546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b97      	ldr	r3, [pc, #604]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b94      	ldr	r3, [pc, #592]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4a93      	ldr	r2, [pc, #588]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003414:	61d3      	str	r3, [r2, #28]
 8003416:	4b91      	ldr	r3, [pc, #580]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b8e      	ldr	r3, [pc, #568]	; (8003660 <HAL_RCC_OscConfig+0x4f8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003432:	4b8b      	ldr	r3, [pc, #556]	; (8003660 <HAL_RCC_OscConfig+0x4f8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a8a      	ldr	r2, [pc, #552]	; (8003660 <HAL_RCC_OscConfig+0x4f8>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7fe f897 	bl	8001570 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003446:	f7fe f893 	bl	8001570 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	; 0x64
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0fd      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	4b81      	ldr	r3, [pc, #516]	; (8003660 <HAL_RCC_OscConfig+0x4f8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x312>
 800346c:	4b7b      	ldr	r3, [pc, #492]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4a7a      	ldr	r2, [pc, #488]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6213      	str	r3, [r2, #32]
 8003478:	e02d      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x334>
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a75      	ldr	r2, [pc, #468]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	4b73      	ldr	r3, [pc, #460]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a72      	ldr	r2, [pc, #456]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6213      	str	r3, [r2, #32]
 800349a:	e01c      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0x356>
 80034a4:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4a6c      	ldr	r2, [pc, #432]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6213      	str	r3, [r2, #32]
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e00b      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 80034be:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a66      	ldr	r2, [pc, #408]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	4b64      	ldr	r3, [pc, #400]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a63      	ldr	r2, [pc, #396]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034de:	f7fe f847 	bl	8001570 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe f843 	bl	8001570 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0ab      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ee      	beq.n	80034e6 <HAL_RCC_OscConfig+0x37e>
 8003508:	e014      	b.n	8003534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe f831 	bl	8001570 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe f82d 	bl	8001570 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e095      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	4b4c      	ldr	r3, [pc, #304]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b48      	ldr	r3, [pc, #288]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4a47      	ldr	r2, [pc, #284]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8081 	beq.w	8003652 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d061      	beq.n	8003620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d146      	bne.n	80035f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b3f      	ldr	r3, [pc, #252]	; (8003664 <HAL_RCC_OscConfig+0x4fc>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe f801 	bl	8001570 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd fffd 	bl	8001570 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e067      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d108      	bne.n	80035ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	492d      	ldr	r1, [pc, #180]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a19      	ldr	r1, [r3, #32]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	430b      	orrs	r3, r1
 80035be:	4927      	ldr	r1, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_RCC_OscConfig+0x4fc>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fd ffd1 	bl	8001570 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fd ffcd 	bl	8001570 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e037      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x46a>
 80035f0:	e02f      	b.n	8003652 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_RCC_OscConfig+0x4fc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd ffba 	bl	8001570 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fd ffb6 	bl	8001570 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e020      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x498>
 800361e:	e018      	b.n	8003652 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e013      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_OscConfig+0x4f4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	429a      	cmp	r2, r3
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	42420060 	.word	0x42420060

08003668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0d0      	b.n	800381e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d910      	bls.n	80036ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 0207 	bic.w	r2, r3, #7
 8003692:	4965      	ldr	r1, [pc, #404]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0b8      	b.n	800381e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c4:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a58      	ldr	r2, [pc, #352]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036dc:	4b53      	ldr	r3, [pc, #332]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	494d      	ldr	r1, [pc, #308]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d040      	beq.n	8003788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d115      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07f      	b.n	800381e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003726:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e073      	b.n	800381e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06b      	b.n	800381e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003746:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4936      	ldr	r1, [pc, #216]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003758:	f7fd ff0a 	bl	8001570 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fd ff06 	bl	8001570 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e053      	b.n	800381e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 020c 	and.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d1eb      	bne.n	8003760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d210      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0207 	bic.w	r2, r3, #7
 800379e:	4922      	ldr	r1, [pc, #136]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b20      	ldr	r3, [pc, #128]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e032      	b.n	800381e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4916      	ldr	r1, [pc, #88]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	490e      	ldr	r1, [pc, #56]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037f6:	f000 f821 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037fa:	4601      	mov	r1, r0
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	5cd3      	ldrb	r3, [r2, r3]
 800380a:	fa21 f303 	lsr.w	r3, r1, r3
 800380e:	4a09      	ldr	r2, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1cc>)
 8003810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x1d0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fe68 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40022000 	.word	0x40022000
 800382c:	40021000 	.word	0x40021000
 8003830:	08008390 	.word	0x08008390
 8003834:	2000000c 	.word	0x2000000c
 8003838:	20000010 	.word	0x20000010

0800383c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	b490      	push	{r4, r7}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003842:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003844:	1d3c      	adds	r4, r7, #4
 8003846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800384c:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003866:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b04      	cmp	r3, #4
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x40>
 8003876:	2b08      	cmp	r3, #8
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x46>
 800387a:	e02d      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800387c:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800387e:	623b      	str	r3, [r7, #32]
      break;
 8003880:	e02d      	b.n	80038de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	0c9b      	lsrs	r3, r3, #18
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800388e:	4413      	add	r3, r2
 8003890:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003894:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c5b      	lsrs	r3, r3, #17
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ae:	4413      	add	r3, r2
 80038b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ba:	fb02 f203 	mul.w	r2, r2, r3
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	e004      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	623b      	str	r3, [r7, #32]
      break;
 80038d6:	e002      	b.n	80038de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038da:	623b      	str	r3, [r7, #32]
      break;
 80038dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038de:	6a3b      	ldr	r3, [r7, #32]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc90      	pop	{r4, r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	08008338 	.word	0x08008338
 80038f0:	08008348 	.word	0x08008348
 80038f4:	40021000 	.word	0x40021000
 80038f8:	007a1200 	.word	0x007a1200
 80038fc:	003d0900 	.word	0x003d0900

08003900 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCC_Delay+0x34>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <RCC_Delay+0x38>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	0a5b      	lsrs	r3, r3, #9
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800391c:	bf00      	nop
  }
  while (Delay --);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	60fa      	str	r2, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f9      	bne.n	800391c <RCC_Delay+0x1c>
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	2000000c 	.word	0x2000000c
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d07d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395c:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	4a4b      	ldr	r2, [pc, #300]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	61d3      	str	r3, [r2, #28]
 8003974:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d118      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003990:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a42      	ldr	r2, [pc, #264]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399c:	f7fd fde8 	bl	8001570 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	e008      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a4:	f7fd fde4 	bl	8001570 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e06d      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02e      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d027      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e0:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039f6:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d014      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fd fdb3 	bl	8001570 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fdaf 	bl	8001570 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e036      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ee      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4917      	ldr	r1, [pc, #92]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	490b      	ldr	r1, [pc, #44]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4904      	ldr	r1, [pc, #16]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	42420440 	.word	0x42420440

08003aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	f107 0014 	add.w	r0, r7, #20
 8003ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	b004      	add	sp, #16
 8003ac6:	4770      	bx	lr

08003ac8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ad8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003adc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003afc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b40:	b084      	sub	sp, #16
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	f107 0014 	add.w	r0, r7, #20
 8003b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	b004      	add	sp, #16
 8003b7e:	4770      	bx	lr

08003b80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b09b      	sub	sp, #108	; 0x6c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	78db      	ldrb	r3, [r3, #3]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d81f      	bhi.n	8003bf2 <USB_ActivateEndpoint+0x72>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <USB_ActivateEndpoint+0x38>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003be5 	.word	0x08003be5
 8003bc0:	08003bfb 	.word	0x08003bfb
 8003bc4:	08003bd7 	.word	0x08003bd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bd4:	e012      	b.n	8003bfc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bda:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003bde:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003be2:	e00b      	b.n	8003bfc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003be4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bf0:	e004      	b.n	8003bfc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003bf8:	e000      	b.n	8003bfc <USB_ActivateEndpoint+0x7c>
      break;
 8003bfa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	7b1b      	ldrb	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 8149 	bne.w	8003f00 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	785b      	ldrb	r3, [r3, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8084 	beq.w	8003d80 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4413      	add	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	011a      	lsls	r2, r3, #4
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	88db      	ldrh	r3, [r3, #6]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	81fb      	strh	r3, [r7, #14]
 8003cba:	89fb      	ldrh	r3, [r7, #14]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01b      	beq.n	8003cfc <USB_ActivateEndpoint+0x17c>
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	81bb      	strh	r3, [r7, #12]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	89bb      	ldrh	r3, [r7, #12]
 8003ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	78db      	ldrb	r3, [r3, #3]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d020      	beq.n	8003d46 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1a:	813b      	strh	r3, [r7, #8]
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	f083 0320 	eor.w	r3, r3, #32
 8003d22:	813b      	strh	r3, [r7, #8]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	893b      	ldrh	r3, [r7, #8]
 8003d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	8013      	strh	r3, [r2, #0]
 8003d44:	e27f      	b.n	8004246 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	897b      	ldrh	r3, [r7, #10]
 8003d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8013      	strh	r3, [r2, #0]
 8003d7e:	e262      	b.n	8004246 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	4413      	add	r3, r2
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	011a      	lsls	r2, r3, #4
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	88db      	ldrh	r3, [r3, #6]
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	4413      	add	r3, r2
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	011a      	lsls	r2, r3, #4
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d112      	bne.n	8003e06 <USB_ActivateEndpoint+0x286>
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e02f      	b.n	8003e66 <USB_ActivateEndpoint+0x2e6>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e0c:	d813      	bhi.n	8003e36 <USB_ActivateEndpoint+0x2b6>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	663b      	str	r3, [r7, #96]	; 0x60
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <USB_ActivateEndpoint+0x2a8>
 8003e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e24:	3301      	adds	r3, #1
 8003e26:	663b      	str	r3, [r7, #96]	; 0x60
 8003e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	029b      	lsls	r3, r3, #10
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e017      	b.n	8003e66 <USB_ActivateEndpoint+0x2e6>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <USB_ActivateEndpoint+0x2d0>
 8003e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	029b      	lsls	r3, r3, #10
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	83fb      	strh	r3, [r7, #30]
 8003e74:	8bfb      	ldrh	r3, [r7, #30]
 8003e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01b      	beq.n	8003eb6 <USB_ActivateEndpoint+0x336>
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e94:	83bb      	strh	r3, [r7, #28]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	8bbb      	ldrh	r3, [r7, #28]
 8003ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	837b      	strh	r3, [r7, #26]
 8003ece:	8b7b      	ldrh	r3, [r7, #26]
 8003ed0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ed4:	837b      	strh	r3, [r7, #26]
 8003ed6:	8b7b      	ldrh	r3, [r7, #26]
 8003ed8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003edc:	837b      	strh	r3, [r7, #26]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	441a      	add	r2, r3
 8003ee8:	8b7b      	ldrh	r3, [r7, #26]
 8003eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	8013      	strh	r3, [r2, #0]
 8003efe:	e1a2      	b.n	8004246 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f4c:	4413      	add	r3, r2
 8003f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	011a      	lsls	r2, r3, #4
 8003f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	891b      	ldrh	r3, [r3, #8]
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	653b      	str	r3, [r7, #80]	; 0x50
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f80:	4413      	add	r3, r2
 8003f82:	653b      	str	r3, [r7, #80]	; 0x50
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	011a      	lsls	r2, r3, #4
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	895b      	ldrh	r3, [r3, #10]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	785b      	ldrb	r3, [r3, #1]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f040 8091 	bne.w	80040d0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01b      	beq.n	8003ffe <USB_ActivateEndpoint+0x47e>
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	441a      	add	r2, r3
 8003fe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	873b      	strh	r3, [r7, #56]	; 0x38
 800400c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01b      	beq.n	800404e <USB_ActivateEndpoint+0x4ce>
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800403a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800404a:	b29b      	uxth	r3, r3
 800404c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004064:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004068:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800406c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800406e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004070:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004074:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004092:	b29b      	uxth	r3, r3
 8004094:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	867b      	strh	r3, [r7, #50]	; 0x32
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	8013      	strh	r3, [r2, #0]
 80040ce:	e0ba      	b.n	8004246 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80040e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01d      	beq.n	8004128 <USB_ActivateEndpoint+0x5a8>
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004124:	b29b      	uxth	r3, r3
 8004126:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004138:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01d      	beq.n	8004180 <USB_ActivateEndpoint+0x600>
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	441a      	add	r2, r3
 8004168:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800416c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004178:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800417c:	b29b      	uxth	r3, r3
 800417e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	78db      	ldrb	r3, [r3, #3]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d024      	beq.n	80041d2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041a6:	f083 0320 	eor.w	r3, r3, #32
 80041aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	8013      	strh	r3, [r2, #0]
 80041d0:	e01d      	b.n	800420e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	441a      	add	r2, r3
 80041f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80041fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800424a:	4618      	mov	r0, r3
 800424c:	376c      	adds	r7, #108	; 0x6c
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004254:	b480      	push	{r7}
 8004256:	b08d      	sub	sp, #52	; 0x34
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	7b1b      	ldrb	r3, [r3, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 808e 	bne.w	8004384 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d044      	beq.n	80042fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	81bb      	strh	r3, [r7, #12]
 800427e:	89bb      	ldrh	r3, [r7, #12]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <USB_DeactivateEndpoint+0x6c>
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	817b      	strh	r3, [r7, #10]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042bc:	b29b      	uxth	r3, r3
 80042be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d6:	813b      	strh	r3, [r7, #8]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	893b      	ldrh	r3, [r7, #8]
 80042e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8013      	strh	r3, [r2, #0]
 80042f8:	e192      	b.n	8004620 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	827b      	strh	r3, [r7, #18]
 8004308:	8a7b      	ldrh	r3, [r7, #18]
 800430a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01b      	beq.n	800434a <USB_DeactivateEndpoint+0xf6>
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004328:	823b      	strh	r3, [r7, #16]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	441a      	add	r2, r3
 8004334:	8a3b      	ldrh	r3, [r7, #16]
 8004336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	81fb      	strh	r3, [r7, #14]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	89fb      	ldrh	r3, [r7, #14]
 800436e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437e:	b29b      	uxth	r3, r3
 8004380:	8013      	strh	r3, [r2, #0]
 8004382:	e14d      	b.n	8004620 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 80a5 	bne.w	80044d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	843b      	strh	r3, [r7, #32]
 800439c:	8c3b      	ldrh	r3, [r7, #32]
 800439e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01b      	beq.n	80043de <USB_DeactivateEndpoint+0x18a>
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	83fb      	strh	r3, [r7, #30]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8bfb      	ldrh	r3, [r7, #30]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	83bb      	strh	r3, [r7, #28]
 80043ec:	8bbb      	ldrh	r3, [r7, #28]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01b      	beq.n	800442e <USB_DeactivateEndpoint+0x1da>
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	837b      	strh	r3, [r7, #26]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	8b7b      	ldrh	r3, [r7, #26]
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004444:	833b      	strh	r3, [r7, #24]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	8b3b      	ldrh	r3, [r7, #24]
 8004452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	82fb      	strh	r3, [r7, #22]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	8afb      	ldrh	r3, [r7, #22]
 800448a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b4:	82bb      	strh	r3, [r7, #20]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	8abb      	ldrh	r3, [r7, #20]
 80044c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]
 80044d6:	e0a3      	b.n	8004620 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <USB_DeactivateEndpoint+0x2d4>
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <USB_DeactivateEndpoint+0x324>
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	853b      	strh	r3, [r7, #40]	; 0x28
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004574:	b29b      	uxth	r3, r3
 8004576:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800459c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800460c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	b29b      	uxth	r3, r3
 800461e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3734      	adds	r7, #52	; 0x34
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b0cc      	sub	sp, #304	; 0x130
 8004630:	af00      	add	r7, sp, #0
 8004632:	1d3b      	adds	r3, r7, #4
 8004634:	6018      	str	r0, [r3, #0]
 8004636:	463b      	mov	r3, r7
 8004638:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b01      	cmp	r3, #1
 8004642:	f040 872e 	bne.w	80054a2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004646:	463b      	mov	r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	429a      	cmp	r2, r3
 8004654:	d905      	bls.n	8004662 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004656:	463b      	mov	r3, r7
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004660:	e004      	b.n	800466c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004662:	463b      	mov	r3, r7
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	7b1b      	ldrb	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d134      	bne.n	80046e0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004676:	463b      	mov	r3, r7
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6959      	ldr	r1, [r3, #20]
 800467c:	463b      	mov	r3, r7
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	88da      	ldrh	r2, [r3, #6]
 8004682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004686:	b29b      	uxth	r3, r3
 8004688:	1d38      	adds	r0, r7, #4
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	f001 fc03 	bl	8005e96 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004690:	f107 0310 	add.w	r3, r7, #16
 8004694:	1d3a      	adds	r2, r7, #4
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	f107 0310 	add.w	r3, r7, #16
 80046aa:	f107 0210 	add.w	r2, r7, #16
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	440a      	add	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	463b      	mov	r3, r7
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	011a      	lsls	r2, r3, #4
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80046c8:	f107 030c 	add.w	r3, r7, #12
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	f107 030c 	add.w	r3, r7, #12
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	f000 beac 	b.w	8005438 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80046e0:	463b      	mov	r3, r7
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	78db      	ldrb	r3, [r3, #3]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	f040 838c 	bne.w	8004e04 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80046ec:	463b      	mov	r3, r7
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	f240 8330 	bls.w	8004d5e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80046fe:	1d3b      	adds	r3, r7, #4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	463b      	mov	r3, r7
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004742:	463b      	mov	r3, r7
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800474c:	1ad2      	subs	r2, r2, r3
 800474e:	463b      	mov	r3, r7
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	463b      	mov	r3, r7
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 819e 	beq.w	8004aac <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004774:	1d3a      	adds	r2, r7, #4
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	463b      	mov	r3, r7
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d17a      	bne.n	800487a <USB_EPStartXfer+0x24e>
 8004784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004788:	1d3a      	adds	r2, r7, #4
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	4619      	mov	r1, r3
 800479a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800479e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	440a      	add	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	463b      	mov	r3, r7
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80047bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11a      	bne.n	8004800 <USB_EPStartXfer+0x1d4>
 80047ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	e062      	b.n	80048c6 <USB_EPStartXfer+0x29a>
 8004800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004804:	2b3e      	cmp	r3, #62	; 0x3e
 8004806:	d819      	bhi.n	800483c <USB_EPStartXfer+0x210>
 8004808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <USB_EPStartXfer+0x1fc>
 800481e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004822:	3301      	adds	r3, #1
 8004824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004828:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800482c:	b29b      	uxth	r3, r3
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	b29a      	uxth	r2, r3
 8004832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e044      	b.n	80048c6 <USB_EPStartXfer+0x29a>
 800483c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <USB_EPStartXfer+0x230>
 8004852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004856:	3b01      	subs	r3, #1
 8004858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800485c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004860:	b29b      	uxth	r3, r3
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	b29b      	uxth	r3, r3
 8004866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486e:	b29a      	uxth	r2, r3
 8004870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	e025      	b.n	80048c6 <USB_EPStartXfer+0x29a>
 800487a:	463b      	mov	r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d120      	bne.n	80048c6 <USB_EPStartXfer+0x29a>
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488c:	b29b      	uxth	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004894:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	440a      	add	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	463b      	mov	r3, r7
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	011a      	lsls	r2, r3, #4
 80048a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4413      	add	r3, r2
 80048ae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80048b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80048c6:	463b      	mov	r3, r7
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	895b      	ldrh	r3, [r3, #10]
 80048cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048d0:	463b      	mov	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6959      	ldr	r1, [r3, #20]
 80048d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80048e0:	1d38      	adds	r0, r7, #4
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	f001 fad7 	bl	8005e96 <USB_WritePMA>
            ep->xfer_buff += len;
 80048e8:	463b      	mov	r3, r7
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f2:	441a      	add	r2, r3
 80048f4:	463b      	mov	r3, r7
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048fa:	463b      	mov	r3, r7
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	463b      	mov	r3, r7
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d909      	bls.n	800491e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800490a:	463b      	mov	r3, r7
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	463b      	mov	r3, r7
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	621a      	str	r2, [r3, #32]
 800491c:	e008      	b.n	8004930 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004928:	463b      	mov	r3, r7
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004930:	463b      	mov	r3, r7
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d17a      	bne.n	8004a30 <USB_EPStartXfer+0x404>
 800493a:	f107 0318 	add.w	r3, r7, #24
 800493e:	1d3a      	adds	r2, r7, #4
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	4619      	mov	r1, r3
 8004950:	f107 0318 	add.w	r3, r7, #24
 8004954:	f107 0218 	add.w	r2, r7, #24
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	440a      	add	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	463b      	mov	r3, r7
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	011a      	lsls	r2, r3, #4
 8004966:	f107 0318 	add.w	r3, r7, #24
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4413      	add	r3, r2
 800496e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004972:	f107 0314 	add.w	r3, r7, #20
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11a      	bne.n	80049b6 <USB_EPStartXfer+0x38a>
 8004980:	f107 0314 	add.w	r3, r7, #20
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800498e:	b29a      	uxth	r2, r3
 8004990:	f107 0314 	add.w	r3, r7, #20
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	e067      	b.n	8004a86 <USB_EPStartXfer+0x45a>
 80049b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ba:	2b3e      	cmp	r3, #62	; 0x3e
 80049bc:	d819      	bhi.n	80049f2 <USB_EPStartXfer+0x3c6>
 80049be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80049c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <USB_EPStartXfer+0x3b2>
 80049d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80049d8:	3301      	adds	r3, #1
 80049da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80049de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	e049      	b.n	8004a86 <USB_EPStartXfer+0x45a>
 80049f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80049fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <USB_EPStartXfer+0x3e6>
 8004a08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	029b      	lsls	r3, r3, #10
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	f107 0314 	add.w	r3, r7, #20
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e02a      	b.n	8004a86 <USB_EPStartXfer+0x45a>
 8004a30:	463b      	mov	r3, r7
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	785b      	ldrb	r3, [r3, #1]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d125      	bne.n	8004a86 <USB_EPStartXfer+0x45a>
 8004a3a:	f107 0320 	add.w	r3, r7, #32
 8004a3e:	1d3a      	adds	r2, r7, #4
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	1d3b      	adds	r3, r7, #4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f107 0320 	add.w	r3, r7, #32
 8004a54:	f107 0220 	add.w	r2, r7, #32
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	463b      	mov	r3, r7
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	011a      	lsls	r2, r3, #4
 8004a66:	f107 0320 	add.w	r3, r7, #32
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004a72:	f107 031c 	add.w	r3, r7, #28
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	f107 031c 	add.w	r3, r7, #28
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a86:	463b      	mov	r3, r7
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	891b      	ldrh	r3, [r3, #8]
 8004a8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a90:	463b      	mov	r3, r7
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6959      	ldr	r1, [r3, #20]
 8004a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004aa0:	1d38      	adds	r0, r7, #4
 8004aa2:	6800      	ldr	r0, [r0, #0]
 8004aa4:	f001 f9f7 	bl	8005e96 <USB_WritePMA>
 8004aa8:	f000 bcc6 	b.w	8005438 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aac:	463b      	mov	r3, r7
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d164      	bne.n	8004b80 <USB_EPStartXfer+0x554>
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004abc:	1d3b      	adds	r3, r7, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aca:	4413      	add	r3, r2
 8004acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	011a      	lsls	r2, r3, #4
 8004ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad8:	4413      	add	r3, r2
 8004ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d112      	bne.n	8004b0e <USB_EPStartXfer+0x4e2>
 8004ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af6:	801a      	strh	r2, [r3, #0]
 8004af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	e057      	b.n	8004bbe <USB_EPStartXfer+0x592>
 8004b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b12:	2b3e      	cmp	r3, #62	; 0x3e
 8004b14:	d817      	bhi.n	8004b46 <USB_EPStartXfer+0x51a>
 8004b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <USB_EPStartXfer+0x50a>
 8004b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b30:	3301      	adds	r3, #1
 8004b32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e03b      	b.n	8004bbe <USB_EPStartXfer+0x592>
 8004b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <USB_EPStartXfer+0x53a>
 8004b5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b60:	3b01      	subs	r3, #1
 8004b62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e01e      	b.n	8004bbe <USB_EPStartXfer+0x592>
 8004b80:	463b      	mov	r3, r7
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d119      	bne.n	8004bbe <USB_EPStartXfer+0x592>
 8004b8a:	1d3b      	adds	r3, r7, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b90:	1d3b      	adds	r3, r7, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9e:	4413      	add	r3, r2
 8004ba0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	011a      	lsls	r2, r3, #4
 8004baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bac:	4413      	add	r3, r2
 8004bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	891b      	ldrh	r3, [r3, #8]
 8004bc4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bc8:	463b      	mov	r3, r7
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6959      	ldr	r1, [r3, #20]
 8004bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bd8:	1d38      	adds	r0, r7, #4
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	f001 f95b 	bl	8005e96 <USB_WritePMA>
            ep->xfer_buff += len;
 8004be0:	463b      	mov	r3, r7
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bea:	441a      	add	r2, r3
 8004bec:	463b      	mov	r3, r7
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a1a      	ldr	r2, [r3, #32]
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d909      	bls.n	8004c16 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004c02:	463b      	mov	r3, r7
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0c:	1ad2      	subs	r2, r2, r3
 8004c0e:	463b      	mov	r3, r7
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	621a      	str	r2, [r3, #32]
 8004c14:	e008      	b.n	8004c28 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c28:	1d3b      	adds	r3, r7, #4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c2e:	463b      	mov	r3, r7
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d164      	bne.n	8004d02 <USB_EPStartXfer+0x6d6>
 8004c38:	1d3b      	adds	r3, r7, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	4413      	add	r3, r2
 8004c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c50:	463b      	mov	r3, r7
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	011a      	lsls	r2, r3, #4
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
 8004c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d112      	bne.n	8004c90 <USB_EPStartXfer+0x664>
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	e054      	b.n	8004d3a <USB_EPStartXfer+0x70e>
 8004c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c94:	2b3e      	cmp	r3, #62	; 0x3e
 8004c96:	d817      	bhi.n	8004cc8 <USB_EPStartXfer+0x69c>
 8004c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <USB_EPStartXfer+0x68c>
 8004cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	029b      	lsls	r3, r3, #10
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	e038      	b.n	8004d3a <USB_EPStartXfer+0x70e>
 8004cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <USB_EPStartXfer+0x6bc>
 8004cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	029b      	lsls	r3, r3, #10
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	e01b      	b.n	8004d3a <USB_EPStartXfer+0x70e>
 8004d02:	463b      	mov	r3, r7
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	785b      	ldrb	r3, [r3, #1]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d116      	bne.n	8004d3a <USB_EPStartXfer+0x70e>
 8004d0c:	1d3b      	adds	r3, r7, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	4413      	add	r3, r2
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1e:	463b      	mov	r3, r7
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	011a      	lsls	r2, r3, #4
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	4413      	add	r3, r2
 8004d2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	895b      	ldrh	r3, [r3, #10]
 8004d40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6959      	ldr	r1, [r3, #20]
 8004d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d54:	1d38      	adds	r0, r7, #4
 8004d56:	6800      	ldr	r0, [r0, #0]
 8004d58:	f001 f89d 	bl	8005e96 <USB_WritePMA>
 8004d5c:	e36c      	b.n	8005438 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d5e:	463b      	mov	r3, r7
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d68:	1d3b      	adds	r3, r7, #4
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db2:	1d3b      	adds	r3, r7, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc0:	4413      	add	r3, r2
 8004dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	011a      	lsls	r2, r3, #4
 8004dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004de0:	463b      	mov	r3, r7
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	891b      	ldrh	r3, [r3, #8]
 8004de6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dea:	463b      	mov	r3, r7
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6959      	ldr	r1, [r3, #20]
 8004df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dfa:	1d38      	adds	r0, r7, #4
 8004dfc:	6800      	ldr	r0, [r0, #0]
 8004dfe:	f001 f84a 	bl	8005e96 <USB_WritePMA>
 8004e02:	e319      	b.n	8005438 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	463b      	mov	r3, r7
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004e22:	1d3b      	adds	r3, r7, #4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e48:	463b      	mov	r3, r7
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6a1a      	ldr	r2, [r3, #32]
 8004e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	463b      	mov	r3, r7
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	463b      	mov	r3, r7
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8162 	beq.w	800513a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e7e:	463b      	mov	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d164      	bne.n	8004f52 <USB_EPStartXfer+0x926>
 8004e88:	1d3b      	adds	r3, r7, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9c:	4413      	add	r3, r2
 8004e9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	011a      	lsls	r2, r3, #4
 8004ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eaa:	4413      	add	r3, r2
 8004eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eb0:	677b      	str	r3, [r7, #116]	; 0x74
 8004eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d112      	bne.n	8004ee0 <USB_EPStartXfer+0x8b4>
 8004eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e057      	b.n	8004f90 <USB_EPStartXfer+0x964>
 8004ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee6:	d817      	bhi.n	8004f18 <USB_EPStartXfer+0x8ec>
 8004ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <USB_EPStartXfer+0x8dc>
 8004efe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f02:	3301      	adds	r3, #1
 8004f04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	029b      	lsls	r3, r3, #10
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e03b      	b.n	8004f90 <USB_EPStartXfer+0x964>
 8004f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <USB_EPStartXfer+0x90c>
 8004f2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f32:	3b01      	subs	r3, #1
 8004f34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e01e      	b.n	8004f90 <USB_EPStartXfer+0x964>
 8004f52:	463b      	mov	r3, r7
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d119      	bne.n	8004f90 <USB_EPStartXfer+0x964>
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f72:	463b      	mov	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	011a      	lsls	r2, r3, #4
 8004f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f7e:	4413      	add	r3, r2
 8004f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004f90:	463b      	mov	r3, r7
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	895b      	ldrh	r3, [r3, #10]
 8004f96:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6959      	ldr	r1, [r3, #20]
 8004fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004faa:	1d38      	adds	r0, r7, #4
 8004fac:	6800      	ldr	r0, [r0, #0]
 8004fae:	f000 ff72 	bl	8005e96 <USB_WritePMA>
          ep->xfer_buff += len;
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbc:	441a      	add	r2, r3
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a1a      	ldr	r2, [r3, #32]
 8004fca:	463b      	mov	r3, r7
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d909      	bls.n	8004fe8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a1a      	ldr	r2, [r3, #32]
 8004fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	621a      	str	r2, [r3, #32]
 8004fe6:	e008      	b.n	8004ffa <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004fe8:	463b      	mov	r3, r7
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 821a 	beq.w	8005438 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005004:	463b      	mov	r3, r7
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d164      	bne.n	80050d8 <USB_EPStartXfer+0xaac>
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	66bb      	str	r3, [r7, #104]	; 0x68
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005022:	4413      	add	r3, r2
 8005024:	66bb      	str	r3, [r7, #104]	; 0x68
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005030:	4413      	add	r3, r2
 8005032:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005036:	667b      	str	r3, [r7, #100]	; 0x64
 8005038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d112      	bne.n	8005066 <USB_EPStartXfer+0xa3a>
 8005040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800504a:	b29a      	uxth	r2, r3
 800504c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800505a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505e:	b29a      	uxth	r2, r3
 8005060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	e057      	b.n	8005116 <USB_EPStartXfer+0xaea>
 8005066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506a:	2b3e      	cmp	r3, #62	; 0x3e
 800506c:	d817      	bhi.n	800509e <USB_EPStartXfer+0xa72>
 800506e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <USB_EPStartXfer+0xa62>
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005088:	3301      	adds	r3, #1
 800508a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800508e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005092:	b29b      	uxth	r3, r3
 8005094:	029b      	lsls	r3, r3, #10
 8005096:	b29a      	uxth	r2, r3
 8005098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e03b      	b.n	8005116 <USB_EPStartXfer+0xaea>
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80050a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <USB_EPStartXfer+0xa92>
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b8:	3b01      	subs	r3, #1
 80050ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e01e      	b.n	8005116 <USB_EPStartXfer+0xaea>
 80050d8:	463b      	mov	r3, r7
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	785b      	ldrb	r3, [r3, #1]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d119      	bne.n	8005116 <USB_EPStartXfer+0xaea>
 80050e2:	1d3b      	adds	r3, r7, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	673b      	str	r3, [r7, #112]	; 0x70
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050f6:	4413      	add	r3, r2
 80050f8:	673b      	str	r3, [r7, #112]	; 0x70
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	011a      	lsls	r2, r3, #4
 8005102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005104:	4413      	add	r3, r2
 8005106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800510a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005110:	b29a      	uxth	r2, r3
 8005112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005114:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005116:	463b      	mov	r3, r7
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	891b      	ldrh	r3, [r3, #8]
 800511c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6959      	ldr	r1, [r3, #20]
 8005126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512a:	b29b      	uxth	r3, r3
 800512c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005130:	1d38      	adds	r0, r7, #4
 8005132:	6800      	ldr	r0, [r0, #0]
 8005134:	f000 feaf 	bl	8005e96 <USB_WritePMA>
 8005138:	e17e      	b.n	8005438 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800513a:	463b      	mov	r3, r7
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d16f      	bne.n	8005224 <USB_EPStartXfer+0xbf8>
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005154:	b29b      	uxth	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800515c:	4413      	add	r3, r2
 800515e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	011a      	lsls	r2, r3, #4
 800516a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800516e:	4413      	add	r3, r2
 8005170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d116      	bne.n	80051ae <USB_EPStartXfer+0xb82>
 8005180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800518c:	b29a      	uxth	r2, r3
 800518e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e05f      	b.n	800526e <USB_EPStartXfer+0xc42>
 80051ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b2:	2b3e      	cmp	r3, #62	; 0x3e
 80051b4:	d818      	bhi.n	80051e8 <USB_EPStartXfer+0xbbc>
 80051b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80051c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <USB_EPStartXfer+0xbaa>
 80051cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051d0:	3301      	adds	r3, #1
 80051d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80051d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051da:	b29b      	uxth	r3, r3
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e042      	b.n	800526e <USB_EPStartXfer+0xc42>
 80051e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80051f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <USB_EPStartXfer+0xbdc>
 80051fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005202:	3b01      	subs	r3, #1
 8005204:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005208:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800520c:	b29b      	uxth	r3, r3
 800520e:	029b      	lsls	r3, r3, #10
 8005210:	b29b      	uxth	r3, r3
 8005212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521a:	b29a      	uxth	r2, r3
 800521c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e024      	b.n	800526e <USB_EPStartXfer+0xc42>
 8005224:	463b      	mov	r3, r7
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d11f      	bne.n	800526e <USB_EPStartXfer+0xc42>
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005246:	4413      	add	r3, r2
 8005248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	011a      	lsls	r2, r3, #4
 8005254:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005258:	4413      	add	r3, r2
 800525a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800525e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800526c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	891b      	ldrh	r3, [r3, #8]
 8005274:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005278:	463b      	mov	r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6959      	ldr	r1, [r3, #20]
 800527e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005282:	b29b      	uxth	r3, r3
 8005284:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005288:	1d38      	adds	r0, r7, #4
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	f000 fe03 	bl	8005e96 <USB_WritePMA>
          ep->xfer_buff += len;
 8005290:	463b      	mov	r3, r7
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529a:	441a      	add	r2, r3
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d909      	bls.n	80052c6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	621a      	str	r2, [r3, #32]
 80052c4:	e008      	b.n	80052d8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80052d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80ab 	beq.w	8005438 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ea:	463b      	mov	r3, r7
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d16f      	bne.n	80053d4 <USB_EPStartXfer+0xda8>
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052fc:	1d3b      	adds	r3, r7, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005304:	b29b      	uxth	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800530c:	4413      	add	r3, r2
 800530e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	011a      	lsls	r2, r3, #4
 800531a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800531e:	4413      	add	r3, r2
 8005320:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d116      	bne.n	800535e <USB_EPStartXfer+0xd32>
 8005330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800533c:	b29a      	uxth	r2, r3
 800533e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005354:	b29a      	uxth	r2, r3
 8005356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	e05b      	b.n	8005416 <USB_EPStartXfer+0xdea>
 800535e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005362:	2b3e      	cmp	r3, #62	; 0x3e
 8005364:	d818      	bhi.n	8005398 <USB_EPStartXfer+0xd6c>
 8005366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <USB_EPStartXfer+0xd5a>
 800537c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29a      	uxth	r2, r3
 8005390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	e03e      	b.n	8005416 <USB_EPStartXfer+0xdea>
 8005398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <USB_EPStartXfer+0xd8c>
 80053ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b2:	3b01      	subs	r3, #1
 80053b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053bc:	b29b      	uxth	r3, r3
 80053be:	029b      	lsls	r3, r3, #10
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e020      	b.n	8005416 <USB_EPStartXfer+0xdea>
 80053d4:	463b      	mov	r3, r7
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d11b      	bne.n	8005416 <USB_EPStartXfer+0xdea>
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053ee:	4413      	add	r3, r2
 80053f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	011a      	lsls	r2, r3, #4
 80053fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005400:	4413      	add	r3, r2
 8005402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800540a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540e:	b29a      	uxth	r2, r3
 8005410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005414:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	895b      	ldrh	r3, [r3, #10]
 800541c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6959      	ldr	r1, [r3, #20]
 8005426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542a:	b29b      	uxth	r3, r3
 800542c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005430:	1d38      	adds	r0, r7, #4
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	f000 fd2f 	bl	8005e96 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005438:	1d3b      	adds	r3, r7, #4
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f107 020a 	add.w	r2, r7, #10
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005456:	8013      	strh	r3, [r2, #0]
 8005458:	f107 030a 	add.w	r3, r7, #10
 800545c:	f107 020a 	add.w	r2, r7, #10
 8005460:	8812      	ldrh	r2, [r2, #0]
 8005462:	f082 0210 	eor.w	r2, r2, #16
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	f107 030a 	add.w	r3, r7, #10
 800546c:	f107 020a 	add.w	r2, r7, #10
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	f082 0220 	eor.w	r2, r2, #32
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	463b      	mov	r3, r7
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	f107 030a 	add.w	r3, r7, #10
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549c:	b29b      	uxth	r3, r3
 800549e:	8013      	strh	r3, [r2, #0]
 80054a0:	e3b5      	b.n	8005c0e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80054a2:	463b      	mov	r3, r7
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	7b1b      	ldrb	r3, [r3, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f040 8090 	bne.w	80055ce <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	463b      	mov	r3, r7
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90e      	bls.n	80054dc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	619a      	str	r2, [r3, #24]
 80054da:	e008      	b.n	80054ee <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80054dc:	463b      	mov	r3, r7
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005506:	4413      	add	r3, r2
 8005508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	011a      	lsls	r2, r3, #4
 8005514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005518:	4413      	add	r3, r2
 800551a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800551e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <USB_EPStartXfer+0xf2c>
 800552a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29a      	uxth	r2, r3
 8005550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e32c      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
 8005558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555c:	2b3e      	cmp	r3, #62	; 0x3e
 800555e:	d818      	bhi.n	8005592 <USB_EPStartXfer+0xf66>
 8005560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800556a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <USB_EPStartXfer+0xf54>
 8005576:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800557a:	3301      	adds	r3, #1
 800557c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005580:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005584:	b29b      	uxth	r3, r3
 8005586:	029b      	lsls	r3, r3, #10
 8005588:	b29a      	uxth	r2, r3
 800558a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e30f      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
 8005592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800559c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d104      	bne.n	80055b2 <USB_EPStartXfer+0xf86>
 80055a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055ac:	3b01      	subs	r3, #1
 80055ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e2f1      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	78db      	ldrb	r3, [r3, #3]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	f040 818f 	bne.w	80058f8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d175      	bne.n	80056d0 <USB_EPStartXfer+0x10a4>
 80055e4:	1d3b      	adds	r3, r7, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055fc:	4413      	add	r3, r2
 80055fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005602:	463b      	mov	r3, r7
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	011a      	lsls	r2, r3, #4
 800560a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800560e:	4413      	add	r3, r2
 8005610:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005618:	463b      	mov	r3, r7
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d116      	bne.n	8005650 <USB_EPStartXfer+0x1024>
 8005622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800562e:	b29a      	uxth	r2, r3
 8005630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005646:	b29a      	uxth	r2, r3
 8005648:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800564c:	801a      	strh	r2, [r3, #0]
 800564e:	e065      	b.n	800571c <USB_EPStartXfer+0x10f0>
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b3e      	cmp	r3, #62	; 0x3e
 8005658:	d81a      	bhi.n	8005690 <USB_EPStartXfer+0x1064>
 800565a:	463b      	mov	r3, r7
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005666:	463b      	mov	r3, r7
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <USB_EPStartXfer+0x1052>
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005678:	3301      	adds	r3, #1
 800567a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005682:	b29b      	uxth	r3, r3
 8005684:	029b      	lsls	r3, r3, #10
 8005686:	b29a      	uxth	r2, r3
 8005688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e045      	b.n	800571c <USB_EPStartXfer+0x10f0>
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <USB_EPStartXfer+0x1088>
 80056aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ae:	3b01      	subs	r3, #1
 80056b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	b29b      	uxth	r3, r3
 80056be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	e025      	b.n	800571c <USB_EPStartXfer+0x10f0>
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d120      	bne.n	800571c <USB_EPStartXfer+0x10f0>
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056f2:	4413      	add	r3, r2
 80056f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005704:	4413      	add	r3, r2
 8005706:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800570a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	b29a      	uxth	r2, r3
 8005716:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d175      	bne.n	800581a <USB_EPStartXfer+0x11ee>
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573e:	b29b      	uxth	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005746:	4413      	add	r3, r2
 8005748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800574c:	463b      	mov	r3, r7
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	011a      	lsls	r2, r3, #4
 8005754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005758:	4413      	add	r3, r2
 800575a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800575e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005762:	463b      	mov	r3, r7
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d116      	bne.n	800579a <USB_EPStartXfer+0x116e>
 800576c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005778:	b29a      	uxth	r2, r3
 800577a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29a      	uxth	r2, r3
 8005792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e061      	b.n	800585e <USB_EPStartXfer+0x1232>
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b3e      	cmp	r3, #62	; 0x3e
 80057a2:	d81a      	bhi.n	80057da <USB_EPStartXfer+0x11ae>
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <USB_EPStartXfer+0x119c>
 80057be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057c2:	3301      	adds	r3, #1
 80057c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e041      	b.n	800585e <USB_EPStartXfer+0x1232>
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <USB_EPStartXfer+0x11d2>
 80057f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057f8:	3b01      	subs	r3, #1
 80057fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005802:	b29b      	uxth	r3, r3
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	b29b      	uxth	r3, r3
 8005808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005810:	b29a      	uxth	r2, r3
 8005812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	e021      	b.n	800585e <USB_EPStartXfer+0x1232>
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d11c      	bne.n	800585e <USB_EPStartXfer+0x1232>
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582c:	b29b      	uxth	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005834:	4413      	add	r3, r2
 8005836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800583a:	463b      	mov	r3, r7
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	011a      	lsls	r2, r3, #4
 8005842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005846:	4413      	add	r3, r2
 8005848:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800584c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005850:	463b      	mov	r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	b29a      	uxth	r2, r3
 8005858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800585c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800585e:	463b      	mov	r3, r7
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 81a4 	beq.w	8005bb2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800587e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <USB_EPStartXfer+0x126a>
 800588a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10d      	bne.n	80058b2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005896:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 8187 	bne.w	8005bb2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f040 8180 	bne.w	8005bb2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80058b2:	1d3b      	adds	r3, r7, #4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	463b      	mov	r3, r7
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058cc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80058d0:	1d3b      	adds	r3, r7, #4
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	463b      	mov	r3, r7
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80058e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	8013      	strh	r3, [r2, #0]
 80058f6:	e15c      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	f040 8155 	bne.w	8005bae <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d90e      	bls.n	8005932 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005928:	1ad2      	subs	r2, r2, r3
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	619a      	str	r2, [r3, #24]
 8005930:	e008      	b.n	8005944 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800593c:	463b      	mov	r3, r7
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005944:	463b      	mov	r3, r7
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d16f      	bne.n	8005a2e <USB_EPStartXfer+0x1402>
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005956:	1d3b      	adds	r3, r7, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595e:	b29b      	uxth	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005966:	4413      	add	r3, r2
 8005968:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	011a      	lsls	r2, r3, #4
 8005974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005978:	4413      	add	r3, r2
 800597a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800597e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d116      	bne.n	80059b8 <USB_EPStartXfer+0x138c>
 800598a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005996:	b29a      	uxth	r2, r3
 8005998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	e05f      	b.n	8005a78 <USB_EPStartXfer+0x144c>
 80059b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059bc:	2b3e      	cmp	r3, #62	; 0x3e
 80059be:	d818      	bhi.n	80059f2 <USB_EPStartXfer+0x13c6>
 80059c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <USB_EPStartXfer+0x13b4>
 80059d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059da:	3301      	adds	r3, #1
 80059dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	029b      	lsls	r3, r3, #10
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e042      	b.n	8005a78 <USB_EPStartXfer+0x144c>
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USB_EPStartXfer+0x13e6>
 8005a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	e024      	b.n	8005a78 <USB_EPStartXfer+0x144c>
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d11f      	bne.n	8005a78 <USB_EPStartXfer+0x144c>
 8005a38:	1d3b      	adds	r3, r7, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a40:	1d3b      	adds	r3, r7, #4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	4413      	add	r3, r2
 8005a52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	011a      	lsls	r2, r3, #4
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a62:	4413      	add	r3, r2
 8005a64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d16f      	bne.n	8005b6a <USB_EPStartXfer+0x153e>
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	011a      	lsls	r2, r3, #4
 8005ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d116      	bne.n	8005af4 <USB_EPStartXfer+0x14c8>
 8005ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	e05e      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
 8005af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af8:	2b3e      	cmp	r3, #62	; 0x3e
 8005afa:	d818      	bhi.n	8005b2e <USB_EPStartXfer+0x1502>
 8005afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <USB_EPStartXfer+0x14f0>
 8005b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b16:	3301      	adds	r3, #1
 8005b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e041      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
 8005b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <USB_EPStartXfer+0x1522>
 8005b44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	029b      	lsls	r3, r3, #10
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	e023      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d11e      	bne.n	8005bb2 <USB_EPStartXfer+0x1586>
 8005b74:	1d3b      	adds	r3, r7, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b84:	4413      	add	r3, r2
 8005b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	011a      	lsls	r2, r3, #4
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	e001      	b.n	8005bb2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e02e      	b.n	8005c10 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005bd0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005bd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bd8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005bdc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005be0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005be4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005be8:	1d3b      	adds	r3, r7, #4
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	463b      	mov	r3, r7
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d020      	beq.n	8005c6e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c42:	81bb      	strh	r3, [r7, #12]
 8005c44:	89bb      	ldrh	r3, [r7, #12]
 8005c46:	f083 0310 	eor.w	r3, r3, #16
 8005c4a:	81bb      	strh	r3, [r7, #12]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	89bb      	ldrh	r3, [r7, #12]
 8005c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]
 8005c6c:	e01f      	b.n	8005cae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	81fb      	strh	r3, [r7, #14]
 8005c86:	89fb      	ldrh	r3, [r7, #14]
 8005c88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c8c:	81fb      	strh	r3, [r7, #14]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	89fb      	ldrh	r3, [r7, #14]
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b087      	sub	sp, #28
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	7b1b      	ldrb	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f040 809d 	bne.w	8005e08 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d04c      	beq.n	8005d70 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	823b      	strh	r3, [r7, #16]
 8005ce4:	8a3b      	ldrh	r3, [r7, #16]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01b      	beq.n	8005d26 <USB_EPClearStall+0x6c>
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	81fb      	strh	r3, [r7, #14]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	78db      	ldrb	r3, [r3, #3]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d06c      	beq.n	8005e08 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	81bb      	strh	r3, [r7, #12]
 8005d46:	89bb      	ldrh	r3, [r7, #12]
 8005d48:	f083 0320 	eor.w	r3, r3, #32
 8005d4c:	81bb      	strh	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	89bb      	ldrh	r3, [r7, #12]
 8005d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
 8005d6e:	e04b      	b.n	8005e08 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	82fb      	strh	r3, [r7, #22]
 8005d7e:	8afb      	ldrh	r3, [r7, #22]
 8005d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <USB_EPClearStall+0x106>
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	82bb      	strh	r3, [r7, #20]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	8abb      	ldrh	r3, [r7, #20]
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	827b      	strh	r3, [r7, #18]
 8005dd8:	8a7b      	ldrh	r3, [r7, #18]
 8005dda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dde:	827b      	strh	r3, [r7, #18]
 8005de0:	8a7b      	ldrh	r3, [r7, #18]
 8005de2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005de6:	827b      	strh	r3, [r7, #18]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8a7b      	ldrh	r3, [r7, #18]
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr

08005e14 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b08d      	sub	sp, #52	; 0x34
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	80fb      	strh	r3, [r7, #6]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005eac:	88bb      	ldrh	r3, [r7, #4]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	005a      	lsls	r2, r3, #1
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ece:	e01e      	b.n	8005f0e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	3301      	adds	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	3302      	adds	r3, #2
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	3302      	adds	r3, #2
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3301      	adds	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1dd      	bne.n	8005ed0 <USB_WritePMA+0x3a>
  }
}
 8005f14:	bf00      	nop
 8005f16:	3734      	adds	r7, #52	; 0x34
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr

08005f1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b08b      	sub	sp, #44	; 0x2c
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	80fb      	strh	r3, [r7, #6]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f34:	88bb      	ldrh	r3, [r7, #4]
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	005a      	lsls	r2, r3, #1
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f50:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
 8005f56:	e01b      	b.n	8005f90 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	3302      	adds	r3, #2
 8005f64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	3301      	adds	r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	3302      	adds	r3, #2
 8005f88:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e0      	bne.n	8005f58 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005f96:	88bb      	ldrh	r3, [r7, #4]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	701a      	strb	r2, [r3, #0]
  }
}
 8005fb2:	bf00      	nop
 8005fb4:	372c      	adds	r7, #44	; 0x2c
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	7c1b      	ldrb	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d115      	bne.n	8006000 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd8:	2202      	movs	r2, #2
 8005fda:	2181      	movs	r1, #129	; 0x81
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 feee 	bl	8007dbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fec:	2202      	movs	r2, #2
 8005fee:	2101      	movs	r1, #1
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fee4 	bl	8007dbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005ffe:	e012      	b.n	8006026 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006000:	2340      	movs	r3, #64	; 0x40
 8006002:	2202      	movs	r2, #2
 8006004:	2181      	movs	r1, #129	; 0x81
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f001 fed9 	bl	8007dbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006012:	2340      	movs	r3, #64	; 0x40
 8006014:	2202      	movs	r2, #2
 8006016:	2101      	movs	r1, #1
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fed0 	bl	8007dbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006026:	2308      	movs	r3, #8
 8006028:	2203      	movs	r2, #3
 800602a:	2182      	movs	r1, #130	; 0x82
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fec6 	bl	8007dbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006038:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800603c:	f001 ffe6 	bl	800800c <USBD_static_malloc>
 8006040:	4602      	mov	r2, r0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
 8006056:	e026      	b.n	80060a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2200      	movs	r2, #0
 800606e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	7c1b      	ldrb	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800608c:	2101      	movs	r1, #1
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 ff86 	bl	8007fa0 <USBD_LL_PrepareReceive>
 8006094:	e007      	b.n	80060a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	2101      	movs	r1, #1
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 ff7d 	bl	8007fa0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060c0:	2181      	movs	r1, #129	; 0x81
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fea1 	bl	8007e0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060ce:	2101      	movs	r1, #1
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 fe9a 	bl	8007e0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060de:	2182      	movs	r1, #130	; 0x82
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fe92 	bl	8007e0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006106:	4618      	mov	r0, r3
 8006108:	f001 ff8c 	bl	8008024 <USBD_static_free>
    pdev->pClassData = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006144:	2b00      	cmp	r3, #0
 8006146:	d039      	beq.n	80061bc <USBD_CDC_Setup+0x9e>
 8006148:	2b20      	cmp	r3, #32
 800614a:	d17c      	bne.n	8006246 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	88db      	ldrh	r3, [r3, #6]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d029      	beq.n	80061a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b25b      	sxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	da11      	bge.n	8006182 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800616a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	88d2      	ldrh	r2, [r2, #6]
 8006170:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006172:	6939      	ldr	r1, [r7, #16]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	88db      	ldrh	r3, [r3, #6]
 8006178:	461a      	mov	r2, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 f9fa 	bl	8007574 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006180:	e068      	b.n	8006254 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	785a      	ldrb	r2, [r3, #1]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	88db      	ldrh	r3, [r3, #6]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006198:	6939      	ldr	r1, [r7, #16]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	88db      	ldrh	r3, [r3, #6]
 800619e:	461a      	mov	r2, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 fa15 	bl	80075d0 <USBD_CtlPrepareRx>
      break;
 80061a6:	e055      	b.n	8006254 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	7850      	ldrb	r0, [r2, #1]
 80061b4:	2200      	movs	r2, #0
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	4798      	blx	r3
      break;
 80061ba:	e04b      	b.n	8006254 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b0a      	cmp	r3, #10
 80061c2:	d017      	beq.n	80061f4 <USBD_CDC_Setup+0xd6>
 80061c4:	2b0b      	cmp	r3, #11
 80061c6:	d029      	beq.n	800621c <USBD_CDC_Setup+0xfe>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d133      	bne.n	8006234 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d107      	bne.n	80061e6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	2202      	movs	r2, #2
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f9c8 	bl	8007574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061e4:	e02e      	b.n	8006244 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f959 	bl	80074a0 <USBD_CtlError>
            ret = USBD_FAIL;
 80061ee:	2302      	movs	r3, #2
 80061f0:	75fb      	strb	r3, [r7, #23]
          break;
 80061f2:	e027      	b.n	8006244 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d107      	bne.n	800620e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80061fe:	f107 030f 	add.w	r3, r7, #15
 8006202:	2201      	movs	r2, #1
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 f9b4 	bl	8007574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800620c:	e01a      	b.n	8006244 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f945 	bl	80074a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006216:	2302      	movs	r3, #2
 8006218:	75fb      	strb	r3, [r7, #23]
          break;
 800621a:	e013      	b.n	8006244 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006222:	2b03      	cmp	r3, #3
 8006224:	d00d      	beq.n	8006242 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 f939 	bl	80074a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800622e:	2302      	movs	r3, #2
 8006230:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006232:	e006      	b.n	8006242 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 f932 	bl	80074a0 <USBD_CtlError>
          ret = USBD_FAIL;
 800623c:	2302      	movs	r3, #2
 800623e:	75fb      	strb	r3, [r7, #23]
          break;
 8006240:	e000      	b.n	8006244 <USBD_CDC_Setup+0x126>
          break;
 8006242:	bf00      	nop
      }
      break;
 8006244:	e006      	b.n	8006254 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 f929 	bl	80074a0 <USBD_CtlError>
      ret = USBD_FAIL;
 800624e:	2302      	movs	r3, #2
 8006250:	75fb      	strb	r3, [r7, #23]
      break;
 8006252:	bf00      	nop
  }

  return ret;
 8006254:	7dfb      	ldrb	r3, [r7, #23]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006278:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d03a      	beq.n	80062fa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	331c      	adds	r3, #28
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d029      	beq.n	80062ee <USBD_CDC_DataIn+0x90>
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	331c      	adds	r3, #28
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	78f9      	ldrb	r1, [r7, #3]
 80062ae:	68b8      	ldr	r0, [r7, #8]
 80062b0:	460b      	mov	r3, r1
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4403      	add	r3, r0
 80062ba:	3338      	adds	r3, #56	; 0x38
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	fbb2 f1f3 	udiv	r1, r2, r3
 80062c2:	fb03 f301 	mul.w	r3, r3, r1
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d110      	bne.n	80062ee <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80062cc:	78fa      	ldrb	r2, [r7, #3]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	331c      	adds	r3, #28
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062e0:	78f9      	ldrb	r1, [r7, #3]
 80062e2:	2300      	movs	r3, #0
 80062e4:	2200      	movs	r2, #0
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fe37 	bl	8007f5a <USBD_LL_Transmit>
 80062ec:	e003      	b.n	80062f6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e000      	b.n	80062fc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80062fa:	2302      	movs	r3, #2
  }
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fe62 	bl	8007fe6 <USBD_LL_GetRxDataSize>
 8006322:	4602      	mov	r2, r0
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006348:	4611      	mov	r1, r2
 800634a:	4798      	blx	r3

    return USBD_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006368:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006370:	2b00      	cmp	r3, #0
 8006372:	d015      	beq.n	80063a0 <USBD_CDC_EP0_RxReady+0x46>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800637a:	2bff      	cmp	r3, #255	; 0xff
 800637c:	d010      	beq.n	80063a0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800638c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006394:	b292      	uxth	r2, r2
 8006396:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	22ff      	movs	r2, #255	; 0xff
 800639c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2243      	movs	r2, #67	; 0x43
 80063b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80063ba:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	200000a0 	.word	0x200000a0

080063cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2243      	movs	r2, #67	; 0x43
 80063d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80063da:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	2000005c 	.word	0x2000005c

080063ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2243      	movs	r2, #67	; 0x43
 80063f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80063fa:	4b03      	ldr	r3, [pc, #12]	; (8006408 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	200000e4 	.word	0x200000e4

0800640c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	220a      	movs	r2, #10
 8006418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800641a:	4b03      	ldr	r3, [pc, #12]	; (8006428 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000018 	.word	0x20000018

0800642c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006436:	2302      	movs	r3, #2
 8006438:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr

0800648a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01c      	beq.n	8006504 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d115      	bne.n	8006500 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2181      	movs	r1, #129	; 0x81
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 fd2f 	bl	8007f5a <USBD_LL_Transmit>

      return USBD_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e002      	b.n	8006506 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006504:	2302      	movs	r3, #2
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d017      	beq.n	8006558 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	7c1b      	ldrb	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800653a:	2101      	movs	r1, #1
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fd2f 	bl	8007fa0 <USBD_LL_PrepareReceive>
 8006542:	e007      	b.n	8006554 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800654a:	2340      	movs	r3, #64	; 0x40
 800654c:	2101      	movs	r1, #1
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fd26 	bl	8007fa0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	4613      	mov	r3, r2
 800656e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006576:	2302      	movs	r3, #2
 8006578:	e01a      	b.n	80065b0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	79fa      	ldrb	r2, [r7, #7]
 80065a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f001 fb93 	bl	8007cd4 <USBD_LL_Init>

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	e001      	b.n	80065de <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80065da:	2302      	movs	r3, #2
 80065dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr

080065ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 fbc8 	bl	8007d88 <USBD_LL_Start>

  return USBD_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006622:	2302      	movs	r3, #2
 8006624:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00c      	beq.n	800664a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	4611      	mov	r1, r2
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800664a:	7bfb      	ldrb	r3, [r7, #15]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	4611      	mov	r1, r2
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fecb 	bl	8007428 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d00c      	beq.n	80066d0 <USBD_LL_SetupStage+0x56>
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d302      	bcc.n	80066c0 <USBD_LL_SetupStage+0x46>
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d010      	beq.n	80066e0 <USBD_LL_SetupStage+0x66>
 80066be:	e017      	b.n	80066f0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f9cb 	bl	8006a64 <USBD_StdDevReq>
      break;
 80066ce:	e01a      	b.n	8006706 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa2d 	bl	8006b38 <USBD_StdItfReq>
      break;
 80066de:	e012      	b.n	8006706 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fa6b 	bl	8006bc4 <USBD_StdEPReq>
      break;
 80066ee:	e00a      	b.n	8006706 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fba2 	bl	8007e48 <USBD_LL_StallEP>
      break;
 8006704:	bf00      	nop
  }

  return USBD_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	460b      	mov	r3, r1
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800671e:	7afb      	ldrb	r3, [r7, #11]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d14b      	bne.n	80067bc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800672a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006732:	2b03      	cmp	r3, #3
 8006734:	d134      	bne.n	80067a0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	429a      	cmp	r2, r3
 8006740:	d919      	bls.n	8006776 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006758:	429a      	cmp	r2, r3
 800675a:	d203      	bcs.n	8006764 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006760:	b29b      	uxth	r3, r3
 8006762:	e002      	b.n	800676a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006768:	b29b      	uxth	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 ff4c 	bl	800760c <USBD_CtlContinueRx>
 8006774:	e038      	b.n	80067e8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006788:	2b03      	cmp	r3, #3
 800678a:	d105      	bne.n	8006798 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 ff49 	bl	8007630 <USBD_CtlSendStatus>
 800679e:	e023      	b.n	80067e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067a6:	2b05      	cmp	r3, #5
 80067a8:	d11e      	bne.n	80067e8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80067b2:	2100      	movs	r1, #0
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f001 fb47 	bl	8007e48 <USBD_LL_StallEP>
 80067ba:	e015      	b.n	80067e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d108      	bne.n	80067e4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	7afa      	ldrb	r2, [r7, #11]
 80067dc:	4611      	mov	r1, r2
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	4798      	blx	r3
 80067e2:	e001      	b.n	80067e8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067e4:	2302      	movs	r3, #2
 80067e6:	e000      	b.n	80067ea <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	460b      	mov	r3, r1
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d17f      	bne.n	8006906 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3314      	adds	r3, #20
 800680a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006812:	2b02      	cmp	r3, #2
 8006814:	d15c      	bne.n	80068d0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	d915      	bls.n	800684e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 feb6 	bl	80075ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006840:	2300      	movs	r3, #0
 8006842:	2200      	movs	r2, #0
 8006844:	2100      	movs	r1, #0
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f001 fbaa 	bl	8007fa0 <USBD_LL_PrepareReceive>
 800684c:	e04e      	b.n	80068ec <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	6912      	ldr	r2, [r2, #16]
 8006856:	fbb3 f1f2 	udiv	r1, r3, r2
 800685a:	fb02 f201 	mul.w	r2, r2, r1
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11c      	bne.n	800689e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800686c:	429a      	cmp	r2, r3
 800686e:	d316      	bcc.n	800689e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800687a:	429a      	cmp	r2, r3
 800687c:	d20f      	bcs.n	800689e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800687e:	2200      	movs	r2, #0
 8006880:	2100      	movs	r1, #0
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fe92 	bl	80075ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f001 fb82 	bl	8007fa0 <USBD_LL_PrepareReceive>
 800689c:	e026      	b.n	80068ec <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d105      	bne.n	80068c0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80068c0:	2180      	movs	r1, #128	; 0x80
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f001 fac0 	bl	8007e48 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fec4 	bl	8007656 <USBD_CtlReceiveStatus>
 80068ce:	e00d      	b.n	80068ec <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d004      	beq.n	80068e4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 faae 	bl	8007e48 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d11d      	bne.n	8006932 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff fe83 	bl	8006602 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006904:	e015      	b.n	8006932 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006918:	2b03      	cmp	r3, #3
 800691a:	d108      	bne.n	800692e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	7afa      	ldrb	r2, [r7, #11]
 8006926:	4611      	mov	r1, r2
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	4798      	blx	r3
 800692c:	e001      	b.n	8006932 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800692e:	2302      	movs	r3, #2
 8006930:	e000      	b.n	8006934 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006944:	2340      	movs	r3, #64	; 0x40
 8006946:	2200      	movs	r2, #0
 8006948:	2100      	movs	r1, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fa37 	bl	8007dbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	2200      	movs	r2, #0
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fa29 	bl	8007dbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2240      	movs	r2, #64	; 0x40
 8006976:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6852      	ldr	r2, [r2, #4]
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	4611      	mov	r1, r2
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
  }

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2204      	movs	r2, #4
 80069f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d105      	bne.n	8006a22 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr

08006a2e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d10b      	bne.n	8006a58 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d004      	beq.n	8006a88 <USBD_StdDevReq+0x24>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d002      	beq.n	8006a88 <USBD_StdDevReq+0x24>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <USBD_StdDevReq+0x34>
 8006a86:	e04c      	b.n	8006b22 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
      break;
 8006a96:	e049      	b.n	8006b2c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	d83a      	bhi.n	8006b16 <USBD_StdDevReq+0xb2>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <USBD_StdDevReq+0x44>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006af9 	.word	0x08006af9
 8006aac:	08006b0d 	.word	0x08006b0d
 8006ab0:	08006b17 	.word	0x08006b17
 8006ab4:	08006b03 	.word	0x08006b03
 8006ab8:	08006b17 	.word	0x08006b17
 8006abc:	08006adb 	.word	0x08006adb
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006b17 	.word	0x08006b17
 8006ac8:	08006aef 	.word	0x08006aef
 8006acc:	08006ae5 	.word	0x08006ae5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f9d4 	bl	8006e80 <USBD_GetDescriptor>
          break;
 8006ad8:	e022      	b.n	8006b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fb37 	bl	8007150 <USBD_SetAddress>
          break;
 8006ae2:	e01d      	b.n	8006b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb74 	bl	80071d4 <USBD_SetConfig>
          break;
 8006aec:	e018      	b.n	8006b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fbfd 	bl	80072f0 <USBD_GetConfig>
          break;
 8006af6:	e013      	b.n	8006b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fc2c 	bl	8007358 <USBD_GetStatus>
          break;
 8006b00:	e00e      	b.n	8006b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc5a 	bl	80073be <USBD_SetFeature>
          break;
 8006b0a:	e009      	b.n	8006b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fc69 	bl	80073e6 <USBD_ClrFeature>
          break;
 8006b14:	e004      	b.n	8006b20 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fcc1 	bl	80074a0 <USBD_CtlError>
          break;
 8006b1e:	bf00      	nop
      }
      break;
 8006b20:	e004      	b.n	8006b2c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fcbb 	bl	80074a0 <USBD_CtlError>
      break;
 8006b2a:	bf00      	nop
  }

  return ret;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop

08006b38 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d003      	beq.n	8006b5a <USBD_StdItfReq+0x22>
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d001      	beq.n	8006b5a <USBD_StdItfReq+0x22>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d12a      	bne.n	8006bb0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	3b01      	subs	r3, #1
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d81d      	bhi.n	8006ba2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	889b      	ldrh	r3, [r3, #4]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d813      	bhi.n	8006b98 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	88db      	ldrh	r3, [r3, #6]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d110      	bne.n	8006bac <USBD_StdItfReq+0x74>
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10d      	bne.n	8006bac <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fd4d 	bl	8007630 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b96:	e009      	b.n	8006bac <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fc80 	bl	80074a0 <USBD_CtlError>
          break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc7b 	bl	80074a0 <USBD_CtlError>
          break;
 8006baa:	e000      	b.n	8006bae <USBD_StdItfReq+0x76>
          break;
 8006bac:	bf00      	nop
      }
      break;
 8006bae:	e004      	b.n	8006bba <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fc74 	bl	80074a0 <USBD_CtlError>
      break;
 8006bb8:	bf00      	nop
  }

  return USBD_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	889b      	ldrh	r3, [r3, #4]
 8006bd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d004      	beq.n	8006bee <USBD_StdEPReq+0x2a>
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d002      	beq.n	8006bee <USBD_StdEPReq+0x2a>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d008      	beq.n	8006bfe <USBD_StdEPReq+0x3a>
 8006bec:	e13d      	b.n	8006e6a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
      break;
 8006bfc:	e13a      	b.n	8006e74 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d10a      	bne.n	8006c20 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	e12a      	b.n	8006e76 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d03e      	beq.n	8006ca6 <USBD_StdEPReq+0xe2>
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d002      	beq.n	8006c32 <USBD_StdEPReq+0x6e>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d070      	beq.n	8006d12 <USBD_StdEPReq+0x14e>
 8006c30:	e115      	b.n	8006e5e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d002      	beq.n	8006c42 <USBD_StdEPReq+0x7e>
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d015      	beq.n	8006c6c <USBD_StdEPReq+0xa8>
 8006c40:	e02b      	b.n	8006c9a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00c      	beq.n	8006c62 <USBD_StdEPReq+0x9e>
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b80      	cmp	r3, #128	; 0x80
 8006c4c:	d009      	beq.n	8006c62 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 f8f8 	bl	8007e48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c58:	2180      	movs	r1, #128	; 0x80
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f8f4 	bl	8007e48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c60:	e020      	b.n	8006ca4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fc1b 	bl	80074a0 <USBD_CtlError>
              break;
 8006c6a:	e01b      	b.n	8006ca4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	885b      	ldrh	r3, [r3, #2]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10e      	bne.n	8006c92 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00b      	beq.n	8006c92 <USBD_StdEPReq+0xce>
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b80      	cmp	r3, #128	; 0x80
 8006c7e:	d008      	beq.n	8006c92 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	88db      	ldrh	r3, [r3, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f8db 	bl	8007e48 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fccc 	bl	8007630 <USBD_CtlSendStatus>

              break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fbff 	bl	80074a0 <USBD_CtlError>
              break;
 8006ca2:	bf00      	nop
          }
          break;
 8006ca4:	e0e0      	b.n	8006e68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d002      	beq.n	8006cb6 <USBD_StdEPReq+0xf2>
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d015      	beq.n	8006ce0 <USBD_StdEPReq+0x11c>
 8006cb4:	e026      	b.n	8006d04 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00c      	beq.n	8006cd6 <USBD_StdEPReq+0x112>
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b80      	cmp	r3, #128	; 0x80
 8006cc0:	d009      	beq.n	8006cd6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 f8be 	bl	8007e48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 f8ba 	bl	8007e48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cd4:	e01c      	b.n	8006d10 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fbe1 	bl	80074a0 <USBD_CtlError>
              break;
 8006cde:	e017      	b.n	8006d10 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	885b      	ldrh	r3, [r3, #2]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d112      	bne.n	8006d0e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 f8c5 	bl	8007e86 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fc97 	bl	8007630 <USBD_CtlSendStatus>
              }
              break;
 8006d02:	e004      	b.n	8006d0e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fbca 	bl	80074a0 <USBD_CtlError>
              break;
 8006d0c:	e000      	b.n	8006d10 <USBD_StdEPReq+0x14c>
              break;
 8006d0e:	bf00      	nop
          }
          break;
 8006d10:	e0aa      	b.n	8006e68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d002      	beq.n	8006d22 <USBD_StdEPReq+0x15e>
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d032      	beq.n	8006d86 <USBD_StdEPReq+0x1c2>
 8006d20:	e097      	b.n	8006e52 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <USBD_StdEPReq+0x174>
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d004      	beq.n	8006d38 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fbb5 	bl	80074a0 <USBD_CtlError>
                break;
 8006d36:	e091      	b.n	8006e5c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	da0b      	bge.n	8006d58 <USBD_StdEPReq+0x194>
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	3310      	adds	r3, #16
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4413      	add	r3, r2
 8006d54:	3304      	adds	r3, #4
 8006d56:	e00b      	b.n	8006d70 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3304      	adds	r3, #4
 8006d70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fbf8 	bl	8007574 <USBD_CtlSendData>
              break;
 8006d84:	e06a      	b.n	8006e5c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da11      	bge.n	8006db2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3318      	adds	r3, #24
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d117      	bne.n	8006dd8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fb78 	bl	80074a0 <USBD_CtlError>
                  break;
 8006db0:	e054      	b.n	8006e5c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	f003 020f 	and.w	r2, r3, #15
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fb65 	bl	80074a0 <USBD_CtlError>
                  break;
 8006dd6:	e041      	b.n	8006e5c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da0b      	bge.n	8006df8 <USBD_StdEPReq+0x234>
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	3310      	adds	r3, #16
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	e00b      	b.n	8006e10 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3304      	adds	r3, #4
 8006e10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <USBD_StdEPReq+0x25a>
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	2b80      	cmp	r3, #128	; 0x80
 8006e1c:	d103      	bne.n	8006e26 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	e00e      	b.n	8006e44 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 f84a 	bl	8007ec4 <USBD_LL_IsStallEP>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e002      	b.n	8006e44 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2202      	movs	r2, #2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fb92 	bl	8007574 <USBD_CtlSendData>
              break;
 8006e50:	e004      	b.n	8006e5c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fb23 	bl	80074a0 <USBD_CtlError>
              break;
 8006e5a:	bf00      	nop
          }
          break;
 8006e5c:	e004      	b.n	8006e68 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fb1d 	bl	80074a0 <USBD_CtlError>
          break;
 8006e66:	bf00      	nop
      }
      break;
 8006e68:	e004      	b.n	8006e74 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fb17 	bl	80074a0 <USBD_CtlError>
      break;
 8006e72:	bf00      	nop
  }

  return ret;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	0a1b      	lsrs	r3, r3, #8
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	2b06      	cmp	r3, #6
 8006ea2:	f200 8128 	bhi.w	80070f6 <USBD_GetDescriptor+0x276>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_GetDescriptor+0x2c>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	08006ee1 	.word	0x08006ee1
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	080070f7 	.word	0x080070f7
 8006ebc:	080070f7 	.word	0x080070f7
 8006ec0:	08007097 	.word	0x08007097
 8006ec4:	080070c3 	.word	0x080070c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
      break;
 8006ede:	e112      	b.n	8007106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7c1b      	ldrb	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	f107 0208 	add.w	r2, r7, #8
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	2202      	movs	r2, #2
 8006f00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f02:	e100      	b.n	8007106 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	f107 0208 	add.w	r2, r7, #8
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
 8006f14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	701a      	strb	r2, [r3, #0]
      break;
 8006f1e:	e0f2      	b.n	8007106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	885b      	ldrh	r3, [r3, #2]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	f200 80ac 	bhi.w	8007084 <USBD_GetDescriptor+0x204>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <USBD_GetDescriptor+0xb4>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f4d 	.word	0x08006f4d
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006fb5 	.word	0x08006fb5
 8006f40:	08006fe9 	.word	0x08006fe9
 8006f44:	0800701d 	.word	0x0800701d
 8006f48:	08007051 	.word	0x08007051
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7c12      	ldrb	r2, [r2, #16]
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
 8006f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6e:	e091      	b.n	8007094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa94 	bl	80074a0 <USBD_CtlError>
            err++;
 8006f78:	7afb      	ldrb	r3, [r7, #11]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7e:	e089      	b.n	8007094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7c12      	ldrb	r2, [r2, #16]
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fa2:	e077      	b.n	8007094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa7a 	bl	80074a0 <USBD_CtlError>
            err++;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fb2:	e06f      	b.n	8007094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7c12      	ldrb	r2, [r2, #16]
 8006fcc:	f107 0108 	add.w	r1, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd6:	e05d      	b.n	8007094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa60 	bl	80074a0 <USBD_CtlError>
            err++;
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe6:	e055      	b.n	8007094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700a:	e043      	b.n	8007094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa46 	bl	80074a0 <USBD_CtlError>
            err++;
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	3301      	adds	r3, #1
 8007018:	72fb      	strb	r3, [r7, #11]
          break;
 800701a:	e03b      	b.n	8007094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7c12      	ldrb	r2, [r2, #16]
 8007034:	f107 0108 	add.w	r1, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800703e:	e029      	b.n	8007094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa2c 	bl	80074a0 <USBD_CtlError>
            err++;
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	3301      	adds	r3, #1
 800704c:	72fb      	strb	r3, [r7, #11]
          break;
 800704e:	e021      	b.n	8007094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7c12      	ldrb	r2, [r2, #16]
 8007068:	f107 0108 	add.w	r1, r7, #8
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007072:	e00f      	b.n	8007094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa12 	bl	80074a0 <USBD_CtlError>
            err++;
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	3301      	adds	r3, #1
 8007080:	72fb      	strb	r3, [r7, #11]
          break;
 8007082:	e007      	b.n	8007094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa0a 	bl	80074a0 <USBD_CtlError>
          err++;
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	3301      	adds	r3, #1
 8007090:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007092:	e038      	b.n	8007106 <USBD_GetDescriptor+0x286>
 8007094:	e037      	b.n	8007106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7c1b      	ldrb	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a6:	f107 0208 	add.w	r2, r7, #8
 80070aa:	4610      	mov	r0, r2
 80070ac:	4798      	blx	r3
 80070ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070b0:	e029      	b.n	8007106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f9f3 	bl	80074a0 <USBD_CtlError>
        err++;
 80070ba:	7afb      	ldrb	r3, [r7, #11]
 80070bc:	3301      	adds	r3, #1
 80070be:	72fb      	strb	r3, [r7, #11]
      break;
 80070c0:	e021      	b.n	8007106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7c1b      	ldrb	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10d      	bne.n	80070e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	f107 0208 	add.w	r2, r7, #8
 80070d6:	4610      	mov	r0, r2
 80070d8:	4798      	blx	r3
 80070da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	2207      	movs	r2, #7
 80070e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070e4:	e00f      	b.n	8007106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9d9 	bl	80074a0 <USBD_CtlError>
        err++;
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	3301      	adds	r3, #1
 80070f2:	72fb      	strb	r3, [r7, #11]
      break;
 80070f4:	e007      	b.n	8007106 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f9d1 	bl	80074a0 <USBD_CtlError>
      err++;
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	3301      	adds	r3, #1
 8007102:	72fb      	strb	r3, [r7, #11]
      break;
 8007104:	bf00      	nop
  }

  if (err != 0U)
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d11c      	bne.n	8007146 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800710c:	893b      	ldrh	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d011      	beq.n	8007136 <USBD_GetDescriptor+0x2b6>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	88db      	ldrh	r3, [r3, #6]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	88da      	ldrh	r2, [r3, #6]
 800711e:	893b      	ldrh	r3, [r7, #8]
 8007120:	4293      	cmp	r3, r2
 8007122:	bf28      	it	cs
 8007124:	4613      	movcs	r3, r2
 8007126:	b29b      	uxth	r3, r3
 8007128:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800712a:	893b      	ldrh	r3, [r7, #8]
 800712c:	461a      	mov	r2, r3
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa1f 	bl	8007574 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	88db      	ldrh	r3, [r3, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa76 	bl	8007630 <USBD_CtlSendStatus>
 8007144:	e000      	b.n	8007148 <USBD_GetDescriptor+0x2c8>
    return;
 8007146:	bf00      	nop
    }
  }
}
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	889b      	ldrh	r3, [r3, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d130      	bne.n	80071c4 <USBD_SetAddress+0x74>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	88db      	ldrh	r3, [r3, #6]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d12c      	bne.n	80071c4 <USBD_SetAddress+0x74>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	885b      	ldrh	r3, [r3, #2]
 800716e:	2b7f      	cmp	r3, #127	; 0x7f
 8007170:	d828      	bhi.n	80071c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	885b      	ldrh	r3, [r3, #2]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007184:	2b03      	cmp	r3, #3
 8007186:	d104      	bne.n	8007192 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f988 	bl	80074a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007190:	e01c      	b.n	80071cc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	7bfa      	ldrb	r2, [r7, #15]
 8007196:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 febc 	bl	8007f1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fa43 	bl	8007630 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	e008      	b.n	80071cc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c2:	e003      	b.n	80071cc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f96a 	bl	80074a0 <USBD_CtlError>
  }
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	4b41      	ldr	r3, [pc, #260]	; (80072ec <USBD_SetConfig+0x118>)
 80071e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071e8:	4b40      	ldr	r3, [pc, #256]	; (80072ec <USBD_SetConfig+0x118>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d904      	bls.n	80071fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f954 	bl	80074a0 <USBD_CtlError>
 80071f8:	e075      	b.n	80072e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007200:	2b02      	cmp	r3, #2
 8007202:	d002      	beq.n	800720a <USBD_SetConfig+0x36>
 8007204:	2b03      	cmp	r3, #3
 8007206:	d023      	beq.n	8007250 <USBD_SetConfig+0x7c>
 8007208:	e062      	b.n	80072d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800720a:	4b38      	ldr	r3, [pc, #224]	; (80072ec <USBD_SetConfig+0x118>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01a      	beq.n	8007248 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007212:	4b36      	ldr	r3, [pc, #216]	; (80072ec <USBD_SetConfig+0x118>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007224:	4b31      	ldr	r3, [pc, #196]	; (80072ec <USBD_SetConfig+0x118>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff f9f3 	bl	8006616 <USBD_SetClassConfig>
 8007230:	4603      	mov	r3, r0
 8007232:	2b02      	cmp	r3, #2
 8007234:	d104      	bne.n	8007240 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f931 	bl	80074a0 <USBD_CtlError>
            return;
 800723e:	e052      	b.n	80072e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f9f5 	bl	8007630 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007246:	e04e      	b.n	80072e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f9f1 	bl	8007630 <USBD_CtlSendStatus>
        break;
 800724e:	e04a      	b.n	80072e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007250:	4b26      	ldr	r3, [pc, #152]	; (80072ec <USBD_SetConfig+0x118>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d112      	bne.n	800727e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007260:	4b22      	ldr	r3, [pc, #136]	; (80072ec <USBD_SetConfig+0x118>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800726a:	4b20      	ldr	r3, [pc, #128]	; (80072ec <USBD_SetConfig+0x118>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f9ef 	bl	8006654 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9da 	bl	8007630 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800727c:	e033      	b.n	80072e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800727e:	4b1b      	ldr	r3, [pc, #108]	; (80072ec <USBD_SetConfig+0x118>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	d01d      	beq.n	80072c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff f9dd 	bl	8006654 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <USBD_SetConfig+0x118>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072a4:	4b11      	ldr	r3, [pc, #68]	; (80072ec <USBD_SetConfig+0x118>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff f9b3 	bl	8006616 <USBD_SetClassConfig>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d104      	bne.n	80072c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8f1 	bl	80074a0 <USBD_CtlError>
            return;
 80072be:	e012      	b.n	80072e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f9b5 	bl	8007630 <USBD_CtlSendStatus>
        break;
 80072c6:	e00e      	b.n	80072e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f9b1 	bl	8007630 <USBD_CtlSendStatus>
        break;
 80072ce:	e00a      	b.n	80072e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f8e4 	bl	80074a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <USBD_SetConfig+0x118>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff f9b8 	bl	8006654 <USBD_ClrClassConfig>
        break;
 80072e4:	bf00      	nop
    }
  }
}
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	2000055c 	.word	0x2000055c

080072f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	88db      	ldrh	r3, [r3, #6]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d004      	beq.n	800730c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f8cb 	bl	80074a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800730a:	e021      	b.n	8007350 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007312:	2b01      	cmp	r3, #1
 8007314:	db17      	blt.n	8007346 <USBD_GetConfig+0x56>
 8007316:	2b02      	cmp	r3, #2
 8007318:	dd02      	ble.n	8007320 <USBD_GetConfig+0x30>
 800731a:	2b03      	cmp	r3, #3
 800731c:	d00b      	beq.n	8007336 <USBD_GetConfig+0x46>
 800731e:	e012      	b.n	8007346 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3308      	adds	r3, #8
 800732a:	2201      	movs	r2, #1
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f920 	bl	8007574 <USBD_CtlSendData>
        break;
 8007334:	e00c      	b.n	8007350 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3304      	adds	r3, #4
 800733a:	2201      	movs	r2, #1
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f918 	bl	8007574 <USBD_CtlSendData>
        break;
 8007344:	e004      	b.n	8007350 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f8a9 	bl	80074a0 <USBD_CtlError>
        break;
 800734e:	bf00      	nop
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	3b01      	subs	r3, #1
 800736a:	2b02      	cmp	r3, #2
 800736c:	d81e      	bhi.n	80073ac <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	88db      	ldrh	r3, [r3, #6]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d004      	beq.n	8007380 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f891 	bl	80074a0 <USBD_CtlError>
        break;
 800737e:	e01a      	b.n	80073b6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f043 0202 	orr.w	r2, r3, #2
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	330c      	adds	r3, #12
 80073a0:	2202      	movs	r2, #2
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8e5 	bl	8007574 <USBD_CtlSendData>
      break;
 80073aa:	e004      	b.n	80073b6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f876 	bl	80074a0 <USBD_CtlError>
      break;
 80073b4:	bf00      	nop
  }
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	885b      	ldrh	r3, [r3, #2]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d106      	bne.n	80073de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f929 	bl	8007630 <USBD_CtlSendStatus>
  }
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f6:	3b01      	subs	r3, #1
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d80b      	bhi.n	8007414 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	885b      	ldrh	r3, [r3, #2]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d10c      	bne.n	800741e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f90f 	bl	8007630 <USBD_CtlSendStatus>
      }
      break;
 8007412:	e004      	b.n	800741e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f842 	bl	80074a0 <USBD_CtlError>
      break;
 800741c:	e000      	b.n	8007420 <USBD_ClrFeature+0x3a>
      break;
 800741e:	bf00      	nop
  }
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	785a      	ldrb	r2, [r3, #1]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	3302      	adds	r3, #2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b29a      	uxth	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	3303      	adds	r3, #3
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	b29b      	uxth	r3, r3
 8007456:	4413      	add	r3, r2
 8007458:	b29a      	uxth	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	3304      	adds	r3, #4
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b29a      	uxth	r2, r3
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	3305      	adds	r3, #5
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	b29b      	uxth	r3, r3
 8007472:	4413      	add	r3, r2
 8007474:	b29a      	uxth	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	3306      	adds	r3, #6
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b29a      	uxth	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	3307      	adds	r3, #7
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	b29b      	uxth	r3, r3
 800748e:	4413      	add	r3, r2
 8007490:	b29a      	uxth	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	80da      	strh	r2, [r3, #6]

}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fccb 	bl	8007e48 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80074b2:	2100      	movs	r1, #0
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fcc7 	bl	8007e48 <USBD_LL_StallEP>
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b086      	sub	sp, #24
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d032      	beq.n	800753e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f834 	bl	8007546 <USBD_GetLen>
 80074de:	4603      	mov	r3, r0
 80074e0:	3301      	adds	r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	75fa      	strb	r2, [r7, #23]
 80074f2:	461a      	mov	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	75fa      	strb	r2, [r7, #23]
 8007504:	461a      	mov	r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4413      	add	r3, r2
 800750a:	2203      	movs	r2, #3
 800750c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800750e:	e012      	b.n	8007536 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	60fa      	str	r2, [r7, #12]
 8007516:	7dfa      	ldrb	r2, [r7, #23]
 8007518:	1c51      	adds	r1, r2, #1
 800751a:	75f9      	strb	r1, [r7, #23]
 800751c:	4611      	mov	r1, r2
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	440a      	add	r2, r1
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	75fa      	strb	r2, [r7, #23]
 800752c:	461a      	mov	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	2200      	movs	r2, #0
 8007534:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e8      	bne.n	8007510 <USBD_GetString+0x4e>
    }
  }
}
 800753e:	bf00      	nop
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007552:	e005      	b.n	8007560 <USBD_GetLen+0x1a>
  {
    len++;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	3301      	adds	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
    buf++;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3301      	adds	r3, #1
 800755e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1f5      	bne.n	8007554 <USBD_GetLen+0xe>
  }

  return len;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr

08007574 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2202      	movs	r2, #2
 8007586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	2100      	movs	r1, #0
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fcdc 	bl	8007f5a <USBD_LL_Transmit>

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	2100      	movs	r1, #0
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 fcca 	bl	8007f5a <USBD_LL_Transmit>

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2203      	movs	r2, #3
 80075e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80075ee:	88fa      	ldrh	r2, [r7, #6]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	2100      	movs	r1, #0
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 fccf 	bl	8007fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800761a:	88fb      	ldrh	r3, [r7, #6]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	2100      	movs	r1, #0
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fcbd 	bl	8007fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2204      	movs	r2, #4
 800763c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007640:	2300      	movs	r3, #0
 8007642:	2200      	movs	r2, #0
 8007644:	2100      	movs	r1, #0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fc87 	bl	8007f5a <USBD_LL_Transmit>

  return USBD_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2205      	movs	r2, #5
 8007662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007666:	2300      	movs	r3, #0
 8007668:	2200      	movs	r2, #0
 800766a:	2100      	movs	r1, #0
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc97 	bl	8007fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007680:	2200      	movs	r2, #0
 8007682:	4912      	ldr	r1, [pc, #72]	; (80076cc <MX_USB_DEVICE_Init+0x50>)
 8007684:	4812      	ldr	r0, [pc, #72]	; (80076d0 <MX_USB_DEVICE_Init+0x54>)
 8007686:	f7fe ff6c 	bl	8006562 <USBD_Init>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007690:	f7f8 ff26 	bl	80004e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007694:	490f      	ldr	r1, [pc, #60]	; (80076d4 <MX_USB_DEVICE_Init+0x58>)
 8007696:	480e      	ldr	r0, [pc, #56]	; (80076d0 <MX_USB_DEVICE_Init+0x54>)
 8007698:	f7fe ff8e 	bl	80065b8 <USBD_RegisterClass>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076a2:	f7f8 ff1d 	bl	80004e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076a6:	490c      	ldr	r1, [pc, #48]	; (80076d8 <MX_USB_DEVICE_Init+0x5c>)
 80076a8:	4809      	ldr	r0, [pc, #36]	; (80076d0 <MX_USB_DEVICE_Init+0x54>)
 80076aa:	f7fe febf 	bl	800642c <USBD_CDC_RegisterInterface>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076b4:	f7f8 ff14 	bl	80004e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076b8:	4805      	ldr	r0, [pc, #20]	; (80076d0 <MX_USB_DEVICE_Init+0x54>)
 80076ba:	f7fe ff96 	bl	80065ea <USBD_Start>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076c4:	f7f8 ff0c 	bl	80004e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076c8:	bf00      	nop
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20000138 	.word	0x20000138
 80076d0:	2000078c 	.word	0x2000078c
 80076d4:	20000024 	.word	0x20000024
 80076d8:	20000128 	.word	0x20000128

080076dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076e0:	2200      	movs	r2, #0
 80076e2:	4905      	ldr	r1, [pc, #20]	; (80076f8 <CDC_Init_FS+0x1c>)
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <CDC_Init_FS+0x20>)
 80076e6:	f7fe feb7 	bl	8006458 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076ea:	4905      	ldr	r1, [pc, #20]	; (8007700 <CDC_Init_FS+0x24>)
 80076ec:	4803      	ldr	r0, [pc, #12]	; (80076fc <CDC_Init_FS+0x20>)
 80076ee:	f7fe fecc 	bl	800648a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000b50 	.word	0x20000b50
 80076fc:	2000078c 	.word	0x2000078c
 8007700:	20000a50 	.word	0x20000a50

08007704 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007708:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800770a:	4618      	mov	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr
	...

08007714 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	71fb      	strb	r3, [r7, #7]
 8007720:	4613      	mov	r3, r2
 8007722:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b23      	cmp	r3, #35	; 0x23
 8007728:	d84a      	bhi.n	80077c0 <CDC_Control_FS+0xac>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <CDC_Control_FS+0x1c>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	080077c1 	.word	0x080077c1
 8007734:	080077c1 	.word	0x080077c1
 8007738:	080077c1 	.word	0x080077c1
 800773c:	080077c1 	.word	0x080077c1
 8007740:	080077c1 	.word	0x080077c1
 8007744:	080077c1 	.word	0x080077c1
 8007748:	080077c1 	.word	0x080077c1
 800774c:	080077c1 	.word	0x080077c1
 8007750:	080077c1 	.word	0x080077c1
 8007754:	080077c1 	.word	0x080077c1
 8007758:	080077c1 	.word	0x080077c1
 800775c:	080077c1 	.word	0x080077c1
 8007760:	080077c1 	.word	0x080077c1
 8007764:	080077c1 	.word	0x080077c1
 8007768:	080077c1 	.word	0x080077c1
 800776c:	080077c1 	.word	0x080077c1
 8007770:	080077c1 	.word	0x080077c1
 8007774:	080077c1 	.word	0x080077c1
 8007778:	080077c1 	.word	0x080077c1
 800777c:	080077c1 	.word	0x080077c1
 8007780:	080077c1 	.word	0x080077c1
 8007784:	080077c1 	.word	0x080077c1
 8007788:	080077c1 	.word	0x080077c1
 800778c:	080077c1 	.word	0x080077c1
 8007790:	080077c1 	.word	0x080077c1
 8007794:	080077c1 	.word	0x080077c1
 8007798:	080077c1 	.word	0x080077c1
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077c1 	.word	0x080077c1
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	080077c1 	.word	0x080077c1
 80077b8:	080077c1 	.word	0x080077c1
 80077bc:	080077c1 	.word	0x080077c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077c0:	bf00      	nop
  }

  return (USBD_OK);
 80077c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	481e      	ldr	r0, [pc, #120]	; (8007858 <CDC_Receive_FS+0x88>)
 80077de:	f7fe fe54 	bl	800648a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077e2:	481d      	ldr	r0, [pc, #116]	; (8007858 <CDC_Receive_FS+0x88>)
 80077e4:	f7fe fe93 	bl	800650e <USBD_CDC_ReceivePacket>

	for(uint16_t i = 0; i < *Len; i++)
 80077e8:	2300      	movs	r3, #0
 80077ea:	81fb      	strh	r3, [r7, #14]
 80077ec:	e024      	b.n	8007838 <CDC_Receive_FS+0x68>
	{
		UartUsb.rxBuffer[UartUsb.rxBufferHead++] = Buf[i];
 80077ee:	89fb      	ldrh	r3, [r7, #14]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	441a      	add	r2, r3
 80077f4:	4b19      	ldr	r3, [pc, #100]	; (800785c <CDC_Receive_FS+0x8c>)
 80077f6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	1c59      	adds	r1, r3, #1
 80077fe:	b288      	uxth	r0, r1
 8007800:	4916      	ldr	r1, [pc, #88]	; (800785c <CDC_Receive_FS+0x8c>)
 8007802:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
 8007806:	4619      	mov	r1, r3
 8007808:	7812      	ldrb	r2, [r2, #0]
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <CDC_Receive_FS+0x8c>)
 800780c:	440b      	add	r3, r1
 800780e:	729a      	strb	r2, [r3, #10]
		UartUsb.rxBufferHead %= UART_BUFFER_SIZE;
 8007810:	4b12      	ldr	r3, [pc, #72]	; (800785c <CDC_Receive_FS+0x8c>)
 8007812:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8007816:	b29a      	uxth	r2, r3
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <CDC_Receive_FS+0x90>)
 800781a:	fba3 1302 	umull	r1, r3, r3, r2
 800781e:	09d9      	lsrs	r1, r3, #7
 8007820:	460b      	mov	r3, r1
 8007822:	019b      	lsls	r3, r3, #6
 8007824:	440b      	add	r3, r1
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	b29a      	uxth	r2, r3
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <CDC_Receive_FS+0x8c>)
 800782e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	for(uint16_t i = 0; i < *Len; i++)
 8007832:	89fb      	ldrh	r3, [r7, #14]
 8007834:	3301      	adds	r3, #1
 8007836:	81fb      	strh	r3, [r7, #14]
 8007838:	89fa      	ldrh	r2, [r7, #14]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d3d5      	bcc.n	80077ee <CDC_Receive_FS+0x1e>
	}
	UartUsb.rxType = DATA_USB;
 8007842:	4b06      	ldr	r3, [pc, #24]	; (800785c <CDC_Receive_FS+0x8c>)
 8007844:	2202      	movs	r2, #2
 8007846:	721a      	strb	r2, [r3, #8]
	handleUsbInterrupt(&UartUsb);
 8007848:	4804      	ldr	r0, [pc, #16]	; (800785c <CDC_Receive_FS+0x8c>)
 800784a:	f000 f843 	bl	80078d4 <handleUsbInterrupt>

  return (USBD_OK);
 800784e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	2000078c 	.word	0x2000078c
 800785c:	20000444 	.word	0x20000444
 8007860:	fc0fc0fd 	.word	0xfc0fc0fd

08007864 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	74fb      	strb	r3, [r7, #19]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007874:	4b15      	ldr	r3, [pc, #84]	; (80078cc <CDC_Transmit_FS+0x68>)
 8007876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787a:	60fb      	str	r3, [r7, #12]
  if (hcdc->TxState > 1){
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007882:	2b01      	cmp	r3, #1
 8007884:	d901      	bls.n	800788a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007886:	2301      	movs	r3, #1
 8007888:	e01c      	b.n	80078c4 <CDC_Transmit_FS+0x60>
  }

  uint32_t to = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
  while(hcdc->TxState != 0)
 800788e:	e008      	b.n	80078a2 <CDC_Transmit_FS+0x3e>
  {
	  to++;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	3301      	adds	r3, #1
 8007894:	617b      	str	r3, [r7, #20]
	  if(to > 90000) //wait for a while if USB busy
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	4a0d      	ldr	r2, [pc, #52]	; (80078d0 <CDC_Transmit_FS+0x6c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d901      	bls.n	80078a2 <CDC_Transmit_FS+0x3e>
		  return USBD_FAIL;
 800789e:	2302      	movs	r3, #2
 80078a0:	e010      	b.n	80078c4 <CDC_Transmit_FS+0x60>
  while(hcdc->TxState != 0)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f1      	bne.n	8007890 <CDC_Transmit_FS+0x2c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4806      	ldr	r0, [pc, #24]	; (80078cc <CDC_Transmit_FS+0x68>)
 80078b4:	f7fe fdd0 	bl	8006458 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078b8:	4804      	ldr	r0, [pc, #16]	; (80078cc <CDC_Transmit_FS+0x68>)
 80078ba:	f7fe fdf9 	bl	80064b0 <USBD_CDC_TransmitPacket>
 80078be:	4603      	mov	r3, r0
 80078c0:	74fb      	strb	r3, [r7, #19]
  /* USER CODE END 7 */
  return result;
 80078c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	2000078c 	.word	0x2000078c
 80078d0:	00015f90 	.word	0x00015f90

080078d4 <handleUsbInterrupt>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
static void handleUsbInterrupt(Uart *port)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	if(port->rxBufferHead != 0)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d018      	beq.n	800791a <handleUsbInterrupt+0x46>
	{
		if(((port->rxBuffer[port->rxBufferHead - 1] == '\r') || (port->rxBuffer[port->rxBufferHead - 1] == '\n'))) //data ends with \r or \n, process as data
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	7a9b      	ldrb	r3, [r3, #10]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b0d      	cmp	r3, #13
 80078fc:	d00a      	beq.n	8007914 <handleUsbInterrupt+0x40>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4413      	add	r3, r2
 800790c:	7a9b      	ldrb	r3, [r3, #10]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b0a      	cmp	r3, #10
 8007912:	d102      	bne.n	800791a <handleUsbInterrupt+0x46>
		{
			port->rxType = DATA_TERM;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	721a      	strb	r2, [r3, #8]
		}
	}
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr

08007924 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2212      	movs	r2, #18
 8007934:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007936:	4b03      	ldr	r3, [pc, #12]	; (8007944 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000154 	.word	0x20000154

08007948 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2204      	movs	r2, #4
 8007958:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800795a:	4b03      	ldr	r3, [pc, #12]	; (8007968 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20000168 	.word	0x20000168

0800796c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4907      	ldr	r1, [pc, #28]	; (80079a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007982:	4808      	ldr	r0, [pc, #32]	; (80079a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007984:	f7ff fd9d 	bl	80074c2 <USBD_GetString>
 8007988:	e004      	b.n	8007994 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4904      	ldr	r1, [pc, #16]	; (80079a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800798e:	4805      	ldr	r0, [pc, #20]	; (80079a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007990:	f7ff fd97 	bl	80074c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007994:	4b02      	ldr	r3, [pc, #8]	; (80079a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000c50 	.word	0x20000c50
 80079a4:	0800834c 	.word	0x0800834c

080079a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	6039      	str	r1, [r7, #0]
 80079b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	4904      	ldr	r1, [pc, #16]	; (80079c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079b8:	4804      	ldr	r0, [pc, #16]	; (80079cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079ba:	f7ff fd82 	bl	80074c2 <USBD_GetString>
  return USBD_StrDesc;
 80079be:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000c50 	.word	0x20000c50
 80079cc:	08008368 	.word	0x08008368

080079d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	221a      	movs	r2, #26
 80079e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079e2:	f000 f843 	bl	8007a6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079e6:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	2000016c 	.word	0x2000016c

080079f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	4907      	ldr	r1, [pc, #28]	; (8007a28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a0a:	4808      	ldr	r0, [pc, #32]	; (8007a2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a0c:	f7ff fd59 	bl	80074c2 <USBD_GetString>
 8007a10:	e004      	b.n	8007a1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4904      	ldr	r1, [pc, #16]	; (8007a28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a16:	4805      	ldr	r0, [pc, #20]	; (8007a2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a18:	f7ff fd53 	bl	80074c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a1c:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000c50 	.word	0x20000c50
 8007a2c:	0800834c 	.word	0x0800834c

08007a30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	6039      	str	r1, [r7, #0]
 8007a3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4907      	ldr	r1, [pc, #28]	; (8007a64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a46:	4808      	ldr	r0, [pc, #32]	; (8007a68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a48:	f7ff fd3b 	bl	80074c2 <USBD_GetString>
 8007a4c:	e004      	b.n	8007a58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	4904      	ldr	r1, [pc, #16]	; (8007a64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a52:	4805      	ldr	r0, [pc, #20]	; (8007a68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a54:	f7ff fd35 	bl	80074c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a58:	4b02      	ldr	r3, [pc, #8]	; (8007a64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000c50 	.word	0x20000c50
 8007a68:	0800834c 	.word	0x0800834c

08007a6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <Get_SerialNum+0x44>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a78:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <Get_SerialNum+0x48>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a7e:	4b0e      	ldr	r3, [pc, #56]	; (8007ab8 <Get_SerialNum+0x4c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a92:	2208      	movs	r2, #8
 8007a94:	4909      	ldr	r1, [pc, #36]	; (8007abc <Get_SerialNum+0x50>)
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f814 	bl	8007ac4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	4908      	ldr	r1, [pc, #32]	; (8007ac0 <Get_SerialNum+0x54>)
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f000 f80f 	bl	8007ac4 <IntToUnicode>
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	1ffff7e8 	.word	0x1ffff7e8
 8007ab4:	1ffff7ec 	.word	0x1ffff7ec
 8007ab8:	1ffff7f0 	.word	0x1ffff7f0
 8007abc:	2000016e 	.word	0x2000016e
 8007ac0:	2000017e 	.word	0x2000017e

08007ac4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
 8007ada:	e027      	b.n	8007b2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	0f1b      	lsrs	r3, r3, #28
 8007ae0:	2b09      	cmp	r3, #9
 8007ae2:	d80b      	bhi.n	8007afc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	0f1b      	lsrs	r3, r3, #28
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	4619      	mov	r1, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	440b      	add	r3, r1
 8007af4:	3230      	adds	r2, #48	; 0x30
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e00a      	b.n	8007b12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0f1b      	lsrs	r3, r3, #28
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	4619      	mov	r1, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	440b      	add	r3, r1
 8007b0c:	3237      	adds	r2, #55	; 0x37
 8007b0e:	b2d2      	uxtb	r2, r2
 8007b10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
 8007b2c:	7dfa      	ldrb	r2, [r7, #23]
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d3d3      	bcc.n	8007adc <IntToUnicode+0x18>
  }
}
 8007b34:	bf00      	nop
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
	...

08007b40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a11      	ldr	r2, [pc, #68]	; (8007b94 <HAL_PCD_MspInit+0x54>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d11b      	bne.n	8007b8a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b52:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <HAL_PCD_MspInit+0x58>)
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	4a10      	ldr	r2, [pc, #64]	; (8007b98 <HAL_PCD_MspInit+0x58>)
 8007b58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b5c:	61d3      	str	r3, [r2, #28]
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <HAL_PCD_MspInit+0x58>)
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	2013      	movs	r0, #19
 8007b70:	f7f9 fe01 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007b74:	2013      	movs	r0, #19
 8007b76:	f7f9 fe1a 	bl	80017ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	2014      	movs	r0, #20
 8007b80:	f7f9 fdf9 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007b84:	2014      	movs	r0, #20
 8007b86:	f7f9 fe12 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40005c00 	.word	0x40005c00
 8007b98:	40021000 	.word	0x40021000

08007b9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f7fe fd61 	bl	800667a <USBD_LL_SetupStage>
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	440b      	add	r3, r1
 8007be0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	4619      	mov	r1, r3
 8007bea:	f7fe fd91 	bl	8006710 <USBD_LL_DataOutStage>
}
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c08:	78fa      	ldrb	r2, [r7, #3]
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	440b      	add	r3, r1
 8007c16:	333c      	adds	r3, #60	; 0x3c
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f7fe fde8 	bl	80067f2 <USBD_LL_DataInStage>
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe fef8 	bl	8006a2e <USBD_LL_SOF>
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d001      	beq.n	8007c5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c5a:	f7f8 fc41 	bl	80004e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c64:	7bfa      	ldrb	r2, [r7, #15]
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fea8 	bl	80069be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fe fe61 	bl	800693c <USBD_LL_Reset>
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fea2 	bl	80069dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ca0:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <HAL_PCD_SuspendCallback+0x30>)
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	4a03      	ldr	r2, [pc, #12]	; (8007cb4 <HAL_PCD_SuspendCallback+0x30>)
 8007ca6:	f043 0306 	orr.w	r3, r3, #6
 8007caa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	e000ed00 	.word	0xe000ed00

08007cb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fe9c 	bl	8006a04 <USBD_LL_Resume>
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007cdc:	4a28      	ldr	r2, [pc, #160]	; (8007d80 <USBD_LL_Init+0xac>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a26      	ldr	r2, [pc, #152]	; (8007d80 <USBD_LL_Init+0xac>)
 8007ce8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007cec:	4b24      	ldr	r3, [pc, #144]	; (8007d80 <USBD_LL_Init+0xac>)
 8007cee:	4a25      	ldr	r2, [pc, #148]	; (8007d84 <USBD_LL_Init+0xb0>)
 8007cf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007cf2:	4b23      	ldr	r3, [pc, #140]	; (8007d80 <USBD_LL_Init+0xac>)
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007cf8:	4b21      	ldr	r3, [pc, #132]	; (8007d80 <USBD_LL_Init+0xac>)
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007cfe:	4b20      	ldr	r3, [pc, #128]	; (8007d80 <USBD_LL_Init+0xac>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d04:	4b1e      	ldr	r3, [pc, #120]	; (8007d80 <USBD_LL_Init+0xac>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <USBD_LL_Init+0xac>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d10:	481b      	ldr	r0, [pc, #108]	; (8007d80 <USBD_LL_Init+0xac>)
 8007d12:	f7f9 fd66 	bl	80017e2 <HAL_PCD_Init>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007d1c:	f7f8 fbe0 	bl	80004e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d26:	2318      	movs	r3, #24
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	f7fb f9d9 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d36:	2358      	movs	r3, #88	; 0x58
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	f7fb f9d1 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d46:	23c0      	movs	r3, #192	; 0xc0
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2181      	movs	r1, #129	; 0x81
 8007d4c:	f7fb f9c9 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d56:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	f7fb f9c0 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2182      	movs	r1, #130	; 0x82
 8007d70:	f7fb f9b7 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000c90 	.word	0x20000c90
 8007d84:	40005c00 	.word	0x40005c00

08007d88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7f9 fe2a 	bl	80019f8 <HAL_PCD_Start>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f94e 	bl	800804c <USBD_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4603      	mov	r3, r0
 8007dce:	70fb      	strb	r3, [r7, #3]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70bb      	strb	r3, [r7, #2]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007de6:	78bb      	ldrb	r3, [r7, #2]
 8007de8:	883a      	ldrh	r2, [r7, #0]
 8007dea:	78f9      	ldrb	r1, [r7, #3]
 8007dec:	f7f9 ffa4 	bl	8001d38 <HAL_PCD_EP_Open>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 f928 	bl	800804c <USBD_Get_USB_Status>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7f9 ffeb 	bl	8001e04 <HAL_PCD_EP_Close>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 f909 	bl	800804c <USBD_Get_USB_Status>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fa f8ab 	bl	8001fc2 <HAL_PCD_EP_SetStall>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f8ea 	bl	800804c <USBD_Get_USB_Status>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fa f8ec 	bl	8002082 <HAL_PCD_EP_ClrStall>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f8cb 	bl	800804c <USBD_Get_USB_Status>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ed6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0c      	bge.n	8007efa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	440b      	add	r3, r1
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	e00b      	b.n	8007f12 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f00:	68f9      	ldr	r1, [r7, #12]
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	440b      	add	r3, r1
 8007f0c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007f10:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr

08007f1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7f9 fed7 	bl	8001cee <HAL_PCD_SetAddress>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f880 	bl	800804c <USBD_Get_USB_Status>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	461a      	mov	r2, r3
 8007f66:	460b      	mov	r3, r1
 8007f68:	72fb      	strb	r3, [r7, #11]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f7c:	893b      	ldrh	r3, [r7, #8]
 8007f7e:	7af9      	ldrb	r1, [r7, #11]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	f7f9 ffdb 	bl	8001f3c <HAL_PCD_EP_Transmit>
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f85d 	bl	800804c <USBD_Get_USB_Status>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f96:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	607a      	str	r2, [r7, #4]
 8007faa:	461a      	mov	r2, r3
 8007fac:	460b      	mov	r3, r1
 8007fae:	72fb      	strb	r3, [r7, #11]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fc2:	893b      	ldrh	r3, [r7, #8]
 8007fc4:	7af9      	ldrb	r1, [r7, #11]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	f7f9 ff64 	bl	8001e94 <HAL_PCD_EP_Receive>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f83a 	bl	800804c <USBD_Get_USB_Status>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7f9 ff86 	bl	8001f0e <HAL_PCD_EP_GetRxCount>
 8008002:	4603      	mov	r3, r0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008014:	4b02      	ldr	r3, [pc, #8]	; (8008020 <USBD_static_malloc+0x14>)
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr
 8008020:	20000560 	.word	0x20000560

08008024 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d817      	bhi.n	8008090 <USBD_Get_USB_Status+0x44>
 8008060:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <USBD_Get_USB_Status+0x1c>)
 8008062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008066:	bf00      	nop
 8008068:	08008079 	.word	0x08008079
 800806c:	0800807f 	.word	0x0800807f
 8008070:	08008085 	.word	0x08008085
 8008074:	0800808b 	.word	0x0800808b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
    break;
 800807c:	e00b      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800807e:	2302      	movs	r3, #2
 8008080:	73fb      	strb	r3, [r7, #15]
    break;
 8008082:	e008      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
    break;
 8008088:	e005      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800808a:	2302      	movs	r3, #2
 800808c:	73fb      	strb	r3, [r7, #15]
    break;
 800808e:	e002      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008090:	2302      	movs	r3, #2
 8008092:	73fb      	strb	r3, [r7, #15]
    break;
 8008094:	bf00      	nop
  }
  return usb_status;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop

080080a4 <__errno>:
 80080a4:	4b01      	ldr	r3, [pc, #4]	; (80080ac <__errno+0x8>)
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	20000188 	.word	0x20000188

080080b0 <__libc_init_array>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	2500      	movs	r5, #0
 80080b4:	4e0c      	ldr	r6, [pc, #48]	; (80080e8 <__libc_init_array+0x38>)
 80080b6:	4c0d      	ldr	r4, [pc, #52]	; (80080ec <__libc_init_array+0x3c>)
 80080b8:	1ba4      	subs	r4, r4, r6
 80080ba:	10a4      	asrs	r4, r4, #2
 80080bc:	42a5      	cmp	r5, r4
 80080be:	d109      	bne.n	80080d4 <__libc_init_array+0x24>
 80080c0:	f000 f8dc 	bl	800827c <_init>
 80080c4:	2500      	movs	r5, #0
 80080c6:	4e0a      	ldr	r6, [pc, #40]	; (80080f0 <__libc_init_array+0x40>)
 80080c8:	4c0a      	ldr	r4, [pc, #40]	; (80080f4 <__libc_init_array+0x44>)
 80080ca:	1ba4      	subs	r4, r4, r6
 80080cc:	10a4      	asrs	r4, r4, #2
 80080ce:	42a5      	cmp	r5, r4
 80080d0:	d105      	bne.n	80080de <__libc_init_array+0x2e>
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080d8:	4798      	blx	r3
 80080da:	3501      	adds	r5, #1
 80080dc:	e7ee      	b.n	80080bc <__libc_init_array+0xc>
 80080de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080e2:	4798      	blx	r3
 80080e4:	3501      	adds	r5, #1
 80080e6:	e7f2      	b.n	80080ce <__libc_init_array+0x1e>
 80080e8:	080083a0 	.word	0x080083a0
 80080ec:	080083a0 	.word	0x080083a0
 80080f0:	080083a0 	.word	0x080083a0
 80080f4:	080083a4 	.word	0x080083a4

080080f8 <memset>:
 80080f8:	4603      	mov	r3, r0
 80080fa:	4402      	add	r2, r0
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d100      	bne.n	8008102 <memset+0xa>
 8008100:	4770      	bx	lr
 8008102:	f803 1b01 	strb.w	r1, [r3], #1
 8008106:	e7f9      	b.n	80080fc <memset+0x4>

08008108 <rand>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <rand+0x50>)
 800810c:	681c      	ldr	r4, [r3, #0]
 800810e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008110:	b97b      	cbnz	r3, 8008132 <rand+0x2a>
 8008112:	2018      	movs	r0, #24
 8008114:	f000 f83e 	bl	8008194 <malloc>
 8008118:	4a10      	ldr	r2, [pc, #64]	; (800815c <rand+0x54>)
 800811a:	4b11      	ldr	r3, [pc, #68]	; (8008160 <rand+0x58>)
 800811c:	63a0      	str	r0, [r4, #56]	; 0x38
 800811e:	e9c0 2300 	strd	r2, r3, [r0]
 8008122:	4b10      	ldr	r3, [pc, #64]	; (8008164 <rand+0x5c>)
 8008124:	2201      	movs	r2, #1
 8008126:	6083      	str	r3, [r0, #8]
 8008128:	230b      	movs	r3, #11
 800812a:	8183      	strh	r3, [r0, #12]
 800812c:	2300      	movs	r3, #0
 800812e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008132:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008134:	480c      	ldr	r0, [pc, #48]	; (8008168 <rand+0x60>)
 8008136:	690a      	ldr	r2, [r1, #16]
 8008138:	694b      	ldr	r3, [r1, #20]
 800813a:	4350      	muls	r0, r2
 800813c:	4c0b      	ldr	r4, [pc, #44]	; (800816c <rand+0x64>)
 800813e:	fb04 0003 	mla	r0, r4, r3, r0
 8008142:	fba2 2304 	umull	r2, r3, r2, r4
 8008146:	4403      	add	r3, r0
 8008148:	1c54      	adds	r4, r2, #1
 800814a:	f143 0500 	adc.w	r5, r3, #0
 800814e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8008152:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000188 	.word	0x20000188
 800815c:	abcd330e 	.word	0xabcd330e
 8008160:	e66d1234 	.word	0xe66d1234
 8008164:	0005deec 	.word	0x0005deec
 8008168:	5851f42d 	.word	0x5851f42d
 800816c:	4c957f2d 	.word	0x4c957f2d

08008170 <strncmp>:
 8008170:	b510      	push	{r4, lr}
 8008172:	b16a      	cbz	r2, 8008190 <strncmp+0x20>
 8008174:	3901      	subs	r1, #1
 8008176:	1884      	adds	r4, r0, r2
 8008178:	f810 3b01 	ldrb.w	r3, [r0], #1
 800817c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008180:	4293      	cmp	r3, r2
 8008182:	d103      	bne.n	800818c <strncmp+0x1c>
 8008184:	42a0      	cmp	r0, r4
 8008186:	d001      	beq.n	800818c <strncmp+0x1c>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f5      	bne.n	8008178 <strncmp+0x8>
 800818c:	1a98      	subs	r0, r3, r2
 800818e:	bd10      	pop	{r4, pc}
 8008190:	4610      	mov	r0, r2
 8008192:	e7fc      	b.n	800818e <strncmp+0x1e>

08008194 <malloc>:
 8008194:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <malloc+0xc>)
 8008196:	4601      	mov	r1, r0
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	f000 b803 	b.w	80081a4 <_malloc_r>
 800819e:	bf00      	nop
 80081a0:	20000188 	.word	0x20000188

080081a4 <_malloc_r>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	1ccd      	adds	r5, r1, #3
 80081a8:	f025 0503 	bic.w	r5, r5, #3
 80081ac:	3508      	adds	r5, #8
 80081ae:	2d0c      	cmp	r5, #12
 80081b0:	bf38      	it	cc
 80081b2:	250c      	movcc	r5, #12
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	4606      	mov	r6, r0
 80081b8:	db01      	blt.n	80081be <_malloc_r+0x1a>
 80081ba:	42a9      	cmp	r1, r5
 80081bc:	d903      	bls.n	80081c6 <_malloc_r+0x22>
 80081be:	230c      	movs	r3, #12
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	2000      	movs	r0, #0
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	f000 f857 	bl	8008278 <__malloc_lock>
 80081ca:	4a21      	ldr	r2, [pc, #132]	; (8008250 <_malloc_r+0xac>)
 80081cc:	6814      	ldr	r4, [r2, #0]
 80081ce:	4621      	mov	r1, r4
 80081d0:	b991      	cbnz	r1, 80081f8 <_malloc_r+0x54>
 80081d2:	4c20      	ldr	r4, [pc, #128]	; (8008254 <_malloc_r+0xb0>)
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	b91b      	cbnz	r3, 80081e0 <_malloc_r+0x3c>
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f83d 	bl	8008258 <_sbrk_r>
 80081de:	6020      	str	r0, [r4, #0]
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f000 f838 	bl	8008258 <_sbrk_r>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d124      	bne.n	8008236 <_malloc_r+0x92>
 80081ec:	230c      	movs	r3, #12
 80081ee:	4630      	mov	r0, r6
 80081f0:	6033      	str	r3, [r6, #0]
 80081f2:	f000 f842 	bl	800827a <__malloc_unlock>
 80081f6:	e7e4      	b.n	80081c2 <_malloc_r+0x1e>
 80081f8:	680b      	ldr	r3, [r1, #0]
 80081fa:	1b5b      	subs	r3, r3, r5
 80081fc:	d418      	bmi.n	8008230 <_malloc_r+0x8c>
 80081fe:	2b0b      	cmp	r3, #11
 8008200:	d90f      	bls.n	8008222 <_malloc_r+0x7e>
 8008202:	600b      	str	r3, [r1, #0]
 8008204:	18cc      	adds	r4, r1, r3
 8008206:	50cd      	str	r5, [r1, r3]
 8008208:	4630      	mov	r0, r6
 800820a:	f000 f836 	bl	800827a <__malloc_unlock>
 800820e:	f104 000b 	add.w	r0, r4, #11
 8008212:	1d23      	adds	r3, r4, #4
 8008214:	f020 0007 	bic.w	r0, r0, #7
 8008218:	1ac3      	subs	r3, r0, r3
 800821a:	d0d3      	beq.n	80081c4 <_malloc_r+0x20>
 800821c:	425a      	negs	r2, r3
 800821e:	50e2      	str	r2, [r4, r3]
 8008220:	e7d0      	b.n	80081c4 <_malloc_r+0x20>
 8008222:	684b      	ldr	r3, [r1, #4]
 8008224:	428c      	cmp	r4, r1
 8008226:	bf16      	itet	ne
 8008228:	6063      	strne	r3, [r4, #4]
 800822a:	6013      	streq	r3, [r2, #0]
 800822c:	460c      	movne	r4, r1
 800822e:	e7eb      	b.n	8008208 <_malloc_r+0x64>
 8008230:	460c      	mov	r4, r1
 8008232:	6849      	ldr	r1, [r1, #4]
 8008234:	e7cc      	b.n	80081d0 <_malloc_r+0x2c>
 8008236:	1cc4      	adds	r4, r0, #3
 8008238:	f024 0403 	bic.w	r4, r4, #3
 800823c:	42a0      	cmp	r0, r4
 800823e:	d005      	beq.n	800824c <_malloc_r+0xa8>
 8008240:	1a21      	subs	r1, r4, r0
 8008242:	4630      	mov	r0, r6
 8008244:	f000 f808 	bl	8008258 <_sbrk_r>
 8008248:	3001      	adds	r0, #1
 800824a:	d0cf      	beq.n	80081ec <_malloc_r+0x48>
 800824c:	6025      	str	r5, [r4, #0]
 800824e:	e7db      	b.n	8008208 <_malloc_r+0x64>
 8008250:	20000780 	.word	0x20000780
 8008254:	20000784 	.word	0x20000784

08008258 <_sbrk_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	2300      	movs	r3, #0
 800825c:	4c05      	ldr	r4, [pc, #20]	; (8008274 <_sbrk_r+0x1c>)
 800825e:	4605      	mov	r5, r0
 8008260:	4608      	mov	r0, r1
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	f7f8 fbd8 	bl	8000a18 <_sbrk>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_sbrk_r+0x1a>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	b103      	cbz	r3, 8008272 <_sbrk_r+0x1a>
 8008270:	602b      	str	r3, [r5, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	20000f7c 	.word	0x20000f7c

08008278 <__malloc_lock>:
 8008278:	4770      	bx	lr

0800827a <__malloc_unlock>:
 800827a:	4770      	bx	lr

0800827c <_init>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	bf00      	nop
 8008280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008282:	bc08      	pop	{r3}
 8008284:	469e      	mov	lr, r3
 8008286:	4770      	bx	lr

08008288 <_fini>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	bf00      	nop
 800828c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828e:	bc08      	pop	{r3}
 8008290:	469e      	mov	lr, r3
 8008292:	4770      	bx	lr
